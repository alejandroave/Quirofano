<?php


/**
 * Base class that represents a row from the 'hc_agenda' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.7 on:
 *
 * Wed Dec  4 10:55:32 2013
 *
 * @package    propel.generator.lib.model.data.om
 */
abstract class BaseAgenda extends BaseObject implements Persistent
{
    /**
     * Peer class name
     */
    const PEER = 'AgendaPeer';

    /**
     * The Peer class.
     * Instance provides a convenient way of calling static methods on a class
     * that calling code may not be able to identify.
     * @var        AgendaPeer
     */
    protected static $peer;

    /**
     * The flag var to prevent infinit loop in deep copy
     * @var       boolean
     */
    protected $startCopy = false;

    /**
     * The value for the id field.
     * @var        int
     */
    protected $id;

    /**
     * The value for the programacion field.
     * @var        string
     */
    protected $programacion;

    /**
     * The value for the fechaestado field.
     * @var        string
     */
    protected $fechaestado;

    /**
     * The value for the hora field.
     * @var        string
     */
    protected $hora;

    /**
     * The value for the horaestado field.
     * @var        string
     */
    protected $horaestado;

    /**
     * The value for the inicio field.
     * @var        string
     */
    protected $inicio;

    /**
     * The value for the last_time field.
     * @var        string
     */
    protected $last_time;

    /**
     * The value for the ingreso field.
     * @var        string
     */
    protected $ingreso;

    /**
     * The value for the sala_id field.
     * @var        int
     */
    protected $sala_id;

    /**
     * The value for the quirofano_id field.
     * @var        int
     */
    protected $quirofano_id;

    /**
     * The value for the egreso field.
     * @var        string
     */
    protected $egreso;

    /**
     * The value for the cie9mc field.
     * @var        string
     */
    protected $cie9mc;

    /**
     * The value for the cie9mc_id field.
     * @var        string
     */
    protected $cie9mc_id;

    /**
     * The value for the cx_realizada field.
     * @var        string
     */
    protected $cx_realizada;

    /**
     * The value for the cx_realizada_id field.
     * @var        string
     */
    protected $cx_realizada_id;

    /**
     * The value for the tipo_cx field.
     * @var        int
     */
    protected $tipo_cx;

    /**
     * The value for the diagnostico field.
     * @var        string
     */
    protected $diagnostico;

    /**
     * The value for the diagnostico_id field.
     * @var        string
     */
    protected $diagnostico_id;

    /**
     * The value for the medico_name field.
     * @var        string
     */
    protected $medico_name;

    /**
     * The value for the paciente_name field.
     * @var        string
     */
    protected $paciente_name;

    /**
     * The value for the paciente_id field.
     * @var        int
     */
    protected $paciente_id;

    /**
     * The value for the edad field.
     * @var        string
     */
    protected $edad;

    /**
     * The value for the genero field.
     * @var        string
     */
    protected $genero;

    /**
     * The value for the genero_id field.
     * @var        int
     */
    protected $genero_id;

    /**
     * The value for the registro field.
     * @var        string
     */
    protected $registro;

    /**
     * The value for the servicio field.
     * @var        int
     */
    protected $servicio;

    /**
     * The value for the anestesia_id field.
     * @var        int
     */
    protected $anestesia_id;

    /**
     * The value for the anestesia_empleada field.
     * @var        string
     */
    protected $anestesia_empleada;

    /**
     * The value for the ev_adversos_anestesia field.
     * @var        string
     */
    protected $ev_adversos_anestesia;

    /**
     * The value for the observaciones field.
     * @var        string
     */
    protected $observaciones;

    /**
     * The value for the requerimiento field.
     * @var        string
     */
    protected $requerimiento;

    /**
     * The value for the req_insumos field.
     * @var        string
     */
    protected $req_insumos;

    /**
     * The value for the req_hemoderiv field.
     * @var        string
     */
    protected $req_hemoderiv;

    /**
     * The value for the req_laboratorio field.
     * @var        string
     */
    protected $req_laboratorio;

    /**
     * The value for the req_anestesico field.
     * @var        string
     */
    protected $req_anestesico;

    /**
     * The value for the status field.
     * Note: this column has a database default value of: 1
     * @var        int
     */
    protected $status;

    /**
     * The value for the causa_diferido_id field.
     * @var        int
     */
    protected $causa_diferido_id;

    /**
     * The value for the solicitado field.
     * @var        boolean
     */
    protected $solicitado;

    /**
     * The value for the riesgoqx_id field.
     * @var        int
     */
    protected $riesgoqx_id;

    /**
     * The value for the contaminacionqx_id field.
     * @var        int
     */
    protected $contaminacionqx_id;

    /**
     * The value for the eventoqx_id field.
     * @var        int
     */
    protected $eventoqx_id;

    /**
     * The value for the complicaciones field.
     * @var        string
     */
    protected $complicaciones;

    /**
     * The value for the val_pre_anestesica field.
     * @var        string
     */
    protected $val_pre_anestesica;

    /**
     * The value for the reintervencion field.
     * @var        boolean
     */
    protected $reintervencion;

    /**
     * The value for the permisos field.
     * @var
     */
    protected $permisos;

    /**
     * The unserialized $permisos value - i.e. the persisted object.
     * This is necessary to avoid repeated calls to unserialize() at runtime.
     * @var        object
     */
    protected $permisos_unserialized;

    /**
     * The value for the tipo_proc_id field.
     * @var        int
     */
    protected $tipo_proc_id;

    /**
     * The value for the atencion_id field.
     * @var        int
     */
    protected $atencion_id;

    /**
     * The value for the tiempo_fuera field.
     * @var        boolean
     */
    protected $tiempo_fuera;

    /**
     * The value for the procedencia field.
     * @var        string
     */
    protected $procedencia;

    /**
     * The value for the clasificacionqx field.
     * @var        int
     */
    protected $clasificacionqx;

    /**
     * The value for the region_px field.
     * @var        int
     */
    protected $region_px;

    /**
     * The value for the extension_px field.
     * @var        int
     */
    protected $extension_px;

    /**
     * The value for the anexo_detalle field.
     * @var        int
     */
    protected $anexo_detalle;

    /**
     * The value for the destino_px field.
     * @var        int
     */
    protected $destino_px;

    /**
     * The value for the liberacion_sala field.
     * @var        string
     */
    protected $liberacion_sala;

    /**
     * The value for the tiempo_est field.
     * @var        string
     */
    protected $tiempo_est;

    /**
     * The value for the riesgo_qx_pre field.
     * @var        string
     */
    protected $riesgo_qx_pre;

    /**
     * The value for the show_in_index field.
     * Note: this column has a database default value of: true
     * @var        boolean
     */
    protected $show_in_index;

    /**
     * The value for the protocolo field.
     * Note: this column has a database default value of: false
     * @var        boolean
     */
    protected $protocolo;

    /**
     * The value for the cancelada field.
     * Note: this column has a database default value of: false
     * @var        boolean
     */
    protected $cancelada;

    /**
     * The value for the created_at field.
     * @var        string
     */
    protected $created_at;

    /**
     * The value for the updated_at field.
     * @var        string
     */
    protected $updated_at;

    /**
     * @var        Salaquirurgica
     */
    protected $aSalaquirurgica;

    /**
     * @var        Quirofano
     */
    protected $aQuirofano;

    /**
     * @var        Riesgoqx
     */
    protected $aRiesgoqx;

    /**
     * @var        Contaminacionqx
     */
    protected $aContaminacionqx;

    /**
     * @var        Eventoqx
     */
    protected $aEventoqx;

    /**
     * @var        Procedimiento
     */
    protected $aProcedimiento;

    /**
     * @var        Causadiferido
     */
    protected $aCausadiferido;

    /**
     * @var        Atencion
     */
    protected $aAtencion;

    /**
     * @var        Especialidad
     */
    protected $aEspecialidad;

    /**
     * @var        PropelObjectCollection|Personalcirugia[] Collection to store aggregation of Personalcirugia objects.
     */
    protected $collPersonalcirugias;
    protected $collPersonalcirugiasPartial;

    /**
     * @var        PropelObjectCollection|Diagnosticocirugia[] Collection to store aggregation of Diagnosticocirugia objects.
     */
    protected $collDiagnosticocirugias;
    protected $collDiagnosticocirugiasPartial;

    /**
     * @var        PropelObjectCollection|Procedimientocirugia[] Collection to store aggregation of Procedimientocirugia objects.
     */
    protected $collProcedimientocirugias;
    protected $collProcedimientocirugiasPartial;

    /**
     * @var        PropelObjectCollection|Procedimientregrogramado[] Collection to store aggregation of Procedimientregrogramado objects.
     */
    protected $collProcedimientregrogramados;
    protected $collProcedimientregrogramadosPartial;

    /**
     * Flag to prevent endless save loop, if this object is referenced
     * by another object which falls in this transaction.
     * @var        boolean
     */
    protected $alreadyInSave = false;

    /**
     * Flag to prevent endless validation loop, if this object is referenced
     * by another object which falls in this transaction.
     * @var        boolean
     */
    protected $alreadyInValidation = false;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $personalcirugiasScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $diagnosticocirugiasScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $procedimientocirugiasScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $procedimientregrogramadosScheduledForDeletion = null;

    /**
     * Applies default values to this object.
     * This method should be called from the object's constructor (or
     * equivalent initialization method).
     * @see        __construct()
     */
    public function applyDefaultValues()
    {
        $this->status = 1;
        $this->show_in_index = true;
        $this->protocolo = false;
        $this->cancelada = false;
    }

    /**
     * Initializes internal state of BaseAgenda object.
     * @see        applyDefaults()
     */
    public function __construct()
    {
        parent::__construct();
        $this->applyDefaultValues();
    }

    /**
     * Get the [id] column value.
     *
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Get the [optionally formatted] temporal [programacion] column value.
     *
     *
     * @param string $format The date/time format string (either date()-style or strftime()-style).
     *				 If format is null, then the raw DateTime object will be returned.
     * @return mixed Formatted date/time value as string or DateTime object (if format is null), null if column is null, and 0 if column value is 0000-00-00
     * @throws PropelException - if unable to parse/validate the date/time value.
     */
    public function getProgramacion($format = 'Y-m-d')
    {
        if ($this->programacion === null) {
            return null;
        }

        if ($this->programacion === '0000-00-00') {
            // while technically this is not a default value of null,
            // this seems to be closest in meaning.
            return null;
        } else {
            try {
                $dt = new DateTime($this->programacion);
            } catch (Exception $x) {
                throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->programacion, true), $x);
            }
        }

        if ($format === null) {
            // Because propel.useDateTimeClass is true, we return a DateTime object.
            return $dt;
        } elseif (strpos($format, '%') !== false) {
            return strftime($format, $dt->format('U'));
        } else {
            return $dt->format($format);
        }
    }

    /**
     * Get the [optionally formatted] temporal [fechaestado] column value.
     *
     *
     * @param string $format The date/time format string (either date()-style or strftime()-style).
     *				 If format is null, then the raw DateTime object will be returned.
     * @return mixed Formatted date/time value as string or DateTime object (if format is null), null if column is null, and 0 if column value is 0000-00-00
     * @throws PropelException - if unable to parse/validate the date/time value.
     */
    public function getFechaestado($format = 'Y-m-d')
    {
        if ($this->fechaestado === null) {
            return null;
        }

        if ($this->fechaestado === '0000-00-00') {
            // while technically this is not a default value of null,
            // this seems to be closest in meaning.
            return null;
        } else {
            try {
                $dt = new DateTime($this->fechaestado);
            } catch (Exception $x) {
                throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->fechaestado, true), $x);
            }
        }

        if ($format === null) {
            // Because propel.useDateTimeClass is true, we return a DateTime object.
            return $dt;
        } elseif (strpos($format, '%') !== false) {
            return strftime($format, $dt->format('U'));
        } else {
            return $dt->format($format);
        }
    }

    /**
     * Get the [optionally formatted] temporal [hora] column value.
     *
     *
     * @param string $format The date/time format string (either date()-style or strftime()-style).
     *				 If format is null, then the raw DateTime object will be returned.
     * @return mixed Formatted date/time value as string or DateTime object (if format is null), null if column is null
     * @throws PropelException - if unable to parse/validate the date/time value.
     */
    public function getHora($format = 'H:i:s')
    {
        if ($this->hora === null) {
            return null;
        }


        try {
            $dt = new DateTime($this->hora);
        } catch (Exception $x) {
            throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->hora, true), $x);
        }

        if ($format === null) {
            // Because propel.useDateTimeClass is true, we return a DateTime object.
            return $dt;
        } elseif (strpos($format, '%') !== false) {
            return strftime($format, $dt->format('U'));
        } else {
            return $dt->format($format);
        }
    }

    /**
     * Get the [optionally formatted] temporal [horaestado] column value.
     *
     *
     * @param string $format The date/time format string (either date()-style or strftime()-style).
     *				 If format is null, then the raw DateTime object will be returned.
     * @return mixed Formatted date/time value as string or DateTime object (if format is null), null if column is null
     * @throws PropelException - if unable to parse/validate the date/time value.
     */
    public function getHoraestado($format = 'H:i:s')
    {
        if ($this->horaestado === null) {
            return null;
        }


        try {
            $dt = new DateTime($this->horaestado);
        } catch (Exception $x) {
            throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->horaestado, true), $x);
        }

        if ($format === null) {
            // Because propel.useDateTimeClass is true, we return a DateTime object.
            return $dt;
        } elseif (strpos($format, '%') !== false) {
            return strftime($format, $dt->format('U'));
        } else {
            return $dt->format($format);
        }
    }

    /**
     * Get the [optionally formatted] temporal [inicio] column value.
     *
     *
     * @param string $format The date/time format string (either date()-style or strftime()-style).
     *				 If format is null, then the raw DateTime object will be returned.
     * @return mixed Formatted date/time value as string or DateTime object (if format is null), null if column is null, and 0 if column value is 0000-00-00 00:00:00
     * @throws PropelException - if unable to parse/validate the date/time value.
     */
    public function getInicio($format = 'Y-m-d H:i:s')
    {
        if ($this->inicio === null) {
            return null;
        }

        if ($this->inicio === '0000-00-00 00:00:00') {
            // while technically this is not a default value of null,
            // this seems to be closest in meaning.
            return null;
        } else {
            try {
                $dt = new DateTime($this->inicio);
            } catch (Exception $x) {
                throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->inicio, true), $x);
            }
        }

        if ($format === null) {
            // Because propel.useDateTimeClass is true, we return a DateTime object.
            return $dt;
        } elseif (strpos($format, '%') !== false) {
            return strftime($format, $dt->format('U'));
        } else {
            return $dt->format($format);
        }
    }

    /**
     * Get the [optionally formatted] temporal [last_time] column value.
     *
     *
     * @param string $format The date/time format string (either date()-style or strftime()-style).
     *				 If format is null, then the raw DateTime object will be returned.
     * @return mixed Formatted date/time value as string or DateTime object (if format is null), null if column is null, and 0 if column value is 0000-00-00 00:00:00
     * @throws PropelException - if unable to parse/validate the date/time value.
     */
    public function getLastTime($format = 'Y-m-d H:i:s')
    {
        if ($this->last_time === null) {
            return null;
        }

        if ($this->last_time === '0000-00-00 00:00:00') {
            // while technically this is not a default value of null,
            // this seems to be closest in meaning.
            return null;
        } else {
            try {
                $dt = new DateTime($this->last_time);
            } catch (Exception $x) {
                throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->last_time, true), $x);
            }
        }

        if ($format === null) {
            // Because propel.useDateTimeClass is true, we return a DateTime object.
            return $dt;
        } elseif (strpos($format, '%') !== false) {
            return strftime($format, $dt->format('U'));
        } else {
            return $dt->format($format);
        }
    }

    /**
     * Get the [optionally formatted] temporal [ingreso] column value.
     *
     *
     * @param string $format The date/time format string (either date()-style or strftime()-style).
     *				 If format is null, then the raw DateTime object will be returned.
     * @return mixed Formatted date/time value as string or DateTime object (if format is null), null if column is null, and 0 if column value is 0000-00-00 00:00:00
     * @throws PropelException - if unable to parse/validate the date/time value.
     */
    public function getIngreso($format = 'Y-m-d H:i:s')
    {
        if ($this->ingreso === null) {
            return null;
        }

        if ($this->ingreso === '0000-00-00 00:00:00') {
            // while technically this is not a default value of null,
            // this seems to be closest in meaning.
            return null;
        } else {
            try {
                $dt = new DateTime($this->ingreso);
            } catch (Exception $x) {
                throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->ingreso, true), $x);
            }
        }

        if ($format === null) {
            // Because propel.useDateTimeClass is true, we return a DateTime object.
            return $dt;
        } elseif (strpos($format, '%') !== false) {
            return strftime($format, $dt->format('U'));
        } else {
            return $dt->format($format);
        }
    }

    /**
     * Get the [sala_id] column value.
     *
     * @return int
     */
    public function getSalaId()
    {
        return $this->sala_id;
    }

    /**
     * Get the [quirofano_id] column value.
     *
     * @return int
     */
    public function getQuirofanoId()
    {
        return $this->quirofano_id;
    }

    /**
     * Get the [optionally formatted] temporal [egreso] column value.
     *
     *
     * @param string $format The date/time format string (either date()-style or strftime()-style).
     *				 If format is null, then the raw DateTime object will be returned.
     * @return mixed Formatted date/time value as string or DateTime object (if format is null), null if column is null, and 0 if column value is 0000-00-00 00:00:00
     * @throws PropelException - if unable to parse/validate the date/time value.
     */
    public function getEgreso($format = 'Y-m-d H:i:s')
    {
        if ($this->egreso === null) {
            return null;
        }

        if ($this->egreso === '0000-00-00 00:00:00') {
            // while technically this is not a default value of null,
            // this seems to be closest in meaning.
            return null;
        } else {
            try {
                $dt = new DateTime($this->egreso);
            } catch (Exception $x) {
                throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->egreso, true), $x);
            }
        }

        if ($format === null) {
            // Because propel.useDateTimeClass is true, we return a DateTime object.
            return $dt;
        } elseif (strpos($format, '%') !== false) {
            return strftime($format, $dt->format('U'));
        } else {
            return $dt->format($format);
        }
    }

    /**
     * Get the [cie9mc] column value.
     *
     * @return string
     */
    public function getCie9mc()
    {
        return $this->cie9mc;
    }

    /**
     * Get the [cie9mc_id] column value.
     *
     * @return string
     */
    public function getCie9mcId()
    {
        return $this->cie9mc_id;
    }

    /**
     * Get the [cx_realizada] column value.
     *
     * @return string
     */
    public function getCxRealizada()
    {
        return $this->cx_realizada;
    }

    /**
     * Get the [cx_realizada_id] column value.
     *
     * @return string
     */
    public function getCxRealizadaId()
    {
        return $this->cx_realizada_id;
    }

    /**
     * Get the [tipo_cx] column value.
     *
     * @return int
     */
    public function getTipoCx()
    {
        return $this->tipo_cx;
    }

    /**
     * Get the [diagnostico] column value.
     *
     * @return string
     */
    public function getDiagnostico()
    {
        return $this->diagnostico;
    }

    /**
     * Get the [diagnostico_id] column value.
     *
     * @return string
     */
    public function getDiagnosticoId()
    {
        return $this->diagnostico_id;
    }

    /**
     * Get the [medico_name] column value.
     *
     * @return string
     */
    public function getMedicoName()
    {
        return $this->medico_name;
    }

    /**
     * Get the [paciente_name] column value.
     *
     * @return string
     */
    public function getPacienteName()
    {
        return $this->paciente_name;
    }

    /**
     * Get the [paciente_id] column value.
     *
     * @return int
     */
    public function getPacienteId()
    {
        return $this->paciente_id;
    }

    /**
     * Get the [edad] column value.
     *
     * @return string
     */
    public function getEdad()
    {
        return $this->edad;
    }

    /**
     * Get the [genero] column value.
     *
     * @return string
     */
    public function getGenero()
    {
        return $this->genero;
    }

    /**
     * Get the [genero_id] column value.
     *
     * @return int
     */
    public function getGeneroId()
    {
        return $this->genero_id;
    }

    /**
     * Get the [registro] column value.
     *
     * @return string
     */
    public function getRegistro()
    {
        return $this->registro;
    }

    /**
     * Get the [servicio] column value.
     *
     * @return int
     */
    public function getServicio()
    {
        return $this->servicio;
    }

    /**
     * Get the [anestesia_id] column value.
     *
     * @return int
     */
    public function getAnestesiaId()
    {
        return $this->anestesia_id;
    }

    /**
     * Get the [anestesia_empleada] column value.
     *
     * @return string
     */
    public function getAnestesiaEmpleada()
    {
        return $this->anestesia_empleada;
    }

    /**
     * Get the [ev_adversos_anestesia] column value.
     *
     * @return string
     */
    public function getEvAdversosAnestesia()
    {
        return $this->ev_adversos_anestesia;
    }

    /**
     * Get the [observaciones] column value.
     *
     * @return string
     */
    public function getObservaciones()
    {
        return $this->observaciones;
    }

    /**
     * Get the [requerimiento] column value.
     *
     * @return string
     */
    public function getRequerimiento()
    {
        return $this->requerimiento;
    }

    /**
     * Get the [req_insumos] column value.
     *
     * @return string
     */
    public function getReqInsumos()
    {
        return $this->req_insumos;
    }

    /**
     * Get the [req_hemoderiv] column value.
     *
     * @return string
     */
    public function getReqHemoderiv()
    {
        return $this->req_hemoderiv;
    }

    /**
     * Get the [req_laboratorio] column value.
     *
     * @return string
     */
    public function getReqLaboratorio()
    {
        return $this->req_laboratorio;
    }

    /**
     * Get the [req_anestesico] column value.
     *
     * @return string
     */
    public function getReqAnestesico()
    {
        return $this->req_anestesico;
    }

    /**
     * Get the [status] column value.
     *
     * @return int
     */
    public function getStatus()
    {
        return $this->status;
    }

    /**
     * Get the [causa_diferido_id] column value.
     *
     * @return int
     */
    public function getCausaDiferidoId()
    {
        return $this->causa_diferido_id;
    }

    /**
     * Get the [solicitado] column value.
     *
     * @return boolean
     */
    public function getSolicitado()
    {
        return $this->solicitado;
    }

    /**
     * Get the [riesgoqx_id] column value.
     *
     * @return int
     */
    public function getRiesgoqxId()
    {
        return $this->riesgoqx_id;
    }

    /**
     * Get the [contaminacionqx_id] column value.
     *
     * @return int
     */
    public function getContaminacionqxId()
    {
        return $this->contaminacionqx_id;
    }

    /**
     * Get the [eventoqx_id] column value.
     *
     * @return int
     */
    public function getEventoqxId()
    {
        return $this->eventoqx_id;
    }

    /**
     * Get the [complicaciones] column value.
     *
     * @return string
     */
    public function getComplicaciones()
    {
        return $this->complicaciones;
    }

    /**
     * Get the [val_pre_anestesica] column value.
     *
     * @return string
     */
    public function getValPreAnestesica()
    {
        return $this->val_pre_anestesica;
    }

    /**
     * Get the [reintervencion] column value.
     *
     * @return boolean
     */
    public function getReintervencion()
    {
        return $this->reintervencion;
    }

    /**
     * Get the [permisos] column value.
     *
     * @return
     */
    public function getPermisos()
    {
        if (null == $this->permisos_unserialized && null !== $this->permisos) {
            $this->permisos_unserialized = unserialize($this->permisos);
        }

        return $this->permisos_unserialized;
    }

    /**
     * Get the [tipo_proc_id] column value.
     *
     * @return int
     */
    public function getTipoProcId()
    {
        return $this->tipo_proc_id;
    }

    /**
     * Get the [atencion_id] column value.
     *
     * @return int
     */
    public function getAtencionId()
    {
        return $this->atencion_id;
    }

    /**
     * Get the [tiempo_fuera] column value.
     *
     * @return boolean
     */
    public function getTiempoFuera()
    {
        return $this->tiempo_fuera;
    }

    /**
     * Get the [procedencia] column value.
     *
     * @return string
     */
    public function getProcedencia()
    {
        return $this->procedencia;
    }

    /**
     * Get the [clasificacionqx] column value.
     *
     * @return int
     */
    public function getClasificacionqx()
    {
        return $this->clasificacionqx;
    }

    /**
     * Get the [region_px] column value.
     *
     * @return int
     */
    public function getRegionPx()
    {
        return $this->region_px;
    }

    /**
     * Get the [extension_px] column value.
     *
     * @return int
     */
    public function getExtensionPx()
    {
        return $this->extension_px;
    }

    /**
     * Get the [anexo_detalle] column value.
     *
     * @return int
     */
    public function getAnexoDetalle()
    {
        return $this->anexo_detalle;
    }

    /**
     * Get the [destino_px] column value.
     *
     * @return int
     */
    public function getDestinoPx()
    {
        return $this->destino_px;
    }

    /**
     * Get the [optionally formatted] temporal [liberacion_sala] column value.
     *
     *
     * @param string $format The date/time format string (either date()-style or strftime()-style).
     *				 If format is null, then the raw DateTime object will be returned.
     * @return mixed Formatted date/time value as string or DateTime object (if format is null), null if column is null
     * @throws PropelException - if unable to parse/validate the date/time value.
     */
    public function getLiberacionSala($format = 'H:i:s')
    {
        if ($this->liberacion_sala === null) {
            return null;
        }


        try {
            $dt = new DateTime($this->liberacion_sala);
        } catch (Exception $x) {
            throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->liberacion_sala, true), $x);
        }

        if ($format === null) {
            // Because propel.useDateTimeClass is true, we return a DateTime object.
            return $dt;
        } elseif (strpos($format, '%') !== false) {
            return strftime($format, $dt->format('U'));
        } else {
            return $dt->format($format);
        }
    }

    /**
     * Get the [optionally formatted] temporal [tiempo_est] column value.
     *
     *
     * @param string $format The date/time format string (either date()-style or strftime()-style).
     *				 If format is null, then the raw DateTime object will be returned.
     * @return mixed Formatted date/time value as string or DateTime object (if format is null), null if column is null
     * @throws PropelException - if unable to parse/validate the date/time value.
     */
    public function getTiempoEst($format = 'H:i:s')
    {
        if ($this->tiempo_est === null) {
            return null;
        }


        try {
            $dt = new DateTime($this->tiempo_est);
        } catch (Exception $x) {
            throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->tiempo_est, true), $x);
        }

        if ($format === null) {
            // Because propel.useDateTimeClass is true, we return a DateTime object.
            return $dt;
        } elseif (strpos($format, '%') !== false) {
            return strftime($format, $dt->format('U'));
        } else {
            return $dt->format($format);
        }
    }

    /**
     * Get the [riesgo_qx_pre] column value.
     *
     * @return string
     */
    public function getRiesgoQxPre()
    {
        return $this->riesgo_qx_pre;
    }

    /**
     * Get the [show_in_index] column value.
     *
     * @return boolean
     */
    public function getShowInIndex()
    {
        return $this->show_in_index;
    }

    /**
     * Get the [protocolo] column value.
     *
     * @return boolean
     */
    public function getProtocolo()
    {
        return $this->protocolo;
    }

    /**
     * Get the [cancelada] column value.
     *
     * @return boolean
     */
    public function getCancelada()
    {
        return $this->cancelada;
    }

    /**
     * Get the [optionally formatted] temporal [created_at] column value.
     *
     *
     * @param string $format The date/time format string (either date()-style or strftime()-style).
     *				 If format is null, then the raw DateTime object will be returned.
     * @return mixed Formatted date/time value as string or DateTime object (if format is null), null if column is null, and 0 if column value is 0000-00-00 00:00:00
     * @throws PropelException - if unable to parse/validate the date/time value.
     */
    public function getCreatedAt($format = 'Y-m-d H:i:s')
    {
        if ($this->created_at === null) {
            return null;
        }

        if ($this->created_at === '0000-00-00 00:00:00') {
            // while technically this is not a default value of null,
            // this seems to be closest in meaning.
            return null;
        } else {
            try {
                $dt = new DateTime($this->created_at);
            } catch (Exception $x) {
                throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
            }
        }

        if ($format === null) {
            // Because propel.useDateTimeClass is true, we return a DateTime object.
            return $dt;
        } elseif (strpos($format, '%') !== false) {
            return strftime($format, $dt->format('U'));
        } else {
            return $dt->format($format);
        }
    }

    /**
     * Get the [optionally formatted] temporal [updated_at] column value.
     *
     *
     * @param string $format The date/time format string (either date()-style or strftime()-style).
     *				 If format is null, then the raw DateTime object will be returned.
     * @return mixed Formatted date/time value as string or DateTime object (if format is null), null if column is null, and 0 if column value is 0000-00-00 00:00:00
     * @throws PropelException - if unable to parse/validate the date/time value.
     */
    public function getUpdatedAt($format = 'Y-m-d H:i:s')
    {
        if ($this->updated_at === null) {
            return null;
        }

        if ($this->updated_at === '0000-00-00 00:00:00') {
            // while technically this is not a default value of null,
            // this seems to be closest in meaning.
            return null;
        } else {
            try {
                $dt = new DateTime($this->updated_at);
            } catch (Exception $x) {
                throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->updated_at, true), $x);
            }
        }

        if ($format === null) {
            // Because propel.useDateTimeClass is true, we return a DateTime object.
            return $dt;
        } elseif (strpos($format, '%') !== false) {
            return strftime($format, $dt->format('U'));
        } else {
            return $dt->format($format);
        }
    }

    /**
     * Set the value of [id] column.
     *
     * @param int $v new value
     * @return Agenda The current object (for fluent API support)
     */
    public function setId($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->id !== $v) {
            $this->id = $v;
            $this->modifiedColumns[] = AgendaPeer::ID;
        }


        return $this;
    } // setId()

    /**
     * Sets the value of [programacion] column to a normalized version of the date/time value specified.
     *
     * @param mixed $v string, integer (timestamp), or DateTime value.
     *               Empty strings are treated as null.
     * @return Agenda The current object (for fluent API support)
     */
    public function setProgramacion($v)
    {
        $dt = PropelDateTime::newInstance($v, null, 'DateTime');
        if ($this->programacion !== null || $dt !== null) {
            $currentDateAsString = ($this->programacion !== null && $tmpDt = new DateTime($this->programacion)) ? $tmpDt->format('Y-m-d') : null;
            $newDateAsString = $dt ? $dt->format('Y-m-d') : null;
            if ($currentDateAsString !== $newDateAsString) {
                $this->programacion = $newDateAsString;
                $this->modifiedColumns[] = AgendaPeer::PROGRAMACION;
            }
        } // if either are not null


        return $this;
    } // setProgramacion()

    /**
     * Sets the value of [fechaestado] column to a normalized version of the date/time value specified.
     *
     * @param mixed $v string, integer (timestamp), or DateTime value.
     *               Empty strings are treated as null.
     * @return Agenda The current object (for fluent API support)
     */
    public function setFechaestado($v)
    {
        $dt = PropelDateTime::newInstance($v, null, 'DateTime');
        if ($this->fechaestado !== null || $dt !== null) {
            $currentDateAsString = ($this->fechaestado !== null && $tmpDt = new DateTime($this->fechaestado)) ? $tmpDt->format('Y-m-d') : null;
            $newDateAsString = $dt ? $dt->format('Y-m-d') : null;
            if ($currentDateAsString !== $newDateAsString) {
                $this->fechaestado = $newDateAsString;
                $this->modifiedColumns[] = AgendaPeer::FECHAESTADO;
            }
        } // if either are not null


        return $this;
    } // setFechaestado()

    /**
     * Sets the value of [hora] column to a normalized version of the date/time value specified.
     *
     * @param mixed $v string, integer (timestamp), or DateTime value.
     *               Empty strings are treated as null.
     * @return Agenda The current object (for fluent API support)
     */
    public function setHora($v)
    {
        $dt = PropelDateTime::newInstance($v, null, 'DateTime');
        if ($this->hora !== null || $dt !== null) {
            $currentDateAsString = ($this->hora !== null && $tmpDt = new DateTime($this->hora)) ? $tmpDt->format('H:i:s') : null;
            $newDateAsString = $dt ? $dt->format('H:i:s') : null;
            if ($currentDateAsString !== $newDateAsString) {
                $this->hora = $newDateAsString;
                $this->modifiedColumns[] = AgendaPeer::HORA;
            }
        } // if either are not null


        return $this;
    } // setHora()

    /**
     * Sets the value of [horaestado] column to a normalized version of the date/time value specified.
     *
     * @param mixed $v string, integer (timestamp), or DateTime value.
     *               Empty strings are treated as null.
     * @return Agenda The current object (for fluent API support)
     */
    public function setHoraestado($v)
    {
        $dt = PropelDateTime::newInstance($v, null, 'DateTime');
        if ($this->horaestado !== null || $dt !== null) {
            $currentDateAsString = ($this->horaestado !== null && $tmpDt = new DateTime($this->horaestado)) ? $tmpDt->format('H:i:s') : null;
            $newDateAsString = $dt ? $dt->format('H:i:s') : null;
            if ($currentDateAsString !== $newDateAsString) {
                $this->horaestado = $newDateAsString;
                $this->modifiedColumns[] = AgendaPeer::HORAESTADO;
            }
        } // if either are not null


        return $this;
    } // setHoraestado()

    /**
     * Sets the value of [inicio] column to a normalized version of the date/time value specified.
     *
     * @param mixed $v string, integer (timestamp), or DateTime value.
     *               Empty strings are treated as null.
     * @return Agenda The current object (for fluent API support)
     */
    public function setInicio($v)
    {
        $dt = PropelDateTime::newInstance($v, null, 'DateTime');
        if ($this->inicio !== null || $dt !== null) {
            $currentDateAsString = ($this->inicio !== null && $tmpDt = new DateTime($this->inicio)) ? $tmpDt->format('Y-m-d H:i:s') : null;
            $newDateAsString = $dt ? $dt->format('Y-m-d H:i:s') : null;
            if ($currentDateAsString !== $newDateAsString) {
                $this->inicio = $newDateAsString;
                $this->modifiedColumns[] = AgendaPeer::INICIO;
            }
        } // if either are not null


        return $this;
    } // setInicio()

    /**
     * Sets the value of [last_time] column to a normalized version of the date/time value specified.
     *
     * @param mixed $v string, integer (timestamp), or DateTime value.
     *               Empty strings are treated as null.
     * @return Agenda The current object (for fluent API support)
     */
    public function setLastTime($v)
    {
        $dt = PropelDateTime::newInstance($v, null, 'DateTime');
        if ($this->last_time !== null || $dt !== null) {
            $currentDateAsString = ($this->last_time !== null && $tmpDt = new DateTime($this->last_time)) ? $tmpDt->format('Y-m-d H:i:s') : null;
            $newDateAsString = $dt ? $dt->format('Y-m-d H:i:s') : null;
            if ($currentDateAsString !== $newDateAsString) {
                $this->last_time = $newDateAsString;
                $this->modifiedColumns[] = AgendaPeer::LAST_TIME;
            }
        } // if either are not null


        return $this;
    } // setLastTime()

    /**
     * Sets the value of [ingreso] column to a normalized version of the date/time value specified.
     *
     * @param mixed $v string, integer (timestamp), or DateTime value.
     *               Empty strings are treated as null.
     * @return Agenda The current object (for fluent API support)
     */
    public function setIngreso($v)
    {
        $dt = PropelDateTime::newInstance($v, null, 'DateTime');
        if ($this->ingreso !== null || $dt !== null) {
            $currentDateAsString = ($this->ingreso !== null && $tmpDt = new DateTime($this->ingreso)) ? $tmpDt->format('Y-m-d H:i:s') : null;
            $newDateAsString = $dt ? $dt->format('Y-m-d H:i:s') : null;
            if ($currentDateAsString !== $newDateAsString) {
                $this->ingreso = $newDateAsString;
                $this->modifiedColumns[] = AgendaPeer::INGRESO;
            }
        } // if either are not null


        return $this;
    } // setIngreso()

    /**
     * Set the value of [sala_id] column.
     *
     * @param int $v new value
     * @return Agenda The current object (for fluent API support)
     */
    public function setSalaId($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->sala_id !== $v) {
            $this->sala_id = $v;
            $this->modifiedColumns[] = AgendaPeer::SALA_ID;
        }

        if ($this->aSalaquirurgica !== null && $this->aSalaquirurgica->getId() !== $v) {
            $this->aSalaquirurgica = null;
        }


        return $this;
    } // setSalaId()

    /**
     * Set the value of [quirofano_id] column.
     *
     * @param int $v new value
     * @return Agenda The current object (for fluent API support)
     */
    public function setQuirofanoId($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->quirofano_id !== $v) {
            $this->quirofano_id = $v;
            $this->modifiedColumns[] = AgendaPeer::QUIROFANO_ID;
        }

        if ($this->aQuirofano !== null && $this->aQuirofano->getId() !== $v) {
            $this->aQuirofano = null;
        }


        return $this;
    } // setQuirofanoId()

    /**
     * Sets the value of [egreso] column to a normalized version of the date/time value specified.
     *
     * @param mixed $v string, integer (timestamp), or DateTime value.
     *               Empty strings are treated as null.
     * @return Agenda The current object (for fluent API support)
     */
    public function setEgreso($v)
    {
        $dt = PropelDateTime::newInstance($v, null, 'DateTime');
        if ($this->egreso !== null || $dt !== null) {
            $currentDateAsString = ($this->egreso !== null && $tmpDt = new DateTime($this->egreso)) ? $tmpDt->format('Y-m-d H:i:s') : null;
            $newDateAsString = $dt ? $dt->format('Y-m-d H:i:s') : null;
            if ($currentDateAsString !== $newDateAsString) {
                $this->egreso = $newDateAsString;
                $this->modifiedColumns[] = AgendaPeer::EGRESO;
            }
        } // if either are not null


        return $this;
    } // setEgreso()

    /**
     * Set the value of [cie9mc] column.
     *
     * @param string $v new value
     * @return Agenda The current object (for fluent API support)
     */
    public function setCie9mc($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->cie9mc !== $v) {
            $this->cie9mc = $v;
            $this->modifiedColumns[] = AgendaPeer::CIE9MC;
        }


        return $this;
    } // setCie9mc()

    /**
     * Set the value of [cie9mc_id] column.
     *
     * @param string $v new value
     * @return Agenda The current object (for fluent API support)
     */
    public function setCie9mcId($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->cie9mc_id !== $v) {
            $this->cie9mc_id = $v;
            $this->modifiedColumns[] = AgendaPeer::CIE9MC_ID;
        }


        return $this;
    } // setCie9mcId()

    /**
     * Set the value of [cx_realizada] column.
     *
     * @param string $v new value
     * @return Agenda The current object (for fluent API support)
     */
    public function setCxRealizada($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->cx_realizada !== $v) {
            $this->cx_realizada = $v;
            $this->modifiedColumns[] = AgendaPeer::CX_REALIZADA;
        }


        return $this;
    } // setCxRealizada()

    /**
     * Set the value of [cx_realizada_id] column.
     *
     * @param string $v new value
     * @return Agenda The current object (for fluent API support)
     */
    public function setCxRealizadaId($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->cx_realizada_id !== $v) {
            $this->cx_realizada_id = $v;
            $this->modifiedColumns[] = AgendaPeer::CX_REALIZADA_ID;
        }


        return $this;
    } // setCxRealizadaId()

    /**
     * Set the value of [tipo_cx] column.
     *
     * @param int $v new value
     * @return Agenda The current object (for fluent API support)
     */
    public function setTipoCx($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->tipo_cx !== $v) {
            $this->tipo_cx = $v;
            $this->modifiedColumns[] = AgendaPeer::TIPO_CX;
        }


        return $this;
    } // setTipoCx()

    /**
     * Set the value of [diagnostico] column.
     *
     * @param string $v new value
     * @return Agenda The current object (for fluent API support)
     */
    public function setDiagnostico($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->diagnostico !== $v) {
            $this->diagnostico = $v;
            $this->modifiedColumns[] = AgendaPeer::DIAGNOSTICO;
        }


        return $this;
    } // setDiagnostico()

    /**
     * Set the value of [diagnostico_id] column.
     *
     * @param string $v new value
     * @return Agenda The current object (for fluent API support)
     */
    public function setDiagnosticoId($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->diagnostico_id !== $v) {
            $this->diagnostico_id = $v;
            $this->modifiedColumns[] = AgendaPeer::DIAGNOSTICO_ID;
        }


        return $this;
    } // setDiagnosticoId()

    /**
     * Set the value of [medico_name] column.
     *
     * @param string $v new value
     * @return Agenda The current object (for fluent API support)
     */
    public function setMedicoName($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->medico_name !== $v) {
            $this->medico_name = $v;
            $this->modifiedColumns[] = AgendaPeer::MEDICO_NAME;
        }


        return $this;
    } // setMedicoName()

    /**
     * Set the value of [paciente_name] column.
     *
     * @param string $v new value
     * @return Agenda The current object (for fluent API support)
     */
    public function setPacienteName($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->paciente_name !== $v) {
            $this->paciente_name = $v;
            $this->modifiedColumns[] = AgendaPeer::PACIENTE_NAME;
        }


        return $this;
    } // setPacienteName()

    /**
     * Set the value of [paciente_id] column.
     *
     * @param int $v new value
     * @return Agenda The current object (for fluent API support)
     */
    public function setPacienteId($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->paciente_id !== $v) {
            $this->paciente_id = $v;
            $this->modifiedColumns[] = AgendaPeer::PACIENTE_ID;
        }


        return $this;
    } // setPacienteId()

    /**
     * Set the value of [edad] column.
     *
     * @param string $v new value
     * @return Agenda The current object (for fluent API support)
     */
    public function setEdad($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->edad !== $v) {
            $this->edad = $v;
            $this->modifiedColumns[] = AgendaPeer::EDAD;
        }


        return $this;
    } // setEdad()

    /**
     * Set the value of [genero] column.
     *
     * @param string $v new value
     * @return Agenda The current object (for fluent API support)
     */
    public function setGenero($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->genero !== $v) {
            $this->genero = $v;
            $this->modifiedColumns[] = AgendaPeer::GENERO;
        }


        return $this;
    } // setGenero()

    /**
     * Set the value of [genero_id] column.
     *
     * @param int $v new value
     * @return Agenda The current object (for fluent API support)
     */
    public function setGeneroId($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->genero_id !== $v) {
            $this->genero_id = $v;
            $this->modifiedColumns[] = AgendaPeer::GENERO_ID;
        }


        return $this;
    } // setGeneroId()

    /**
     * Set the value of [registro] column.
     *
     * @param string $v new value
     * @return Agenda The current object (for fluent API support)
     */
    public function setRegistro($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->registro !== $v) {
            $this->registro = $v;
            $this->modifiedColumns[] = AgendaPeer::REGISTRO;
        }


        return $this;
    } // setRegistro()

    /**
     * Set the value of [servicio] column.
     *
     * @param int $v new value
     * @return Agenda The current object (for fluent API support)
     */
    public function setServicio($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->servicio !== $v) {
            $this->servicio = $v;
            $this->modifiedColumns[] = AgendaPeer::SERVICIO;
        }

        if ($this->aEspecialidad !== null && $this->aEspecialidad->getId() !== $v) {
            $this->aEspecialidad = null;
        }


        return $this;
    } // setServicio()

    /**
     * Set the value of [anestesia_id] column.
     *
     * @param int $v new value
     * @return Agenda The current object (for fluent API support)
     */
    public function setAnestesiaId($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->anestesia_id !== $v) {
            $this->anestesia_id = $v;
            $this->modifiedColumns[] = AgendaPeer::ANESTESIA_ID;
        }


        return $this;
    } // setAnestesiaId()

    /**
     * Set the value of [anestesia_empleada] column.
     *
     * @param string $v new value
     * @return Agenda The current object (for fluent API support)
     */
    public function setAnestesiaEmpleada($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->anestesia_empleada !== $v) {
            $this->anestesia_empleada = $v;
            $this->modifiedColumns[] = AgendaPeer::ANESTESIA_EMPLEADA;
        }


        return $this;
    } // setAnestesiaEmpleada()

    /**
     * Set the value of [ev_adversos_anestesia] column.
     *
     * @param string $v new value
     * @return Agenda The current object (for fluent API support)
     */
    public function setEvAdversosAnestesia($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->ev_adversos_anestesia !== $v) {
            $this->ev_adversos_anestesia = $v;
            $this->modifiedColumns[] = AgendaPeer::EV_ADVERSOS_ANESTESIA;
        }


        return $this;
    } // setEvAdversosAnestesia()

    /**
     * Set the value of [observaciones] column.
     *
     * @param string $v new value
     * @return Agenda The current object (for fluent API support)
     */
    public function setObservaciones($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->observaciones !== $v) {
            $this->observaciones = $v;
            $this->modifiedColumns[] = AgendaPeer::OBSERVACIONES;
        }


        return $this;
    } // setObservaciones()

    /**
     * Set the value of [requerimiento] column.
     *
     * @param string $v new value
     * @return Agenda The current object (for fluent API support)
     */
    public function setRequerimiento($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->requerimiento !== $v) {
            $this->requerimiento = $v;
            $this->modifiedColumns[] = AgendaPeer::REQUERIMIENTO;
        }


        return $this;
    } // setRequerimiento()

    /**
     * Set the value of [req_insumos] column.
     *
     * @param string $v new value
     * @return Agenda The current object (for fluent API support)
     */
    public function setReqInsumos($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->req_insumos !== $v) {
            $this->req_insumos = $v;
            $this->modifiedColumns[] = AgendaPeer::REQ_INSUMOS;
        }


        return $this;
    } // setReqInsumos()

    /**
     * Set the value of [req_hemoderiv] column.
     *
     * @param string $v new value
     * @return Agenda The current object (for fluent API support)
     */
    public function setReqHemoderiv($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->req_hemoderiv !== $v) {
            $this->req_hemoderiv = $v;
            $this->modifiedColumns[] = AgendaPeer::REQ_HEMODERIV;
        }


        return $this;
    } // setReqHemoderiv()

    /**
     * Set the value of [req_laboratorio] column.
     *
     * @param string $v new value
     * @return Agenda The current object (for fluent API support)
     */
    public function setReqLaboratorio($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->req_laboratorio !== $v) {
            $this->req_laboratorio = $v;
            $this->modifiedColumns[] = AgendaPeer::REQ_LABORATORIO;
        }


        return $this;
    } // setReqLaboratorio()

    /**
     * Set the value of [req_anestesico] column.
     *
     * @param string $v new value
     * @return Agenda The current object (for fluent API support)
     */
    public function setReqAnestesico($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->req_anestesico !== $v) {
            $this->req_anestesico = $v;
            $this->modifiedColumns[] = AgendaPeer::REQ_ANESTESICO;
        }


        return $this;
    } // setReqAnestesico()

    /**
     * Set the value of [status] column.
     *
     * @param int $v new value
     * @return Agenda The current object (for fluent API support)
     */
    public function setStatus($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->status !== $v) {
            $this->status = $v;
            $this->modifiedColumns[] = AgendaPeer::STATUS;
        }


        return $this;
    } // setStatus()

    /**
     * Set the value of [causa_diferido_id] column.
     *
     * @param int $v new value
     * @return Agenda The current object (for fluent API support)
     */
    public function setCausaDiferidoId($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->causa_diferido_id !== $v) {
            $this->causa_diferido_id = $v;
            $this->modifiedColumns[] = AgendaPeer::CAUSA_DIFERIDO_ID;
        }

        if ($this->aCausadiferido !== null && $this->aCausadiferido->getId() !== $v) {
            $this->aCausadiferido = null;
        }


        return $this;
    } // setCausaDiferidoId()

    /**
     * Sets the value of the [solicitado] column.
     * Non-boolean arguments are converted using the following rules:
     *   * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *   * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     * Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     *
     * @param boolean|integer|string $v The new value
     * @return Agenda The current object (for fluent API support)
     */
    public function setSolicitado($v)
    {
        if ($v !== null) {
            if (is_string($v)) {
                $v = in_array(strtolower($v), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
            } else {
                $v = (boolean) $v;
            }
        }

        if ($this->solicitado !== $v) {
            $this->solicitado = $v;
            $this->modifiedColumns[] = AgendaPeer::SOLICITADO;
        }


        return $this;
    } // setSolicitado()

    /**
     * Set the value of [riesgoqx_id] column.
     *
     * @param int $v new value
     * @return Agenda The current object (for fluent API support)
     */
    public function setRiesgoqxId($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->riesgoqx_id !== $v) {
            $this->riesgoqx_id = $v;
            $this->modifiedColumns[] = AgendaPeer::RIESGOQX_ID;
        }

        if ($this->aRiesgoqx !== null && $this->aRiesgoqx->getId() !== $v) {
            $this->aRiesgoqx = null;
        }


        return $this;
    } // setRiesgoqxId()

    /**
     * Set the value of [contaminacionqx_id] column.
     *
     * @param int $v new value
     * @return Agenda The current object (for fluent API support)
     */
    public function setContaminacionqxId($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->contaminacionqx_id !== $v) {
            $this->contaminacionqx_id = $v;
            $this->modifiedColumns[] = AgendaPeer::CONTAMINACIONQX_ID;
        }

        if ($this->aContaminacionqx !== null && $this->aContaminacionqx->getId() !== $v) {
            $this->aContaminacionqx = null;
        }


        return $this;
    } // setContaminacionqxId()

    /**
     * Set the value of [eventoqx_id] column.
     *
     * @param int $v new value
     * @return Agenda The current object (for fluent API support)
     */
    public function setEventoqxId($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->eventoqx_id !== $v) {
            $this->eventoqx_id = $v;
            $this->modifiedColumns[] = AgendaPeer::EVENTOQX_ID;
        }

        if ($this->aEventoqx !== null && $this->aEventoqx->getId() !== $v) {
            $this->aEventoqx = null;
        }


        return $this;
    } // setEventoqxId()

    /**
     * Set the value of [complicaciones] column.
     *
     * @param string $v new value
     * @return Agenda The current object (for fluent API support)
     */
    public function setComplicaciones($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->complicaciones !== $v) {
            $this->complicaciones = $v;
            $this->modifiedColumns[] = AgendaPeer::COMPLICACIONES;
        }


        return $this;
    } // setComplicaciones()

    /**
     * Set the value of [val_pre_anestesica] column.
     *
     * @param string $v new value
     * @return Agenda The current object (for fluent API support)
     */
    public function setValPreAnestesica($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->val_pre_anestesica !== $v) {
            $this->val_pre_anestesica = $v;
            $this->modifiedColumns[] = AgendaPeer::VAL_PRE_ANESTESICA;
        }


        return $this;
    } // setValPreAnestesica()

    /**
     * Sets the value of the [reintervencion] column.
     * Non-boolean arguments are converted using the following rules:
     *   * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *   * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     * Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     *
     * @param boolean|integer|string $v The new value
     * @return Agenda The current object (for fluent API support)
     */
    public function setReintervencion($v)
    {
        if ($v !== null) {
            if (is_string($v)) {
                $v = in_array(strtolower($v), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
            } else {
                $v = (boolean) $v;
            }
        }

        if ($this->reintervencion !== $v) {
            $this->reintervencion = $v;
            $this->modifiedColumns[] = AgendaPeer::REINTERVENCION;
        }


        return $this;
    } // setReintervencion()

    /**
     * Set the value of [permisos] column.
     *
     * @param  $v new value
     * @return Agenda The current object (for fluent API support)
     */
    public function setPermisos($v)
    {
        if ($this->permisos_unserialized !== $v) {
            $this->permisos_unserialized = $v;
            $this->permisos = serialize($v);
            $this->modifiedColumns[] = AgendaPeer::PERMISOS;
        }


        return $this;
    } // setPermisos()

    /**
     * Set the value of [tipo_proc_id] column.
     *
     * @param int $v new value
     * @return Agenda The current object (for fluent API support)
     */
    public function setTipoProcId($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->tipo_proc_id !== $v) {
            $this->tipo_proc_id = $v;
            $this->modifiedColumns[] = AgendaPeer::TIPO_PROC_ID;
        }

        if ($this->aProcedimiento !== null && $this->aProcedimiento->getId() !== $v) {
            $this->aProcedimiento = null;
        }


        return $this;
    } // setTipoProcId()

    /**
     * Set the value of [atencion_id] column.
     *
     * @param int $v new value
     * @return Agenda The current object (for fluent API support)
     */
    public function setAtencionId($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->atencion_id !== $v) {
            $this->atencion_id = $v;
            $this->modifiedColumns[] = AgendaPeer::ATENCION_ID;
        }

        if ($this->aAtencion !== null && $this->aAtencion->getId() !== $v) {
            $this->aAtencion = null;
        }


        return $this;
    } // setAtencionId()

    /**
     * Sets the value of the [tiempo_fuera] column.
     * Non-boolean arguments are converted using the following rules:
     *   * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *   * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     * Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     *
     * @param boolean|integer|string $v The new value
     * @return Agenda The current object (for fluent API support)
     */
    public function setTiempoFuera($v)
    {
        if ($v !== null) {
            if (is_string($v)) {
                $v = in_array(strtolower($v), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
            } else {
                $v = (boolean) $v;
            }
        }

        if ($this->tiempo_fuera !== $v) {
            $this->tiempo_fuera = $v;
            $this->modifiedColumns[] = AgendaPeer::TIEMPO_FUERA;
        }


        return $this;
    } // setTiempoFuera()

    /**
     * Set the value of [procedencia] column.
     *
     * @param string $v new value
     * @return Agenda The current object (for fluent API support)
     */
    public function setProcedencia($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->procedencia !== $v) {
            $this->procedencia = $v;
            $this->modifiedColumns[] = AgendaPeer::PROCEDENCIA;
        }


        return $this;
    } // setProcedencia()

    /**
     * Set the value of [clasificacionqx] column.
     *
     * @param int $v new value
     * @return Agenda The current object (for fluent API support)
     */
    public function setClasificacionqx($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->clasificacionqx !== $v) {
            $this->clasificacionqx = $v;
            $this->modifiedColumns[] = AgendaPeer::CLASIFICACIONQX;
        }


        return $this;
    } // setClasificacionqx()

    /**
     * Set the value of [region_px] column.
     *
     * @param int $v new value
     * @return Agenda The current object (for fluent API support)
     */
    public function setRegionPx($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->region_px !== $v) {
            $this->region_px = $v;
            $this->modifiedColumns[] = AgendaPeer::REGION_PX;
        }


        return $this;
    } // setRegionPx()

    /**
     * Set the value of [extension_px] column.
     *
     * @param int $v new value
     * @return Agenda The current object (for fluent API support)
     */
    public function setExtensionPx($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->extension_px !== $v) {
            $this->extension_px = $v;
            $this->modifiedColumns[] = AgendaPeer::EXTENSION_PX;
        }


        return $this;
    } // setExtensionPx()

    /**
     * Set the value of [anexo_detalle] column.
     *
     * @param int $v new value
     * @return Agenda The current object (for fluent API support)
     */
    public function setAnexoDetalle($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->anexo_detalle !== $v) {
            $this->anexo_detalle = $v;
            $this->modifiedColumns[] = AgendaPeer::ANEXO_DETALLE;
        }


        return $this;
    } // setAnexoDetalle()

    /**
     * Set the value of [destino_px] column.
     *
     * @param int $v new value
     * @return Agenda The current object (for fluent API support)
     */
    public function setDestinoPx($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->destino_px !== $v) {
            $this->destino_px = $v;
            $this->modifiedColumns[] = AgendaPeer::DESTINO_PX;
        }


        return $this;
    } // setDestinoPx()

    /**
     * Sets the value of [liberacion_sala] column to a normalized version of the date/time value specified.
     *
     * @param mixed $v string, integer (timestamp), or DateTime value.
     *               Empty strings are treated as null.
     * @return Agenda The current object (for fluent API support)
     */
    public function setLiberacionSala($v)
    {
        $dt = PropelDateTime::newInstance($v, null, 'DateTime');
        if ($this->liberacion_sala !== null || $dt !== null) {
            $currentDateAsString = ($this->liberacion_sala !== null && $tmpDt = new DateTime($this->liberacion_sala)) ? $tmpDt->format('H:i:s') : null;
            $newDateAsString = $dt ? $dt->format('H:i:s') : null;
            if ($currentDateAsString !== $newDateAsString) {
                $this->liberacion_sala = $newDateAsString;
                $this->modifiedColumns[] = AgendaPeer::LIBERACION_SALA;
            }
        } // if either are not null


        return $this;
    } // setLiberacionSala()

    /**
     * Sets the value of [tiempo_est] column to a normalized version of the date/time value specified.
     *
     * @param mixed $v string, integer (timestamp), or DateTime value.
     *               Empty strings are treated as null.
     * @return Agenda The current object (for fluent API support)
     */
    public function setTiempoEst($v)
    {
        $dt = PropelDateTime::newInstance($v, null, 'DateTime');
        if ($this->tiempo_est !== null || $dt !== null) {
            $currentDateAsString = ($this->tiempo_est !== null && $tmpDt = new DateTime($this->tiempo_est)) ? $tmpDt->format('H:i:s') : null;
            $newDateAsString = $dt ? $dt->format('H:i:s') : null;
            if ($currentDateAsString !== $newDateAsString) {
                $this->tiempo_est = $newDateAsString;
                $this->modifiedColumns[] = AgendaPeer::TIEMPO_EST;
            }
        } // if either are not null


        return $this;
    } // setTiempoEst()

    /**
     * Set the value of [riesgo_qx_pre] column.
     *
     * @param string $v new value
     * @return Agenda The current object (for fluent API support)
     */
    public function setRiesgoQxPre($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->riesgo_qx_pre !== $v) {
            $this->riesgo_qx_pre = $v;
            $this->modifiedColumns[] = AgendaPeer::RIESGO_QX_PRE;
        }


        return $this;
    } // setRiesgoQxPre()

    /**
     * Sets the value of the [show_in_index] column.
     * Non-boolean arguments are converted using the following rules:
     *   * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *   * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     * Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     *
     * @param boolean|integer|string $v The new value
     * @return Agenda The current object (for fluent API support)
     */
    public function setShowInIndex($v)
    {
        if ($v !== null) {
            if (is_string($v)) {
                $v = in_array(strtolower($v), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
            } else {
                $v = (boolean) $v;
            }
        }

        if ($this->show_in_index !== $v) {
            $this->show_in_index = $v;
            $this->modifiedColumns[] = AgendaPeer::SHOW_IN_INDEX;
        }


        return $this;
    } // setShowInIndex()

    /**
     * Sets the value of the [protocolo] column.
     * Non-boolean arguments are converted using the following rules:
     *   * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *   * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     * Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     *
     * @param boolean|integer|string $v The new value
     * @return Agenda The current object (for fluent API support)
     */
    public function setProtocolo($v)
    {
        if ($v !== null) {
            if (is_string($v)) {
                $v = in_array(strtolower($v), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
            } else {
                $v = (boolean) $v;
            }
        }

        if ($this->protocolo !== $v) {
            $this->protocolo = $v;
            $this->modifiedColumns[] = AgendaPeer::PROTOCOLO;
        }


        return $this;
    } // setProtocolo()

    /**
     * Sets the value of the [cancelada] column.
     * Non-boolean arguments are converted using the following rules:
     *   * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *   * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     * Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     *
     * @param boolean|integer|string $v The new value
     * @return Agenda The current object (for fluent API support)
     */
    public function setCancelada($v)
    {
        if ($v !== null) {
            if (is_string($v)) {
                $v = in_array(strtolower($v), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
            } else {
                $v = (boolean) $v;
            }
        }

        if ($this->cancelada !== $v) {
            $this->cancelada = $v;
            $this->modifiedColumns[] = AgendaPeer::CANCELADA;
        }


        return $this;
    } // setCancelada()

    /**
     * Sets the value of [created_at] column to a normalized version of the date/time value specified.
     *
     * @param mixed $v string, integer (timestamp), or DateTime value.
     *               Empty strings are treated as null.
     * @return Agenda The current object (for fluent API support)
     */
    public function setCreatedAt($v)
    {
        $dt = PropelDateTime::newInstance($v, null, 'DateTime');
        if ($this->created_at !== null || $dt !== null) {
            $currentDateAsString = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
            $newDateAsString = $dt ? $dt->format('Y-m-d H:i:s') : null;
            if ($currentDateAsString !== $newDateAsString) {
                $this->created_at = $newDateAsString;
                $this->modifiedColumns[] = AgendaPeer::CREATED_AT;
            }
        } // if either are not null


        return $this;
    } // setCreatedAt()

    /**
     * Sets the value of [updated_at] column to a normalized version of the date/time value specified.
     *
     * @param mixed $v string, integer (timestamp), or DateTime value.
     *               Empty strings are treated as null.
     * @return Agenda The current object (for fluent API support)
     */
    public function setUpdatedAt($v)
    {
        $dt = PropelDateTime::newInstance($v, null, 'DateTime');
        if ($this->updated_at !== null || $dt !== null) {
            $currentDateAsString = ($this->updated_at !== null && $tmpDt = new DateTime($this->updated_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
            $newDateAsString = $dt ? $dt->format('Y-m-d H:i:s') : null;
            if ($currentDateAsString !== $newDateAsString) {
                $this->updated_at = $newDateAsString;
                $this->modifiedColumns[] = AgendaPeer::UPDATED_AT;
            }
        } // if either are not null


        return $this;
    } // setUpdatedAt()

    /**
     * Indicates whether the columns in this object are only set to default values.
     *
     * This method can be used in conjunction with isModified() to indicate whether an object is both
     * modified _and_ has some values set which are non-default.
     *
     * @return boolean Whether the columns in this object are only been set with default values.
     */
    public function hasOnlyDefaultValues()
    {
            if ($this->status !== 1) {
                return false;
            }

            if ($this->show_in_index !== true) {
                return false;
            }

            if ($this->protocolo !== false) {
                return false;
            }

            if ($this->cancelada !== false) {
                return false;
            }

        // otherwise, everything was equal, so return true
        return true;
    } // hasOnlyDefaultValues()

    /**
     * Hydrates (populates) the object variables with values from the database resultset.
     *
     * An offset (0-based "start column") is specified so that objects can be hydrated
     * with a subset of the columns in the resultset rows.  This is needed, for example,
     * for results of JOIN queries where the resultset row includes columns from two or
     * more tables.
     *
     * @param array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
     * @param int $startcol 0-based offset column which indicates which restultset column to start with.
     * @param boolean $rehydrate Whether this object is being re-hydrated from the database.
     * @return int             next starting column
     * @throws PropelException - Any caught Exception will be rewrapped as a PropelException.
     */
    public function hydrate($row, $startcol = 0, $rehydrate = false)
    {
        try {

            $this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
            $this->programacion = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
            $this->fechaestado = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
            $this->hora = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
            $this->horaestado = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
            $this->inicio = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
            $this->last_time = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
            $this->ingreso = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
            $this->sala_id = ($row[$startcol + 8] !== null) ? (int) $row[$startcol + 8] : null;
            $this->quirofano_id = ($row[$startcol + 9] !== null) ? (int) $row[$startcol + 9] : null;
            $this->egreso = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
            $this->cie9mc = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
            $this->cie9mc_id = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
            $this->cx_realizada = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
            $this->cx_realizada_id = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
            $this->tipo_cx = ($row[$startcol + 15] !== null) ? (int) $row[$startcol + 15] : null;
            $this->diagnostico = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
            $this->diagnostico_id = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
            $this->medico_name = ($row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
            $this->paciente_name = ($row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
            $this->paciente_id = ($row[$startcol + 20] !== null) ? (int) $row[$startcol + 20] : null;
            $this->edad = ($row[$startcol + 21] !== null) ? (string) $row[$startcol + 21] : null;
            $this->genero = ($row[$startcol + 22] !== null) ? (string) $row[$startcol + 22] : null;
            $this->genero_id = ($row[$startcol + 23] !== null) ? (int) $row[$startcol + 23] : null;
            $this->registro = ($row[$startcol + 24] !== null) ? (string) $row[$startcol + 24] : null;
            $this->servicio = ($row[$startcol + 25] !== null) ? (int) $row[$startcol + 25] : null;
            $this->anestesia_id = ($row[$startcol + 26] !== null) ? (int) $row[$startcol + 26] : null;
            $this->anestesia_empleada = ($row[$startcol + 27] !== null) ? (string) $row[$startcol + 27] : null;
            $this->ev_adversos_anestesia = ($row[$startcol + 28] !== null) ? (string) $row[$startcol + 28] : null;
            $this->observaciones = ($row[$startcol + 29] !== null) ? (string) $row[$startcol + 29] : null;
            $this->requerimiento = ($row[$startcol + 30] !== null) ? (string) $row[$startcol + 30] : null;
            $this->req_insumos = ($row[$startcol + 31] !== null) ? (string) $row[$startcol + 31] : null;
            $this->req_hemoderiv = ($row[$startcol + 32] !== null) ? (string) $row[$startcol + 32] : null;
            $this->req_laboratorio = ($row[$startcol + 33] !== null) ? (string) $row[$startcol + 33] : null;
            $this->req_anestesico = ($row[$startcol + 34] !== null) ? (string) $row[$startcol + 34] : null;
            $this->status = ($row[$startcol + 35] !== null) ? (int) $row[$startcol + 35] : null;
            $this->causa_diferido_id = ($row[$startcol + 36] !== null) ? (int) $row[$startcol + 36] : null;
            $this->solicitado = ($row[$startcol + 37] !== null) ? (boolean) $row[$startcol + 37] : null;
            $this->riesgoqx_id = ($row[$startcol + 38] !== null) ? (int) $row[$startcol + 38] : null;
            $this->contaminacionqx_id = ($row[$startcol + 39] !== null) ? (int) $row[$startcol + 39] : null;
            $this->eventoqx_id = ($row[$startcol + 40] !== null) ? (int) $row[$startcol + 40] : null;
            $this->complicaciones = ($row[$startcol + 41] !== null) ? (string) $row[$startcol + 41] : null;
            $this->val_pre_anestesica = ($row[$startcol + 42] !== null) ? (string) $row[$startcol + 42] : null;
            $this->reintervencion = ($row[$startcol + 43] !== null) ? (boolean) $row[$startcol + 43] : null;
            $this->permisos = $row[$startcol + 44];
            $this->tipo_proc_id = ($row[$startcol + 45] !== null) ? (int) $row[$startcol + 45] : null;
            $this->atencion_id = ($row[$startcol + 46] !== null) ? (int) $row[$startcol + 46] : null;
            $this->tiempo_fuera = ($row[$startcol + 47] !== null) ? (boolean) $row[$startcol + 47] : null;
            $this->procedencia = ($row[$startcol + 48] !== null) ? (string) $row[$startcol + 48] : null;
            $this->clasificacionqx = ($row[$startcol + 49] !== null) ? (int) $row[$startcol + 49] : null;
            $this->region_px = ($row[$startcol + 50] !== null) ? (int) $row[$startcol + 50] : null;
            $this->extension_px = ($row[$startcol + 51] !== null) ? (int) $row[$startcol + 51] : null;
            $this->anexo_detalle = ($row[$startcol + 52] !== null) ? (int) $row[$startcol + 52] : null;
            $this->destino_px = ($row[$startcol + 53] !== null) ? (int) $row[$startcol + 53] : null;
            $this->liberacion_sala = ($row[$startcol + 54] !== null) ? (string) $row[$startcol + 54] : null;
            $this->tiempo_est = ($row[$startcol + 55] !== null) ? (string) $row[$startcol + 55] : null;
            $this->riesgo_qx_pre = ($row[$startcol + 56] !== null) ? (string) $row[$startcol + 56] : null;
            $this->show_in_index = ($row[$startcol + 57] !== null) ? (boolean) $row[$startcol + 57] : null;
            $this->protocolo = ($row[$startcol + 58] !== null) ? (boolean) $row[$startcol + 58] : null;
            $this->cancelada = ($row[$startcol + 59] !== null) ? (boolean) $row[$startcol + 59] : null;
            $this->created_at = ($row[$startcol + 60] !== null) ? (string) $row[$startcol + 60] : null;
            $this->updated_at = ($row[$startcol + 61] !== null) ? (string) $row[$startcol + 61] : null;
            $this->resetModified();

            $this->setNew(false);

            if ($rehydrate) {
                $this->ensureConsistency();
            }

            return $startcol + 62; // 62 = AgendaPeer::NUM_HYDRATE_COLUMNS.

        } catch (Exception $e) {
            throw new PropelException("Error populating Agenda object", $e);
        }
    }

    /**
     * Checks and repairs the internal consistency of the object.
     *
     * This method is executed after an already-instantiated object is re-hydrated
     * from the database.  It exists to check any foreign keys to make sure that
     * the objects related to the current object are correct based on foreign key.
     *
     * You can override this method in the stub class, but you should always invoke
     * the base method from the overridden method (i.e. parent::ensureConsistency()),
     * in case your model changes.
     *
     * @throws PropelException
     */
    public function ensureConsistency()
    {

        if ($this->aSalaquirurgica !== null && $this->sala_id !== $this->aSalaquirurgica->getId()) {
            $this->aSalaquirurgica = null;
        }
        if ($this->aQuirofano !== null && $this->quirofano_id !== $this->aQuirofano->getId()) {
            $this->aQuirofano = null;
        }
        if ($this->aEspecialidad !== null && $this->servicio !== $this->aEspecialidad->getId()) {
            $this->aEspecialidad = null;
        }
        if ($this->aCausadiferido !== null && $this->causa_diferido_id !== $this->aCausadiferido->getId()) {
            $this->aCausadiferido = null;
        }
        if ($this->aRiesgoqx !== null && $this->riesgoqx_id !== $this->aRiesgoqx->getId()) {
            $this->aRiesgoqx = null;
        }
        if ($this->aContaminacionqx !== null && $this->contaminacionqx_id !== $this->aContaminacionqx->getId()) {
            $this->aContaminacionqx = null;
        }
        if ($this->aEventoqx !== null && $this->eventoqx_id !== $this->aEventoqx->getId()) {
            $this->aEventoqx = null;
        }
        if ($this->aProcedimiento !== null && $this->tipo_proc_id !== $this->aProcedimiento->getId()) {
            $this->aProcedimiento = null;
        }
        if ($this->aAtencion !== null && $this->atencion_id !== $this->aAtencion->getId()) {
            $this->aAtencion = null;
        }
    } // ensureConsistency

    /**
     * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
     *
     * This will only work if the object has been saved and has a valid primary key set.
     *
     * @param boolean $deep (optional) Whether to also de-associated any related objects.
     * @param PropelPDO $con (optional) The PropelPDO connection to use.
     * @return void
     * @throws PropelException - if this object is deleted, unsaved or doesn't have pk match in db
     */
    public function reload($deep = false, PropelPDO $con = null)
    {
        if ($this->isDeleted()) {
            throw new PropelException("Cannot reload a deleted object.");
        }

        if ($this->isNew()) {
            throw new PropelException("Cannot reload an unsaved object.");
        }

        if ($con === null) {
            $con = Propel::getConnection(AgendaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }

        // We don't need to alter the object instance pool; we're just modifying this instance
        // already in the pool.

        $stmt = AgendaPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
        $row = $stmt->fetch(PDO::FETCH_NUM);
        $stmt->closeCursor();
        if (!$row) {
            throw new PropelException('Cannot find matching row in the database to reload object values.');
        }
        $this->hydrate($row, 0, true); // rehydrate

        if ($deep) {  // also de-associate any related objects?

            $this->aSalaquirurgica = null;
            $this->aQuirofano = null;
            $this->aRiesgoqx = null;
            $this->aContaminacionqx = null;
            $this->aEventoqx = null;
            $this->aProcedimiento = null;
            $this->aCausadiferido = null;
            $this->aAtencion = null;
            $this->aEspecialidad = null;
            $this->collPersonalcirugias = null;

            $this->collDiagnosticocirugias = null;

            $this->collProcedimientocirugias = null;

            $this->collProcedimientregrogramados = null;

        } // if (deep)
    }

    /**
     * Removes this object from datastore and sets delete attribute.
     *
     * @param PropelPDO $con
     * @return void
     * @throws PropelException
     * @throws Exception
     * @see        BaseObject::setDeleted()
     * @see        BaseObject::isDeleted()
     */
    public function delete(PropelPDO $con = null)
    {
        if ($this->isDeleted()) {
            throw new PropelException("This object has already been deleted.");
        }

        if ($con === null) {
            $con = Propel::getConnection(AgendaPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
        }

        $con->beginTransaction();
        try {
            $deleteQuery = AgendaQuery::create()
                ->filterByPrimaryKey($this->getPrimaryKey());
            $ret = $this->preDelete($con);
            // symfony_behaviors behavior
            foreach (sfMixer::getCallables('BaseAgenda:delete:pre') as $callable)
            {
              if (call_user_func($callable, $this, $con))
              {
                $con->commit();
                return;
              }
            }

            if ($ret) {
                $deleteQuery->delete($con);
                $this->postDelete($con);
                // symfony_behaviors behavior
                foreach (sfMixer::getCallables('BaseAgenda:delete:post') as $callable)
                {
                  call_user_func($callable, $this, $con);
                }

                $con->commit();
                $this->setDeleted(true);
            } else {
                $con->commit();
            }
        } catch (Exception $e) {
            $con->rollBack();
            throw $e;
        }
    }

    /**
     * Persists this object to the database.
     *
     * If the object is new, it inserts it; otherwise an update is performed.
     * All modified related objects will also be persisted in the doSave()
     * method.  This method wraps all precipitate database operations in a
     * single transaction.
     *
     * @param PropelPDO $con
     * @return int             The number of rows affected by this insert/update and any referring fk objects' save() operations.
     * @throws PropelException
     * @throws Exception
     * @see        doSave()
     */
    public function save(PropelPDO $con = null)
    {
        if ($this->isDeleted()) {
            throw new PropelException("You cannot save an object that has been deleted.");
        }

        if ($con === null) {
            $con = Propel::getConnection(AgendaPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
        }

        $con->beginTransaction();
        $isInsert = $this->isNew();
        try {
            $ret = $this->preSave($con);
            // symfony_behaviors behavior
            foreach (sfMixer::getCallables('BaseAgenda:save:pre') as $callable)
            {
              if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
              {
                  $con->commit();
                return $affectedRows;
              }
            }

            // symfony_timestampable behavior
            if ($this->isModified() && !$this->isColumnModified(AgendaPeer::UPDATED_AT))
            {
                $this->setUpdatedAt(time());
            }
            if ($isInsert) {
                $ret = $ret && $this->preInsert($con);
                // symfony_timestampable behavior
                if (!$this->isColumnModified(AgendaPeer::CREATED_AT))
                {
                  $this->setCreatedAt(time());
                }

            } else {
                $ret = $ret && $this->preUpdate($con);
            }
            if ($ret) {
                $affectedRows = $this->doSave($con);
                if ($isInsert) {
                    $this->postInsert($con);
                } else {
                    $this->postUpdate($con);
                }
                $this->postSave($con);
                // symfony_behaviors behavior
                foreach (sfMixer::getCallables('BaseAgenda:save:post') as $callable)
                {
                  call_user_func($callable, $this, $con, $affectedRows);
                }

                AgendaPeer::addInstanceToPool($this);
            } else {
                $affectedRows = 0;
            }
            $con->commit();

            return $affectedRows;
        } catch (Exception $e) {
            $con->rollBack();
            throw $e;
        }
    }

    /**
     * Performs the work of inserting or updating the row in the database.
     *
     * If the object is new, it inserts it; otherwise an update is performed.
     * All related objects are also updated in this method.
     *
     * @param PropelPDO $con
     * @return int             The number of rows affected by this insert/update and any referring fk objects' save() operations.
     * @throws PropelException
     * @see        save()
     */
    protected function doSave(PropelPDO $con)
    {
        $affectedRows = 0; // initialize var to track total num of affected rows
        if (!$this->alreadyInSave) {
            $this->alreadyInSave = true;

            // We call the save method on the following object(s) if they
            // were passed to this object by their coresponding set
            // method.  This object relates to these object(s) by a
            // foreign key reference.

            if ($this->aSalaquirurgica !== null) {
                if ($this->aSalaquirurgica->isModified() || $this->aSalaquirurgica->isNew()) {
                    $affectedRows += $this->aSalaquirurgica->save($con);
                }
                $this->setSalaquirurgica($this->aSalaquirurgica);
            }

            if ($this->aQuirofano !== null) {
                if ($this->aQuirofano->isModified() || $this->aQuirofano->isNew()) {
                    $affectedRows += $this->aQuirofano->save($con);
                }
                $this->setQuirofano($this->aQuirofano);
            }

            if ($this->aRiesgoqx !== null) {
                if ($this->aRiesgoqx->isModified() || $this->aRiesgoqx->isNew()) {
                    $affectedRows += $this->aRiesgoqx->save($con);
                }
                $this->setRiesgoqx($this->aRiesgoqx);
            }

            if ($this->aContaminacionqx !== null) {
                if ($this->aContaminacionqx->isModified() || $this->aContaminacionqx->isNew()) {
                    $affectedRows += $this->aContaminacionqx->save($con);
                }
                $this->setContaminacionqx($this->aContaminacionqx);
            }

            if ($this->aEventoqx !== null) {
                if ($this->aEventoqx->isModified() || $this->aEventoqx->isNew()) {
                    $affectedRows += $this->aEventoqx->save($con);
                }
                $this->setEventoqx($this->aEventoqx);
            }

            if ($this->aProcedimiento !== null) {
                if ($this->aProcedimiento->isModified() || $this->aProcedimiento->isNew()) {
                    $affectedRows += $this->aProcedimiento->save($con);
                }
                $this->setProcedimiento($this->aProcedimiento);
            }

            if ($this->aCausadiferido !== null) {
                if ($this->aCausadiferido->isModified() || $this->aCausadiferido->isNew()) {
                    $affectedRows += $this->aCausadiferido->save($con);
                }
                $this->setCausadiferido($this->aCausadiferido);
            }

            if ($this->aAtencion !== null) {
                if ($this->aAtencion->isModified() || $this->aAtencion->isNew()) {
                    $affectedRows += $this->aAtencion->save($con);
                }
                $this->setAtencion($this->aAtencion);
            }

            if ($this->aEspecialidad !== null) {
                if ($this->aEspecialidad->isModified() || $this->aEspecialidad->isNew()) {
                    $affectedRows += $this->aEspecialidad->save($con);
                }
                $this->setEspecialidad($this->aEspecialidad);
            }

            if ($this->isNew() || $this->isModified()) {
                // persist changes
                if ($this->isNew()) {
                    $this->doInsert($con);
                } else {
                    $this->doUpdate($con);
                }
                $affectedRows += 1;
                $this->resetModified();
            }

            if ($this->personalcirugiasScheduledForDeletion !== null) {
                if (!$this->personalcirugiasScheduledForDeletion->isEmpty()) {
                    foreach ($this->personalcirugiasScheduledForDeletion as $personalcirugia) {
                        // need to save related object because we set the relation to null
                        $personalcirugia->save($con);
                    }
                    $this->personalcirugiasScheduledForDeletion = null;
                }
            }

            if ($this->collPersonalcirugias !== null) {
                foreach ($this->collPersonalcirugias as $referrerFK) {
                    if (!$referrerFK->isDeleted()) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->diagnosticocirugiasScheduledForDeletion !== null) {
                if (!$this->diagnosticocirugiasScheduledForDeletion->isEmpty()) {
                    foreach ($this->diagnosticocirugiasScheduledForDeletion as $diagnosticocirugia) {
                        // need to save related object because we set the relation to null
                        $diagnosticocirugia->save($con);
                    }
                    $this->diagnosticocirugiasScheduledForDeletion = null;
                }
            }

            if ($this->collDiagnosticocirugias !== null) {
                foreach ($this->collDiagnosticocirugias as $referrerFK) {
                    if (!$referrerFK->isDeleted()) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->procedimientocirugiasScheduledForDeletion !== null) {
                if (!$this->procedimientocirugiasScheduledForDeletion->isEmpty()) {
                    foreach ($this->procedimientocirugiasScheduledForDeletion as $procedimientocirugia) {
                        // need to save related object because we set the relation to null
                        $procedimientocirugia->save($con);
                    }
                    $this->procedimientocirugiasScheduledForDeletion = null;
                }
            }

            if ($this->collProcedimientocirugias !== null) {
                foreach ($this->collProcedimientocirugias as $referrerFK) {
                    if (!$referrerFK->isDeleted()) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->procedimientregrogramadosScheduledForDeletion !== null) {
                if (!$this->procedimientregrogramadosScheduledForDeletion->isEmpty()) {
                    foreach ($this->procedimientregrogramadosScheduledForDeletion as $procedimientregrogramado) {
                        // need to save related object because we set the relation to null
                        $procedimientregrogramado->save($con);
                    }
                    $this->procedimientregrogramadosScheduledForDeletion = null;
                }
            }

            if ($this->collProcedimientregrogramados !== null) {
                foreach ($this->collProcedimientregrogramados as $referrerFK) {
                    if (!$referrerFK->isDeleted()) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            $this->alreadyInSave = false;

        }

        return $affectedRows;
    } // doSave()

    /**
     * Insert the row in the database.
     *
     * @param PropelPDO $con
     *
     * @throws PropelException
     * @see        doSave()
     */
    protected function doInsert(PropelPDO $con)
    {
        $modifiedColumns = array();
        $index = 0;

        $this->modifiedColumns[] = AgendaPeer::ID;
        if (null !== $this->id) {
            throw new PropelException('Cannot insert a value for auto-increment primary key (' . AgendaPeer::ID . ')');
        }

         // check the columns in natural order for more readable SQL queries
        if ($this->isColumnModified(AgendaPeer::ID)) {
            $modifiedColumns[':p' . $index++]  = '`ID`';
        }
        if ($this->isColumnModified(AgendaPeer::PROGRAMACION)) {
            $modifiedColumns[':p' . $index++]  = '`PROGRAMACION`';
        }
        if ($this->isColumnModified(AgendaPeer::FECHAESTADO)) {
            $modifiedColumns[':p' . $index++]  = '`FECHAESTADO`';
        }
        if ($this->isColumnModified(AgendaPeer::HORA)) {
            $modifiedColumns[':p' . $index++]  = '`HORA`';
        }
        if ($this->isColumnModified(AgendaPeer::HORAESTADO)) {
            $modifiedColumns[':p' . $index++]  = '`HORAESTADO`';
        }
        if ($this->isColumnModified(AgendaPeer::INICIO)) {
            $modifiedColumns[':p' . $index++]  = '`INICIO`';
        }
        if ($this->isColumnModified(AgendaPeer::LAST_TIME)) {
            $modifiedColumns[':p' . $index++]  = '`LAST_TIME`';
        }
        if ($this->isColumnModified(AgendaPeer::INGRESO)) {
            $modifiedColumns[':p' . $index++]  = '`INGRESO`';
        }
        if ($this->isColumnModified(AgendaPeer::SALA_ID)) {
            $modifiedColumns[':p' . $index++]  = '`SALA_ID`';
        }
        if ($this->isColumnModified(AgendaPeer::QUIROFANO_ID)) {
            $modifiedColumns[':p' . $index++]  = '`QUIROFANO_ID`';
        }
        if ($this->isColumnModified(AgendaPeer::EGRESO)) {
            $modifiedColumns[':p' . $index++]  = '`EGRESO`';
        }
        if ($this->isColumnModified(AgendaPeer::CIE9MC)) {
            $modifiedColumns[':p' . $index++]  = '`CIE9MC`';
        }
        if ($this->isColumnModified(AgendaPeer::CIE9MC_ID)) {
            $modifiedColumns[':p' . $index++]  = '`CIE9MC_ID`';
        }
        if ($this->isColumnModified(AgendaPeer::CX_REALIZADA)) {
            $modifiedColumns[':p' . $index++]  = '`CX_REALIZADA`';
        }
        if ($this->isColumnModified(AgendaPeer::CX_REALIZADA_ID)) {
            $modifiedColumns[':p' . $index++]  = '`CX_REALIZADA_ID`';
        }
        if ($this->isColumnModified(AgendaPeer::TIPO_CX)) {
            $modifiedColumns[':p' . $index++]  = '`TIPO_CX`';
        }
        if ($this->isColumnModified(AgendaPeer::DIAGNOSTICO)) {
            $modifiedColumns[':p' . $index++]  = '`DIAGNOSTICO`';
        }
        if ($this->isColumnModified(AgendaPeer::DIAGNOSTICO_ID)) {
            $modifiedColumns[':p' . $index++]  = '`DIAGNOSTICO_ID`';
        }
        if ($this->isColumnModified(AgendaPeer::MEDICO_NAME)) {
            $modifiedColumns[':p' . $index++]  = '`MEDICO_NAME`';
        }
        if ($this->isColumnModified(AgendaPeer::PACIENTE_NAME)) {
            $modifiedColumns[':p' . $index++]  = '`PACIENTE_NAME`';
        }
        if ($this->isColumnModified(AgendaPeer::PACIENTE_ID)) {
            $modifiedColumns[':p' . $index++]  = '`PACIENTE_ID`';
        }
        if ($this->isColumnModified(AgendaPeer::EDAD)) {
            $modifiedColumns[':p' . $index++]  = '`EDAD`';
        }
        if ($this->isColumnModified(AgendaPeer::GENERO)) {
            $modifiedColumns[':p' . $index++]  = '`GENERO`';
        }
        if ($this->isColumnModified(AgendaPeer::GENERO_ID)) {
            $modifiedColumns[':p' . $index++]  = '`GENERO_ID`';
        }
        if ($this->isColumnModified(AgendaPeer::REGISTRO)) {
            $modifiedColumns[':p' . $index++]  = '`REGISTRO`';
        }
        if ($this->isColumnModified(AgendaPeer::SERVICIO)) {
            $modifiedColumns[':p' . $index++]  = '`SERVICIO`';
        }
        if ($this->isColumnModified(AgendaPeer::ANESTESIA_ID)) {
            $modifiedColumns[':p' . $index++]  = '`ANESTESIA_ID`';
        }
        if ($this->isColumnModified(AgendaPeer::ANESTESIA_EMPLEADA)) {
            $modifiedColumns[':p' . $index++]  = '`ANESTESIA_EMPLEADA`';
        }
        if ($this->isColumnModified(AgendaPeer::EV_ADVERSOS_ANESTESIA)) {
            $modifiedColumns[':p' . $index++]  = '`EV_ADVERSOS_ANESTESIA`';
        }
        if ($this->isColumnModified(AgendaPeer::OBSERVACIONES)) {
            $modifiedColumns[':p' . $index++]  = '`OBSERVACIONES`';
        }
        if ($this->isColumnModified(AgendaPeer::REQUERIMIENTO)) {
            $modifiedColumns[':p' . $index++]  = '`REQUERIMIENTO`';
        }
        if ($this->isColumnModified(AgendaPeer::REQ_INSUMOS)) {
            $modifiedColumns[':p' . $index++]  = '`REQ_INSUMOS`';
        }
        if ($this->isColumnModified(AgendaPeer::REQ_HEMODERIV)) {
            $modifiedColumns[':p' . $index++]  = '`REQ_HEMODERIV`';
        }
        if ($this->isColumnModified(AgendaPeer::REQ_LABORATORIO)) {
            $modifiedColumns[':p' . $index++]  = '`REQ_LABORATORIO`';
        }
        if ($this->isColumnModified(AgendaPeer::REQ_ANESTESICO)) {
            $modifiedColumns[':p' . $index++]  = '`REQ_ANESTESICO`';
        }
        if ($this->isColumnModified(AgendaPeer::STATUS)) {
            $modifiedColumns[':p' . $index++]  = '`STATUS`';
        }
        if ($this->isColumnModified(AgendaPeer::CAUSA_DIFERIDO_ID)) {
            $modifiedColumns[':p' . $index++]  = '`CAUSA_DIFERIDO_ID`';
        }
        if ($this->isColumnModified(AgendaPeer::SOLICITADO)) {
            $modifiedColumns[':p' . $index++]  = '`SOLICITADO`';
        }
        if ($this->isColumnModified(AgendaPeer::RIESGOQX_ID)) {
            $modifiedColumns[':p' . $index++]  = '`RIESGOQX_ID`';
        }
        if ($this->isColumnModified(AgendaPeer::CONTAMINACIONQX_ID)) {
            $modifiedColumns[':p' . $index++]  = '`CONTAMINACIONQX_ID`';
        }
        if ($this->isColumnModified(AgendaPeer::EVENTOQX_ID)) {
            $modifiedColumns[':p' . $index++]  = '`EVENTOQX_ID`';
        }
        if ($this->isColumnModified(AgendaPeer::COMPLICACIONES)) {
            $modifiedColumns[':p' . $index++]  = '`COMPLICACIONES`';
        }
        if ($this->isColumnModified(AgendaPeer::VAL_PRE_ANESTESICA)) {
            $modifiedColumns[':p' . $index++]  = '`VAL_PRE_ANESTESICA`';
        }
        if ($this->isColumnModified(AgendaPeer::REINTERVENCION)) {
            $modifiedColumns[':p' . $index++]  = '`REINTERVENCION`';
        }
        if ($this->isColumnModified(AgendaPeer::PERMISOS)) {
            $modifiedColumns[':p' . $index++]  = '`PERMISOS`';
        }
        if ($this->isColumnModified(AgendaPeer::TIPO_PROC_ID)) {
            $modifiedColumns[':p' . $index++]  = '`TIPO_PROC_ID`';
        }
        if ($this->isColumnModified(AgendaPeer::ATENCION_ID)) {
            $modifiedColumns[':p' . $index++]  = '`ATENCION_ID`';
        }
        if ($this->isColumnModified(AgendaPeer::TIEMPO_FUERA)) {
            $modifiedColumns[':p' . $index++]  = '`TIEMPO_FUERA`';
        }
        if ($this->isColumnModified(AgendaPeer::PROCEDENCIA)) {
            $modifiedColumns[':p' . $index++]  = '`PROCEDENCIA`';
        }
        if ($this->isColumnModified(AgendaPeer::CLASIFICACIONQX)) {
            $modifiedColumns[':p' . $index++]  = '`CLASIFICACIONQX`';
        }
        if ($this->isColumnModified(AgendaPeer::REGION_PX)) {
            $modifiedColumns[':p' . $index++]  = '`REGION_PX`';
        }
        if ($this->isColumnModified(AgendaPeer::EXTENSION_PX)) {
            $modifiedColumns[':p' . $index++]  = '`EXTENSION_PX`';
        }
        if ($this->isColumnModified(AgendaPeer::ANEXO_DETALLE)) {
            $modifiedColumns[':p' . $index++]  = '`ANEXO_DETALLE`';
        }
        if ($this->isColumnModified(AgendaPeer::DESTINO_PX)) {
            $modifiedColumns[':p' . $index++]  = '`DESTINO_PX`';
        }
        if ($this->isColumnModified(AgendaPeer::LIBERACION_SALA)) {
            $modifiedColumns[':p' . $index++]  = '`LIBERACION_SALA`';
        }
        if ($this->isColumnModified(AgendaPeer::TIEMPO_EST)) {
            $modifiedColumns[':p' . $index++]  = '`TIEMPO_EST`';
        }
        if ($this->isColumnModified(AgendaPeer::RIESGO_QX_PRE)) {
            $modifiedColumns[':p' . $index++]  = '`RIESGO_QX_PRE`';
        }
        if ($this->isColumnModified(AgendaPeer::SHOW_IN_INDEX)) {
            $modifiedColumns[':p' . $index++]  = '`SHOW_IN_INDEX`';
        }
        if ($this->isColumnModified(AgendaPeer::PROTOCOLO)) {
            $modifiedColumns[':p' . $index++]  = '`PROTOCOLO`';
        }
        if ($this->isColumnModified(AgendaPeer::CANCELADA)) {
            $modifiedColumns[':p' . $index++]  = '`CANCELADA`';
        }
        if ($this->isColumnModified(AgendaPeer::CREATED_AT)) {
            $modifiedColumns[':p' . $index++]  = '`CREATED_AT`';
        }
        if ($this->isColumnModified(AgendaPeer::UPDATED_AT)) {
            $modifiedColumns[':p' . $index++]  = '`UPDATED_AT`';
        }

        $sql = sprintf(
            'INSERT INTO `hc_agenda` (%s) VALUES (%s)',
            implode(', ', $modifiedColumns),
            implode(', ', array_keys($modifiedColumns))
        );

        try {
            $stmt = $con->prepare($sql);
            foreach ($modifiedColumns as $identifier => $columnName) {
                switch ($columnName) {
                    case '`ID`':
                        $stmt->bindValue($identifier, $this->id, PDO::PARAM_INT);
                        break;
                    case '`PROGRAMACION`':
                        $stmt->bindValue($identifier, $this->programacion, PDO::PARAM_STR);
                        break;
                    case '`FECHAESTADO`':
                        $stmt->bindValue($identifier, $this->fechaestado, PDO::PARAM_STR);
                        break;
                    case '`HORA`':
                        $stmt->bindValue($identifier, $this->hora, PDO::PARAM_STR);
                        break;
                    case '`HORAESTADO`':
                        $stmt->bindValue($identifier, $this->horaestado, PDO::PARAM_STR);
                        break;
                    case '`INICIO`':
                        $stmt->bindValue($identifier, $this->inicio, PDO::PARAM_STR);
                        break;
                    case '`LAST_TIME`':
                        $stmt->bindValue($identifier, $this->last_time, PDO::PARAM_STR);
                        break;
                    case '`INGRESO`':
                        $stmt->bindValue($identifier, $this->ingreso, PDO::PARAM_STR);
                        break;
                    case '`SALA_ID`':
                        $stmt->bindValue($identifier, $this->sala_id, PDO::PARAM_INT);
                        break;
                    case '`QUIROFANO_ID`':
                        $stmt->bindValue($identifier, $this->quirofano_id, PDO::PARAM_INT);
                        break;
                    case '`EGRESO`':
                        $stmt->bindValue($identifier, $this->egreso, PDO::PARAM_STR);
                        break;
                    case '`CIE9MC`':
                        $stmt->bindValue($identifier, $this->cie9mc, PDO::PARAM_STR);
                        break;
                    case '`CIE9MC_ID`':
                        $stmt->bindValue($identifier, $this->cie9mc_id, PDO::PARAM_STR);
                        break;
                    case '`CX_REALIZADA`':
                        $stmt->bindValue($identifier, $this->cx_realizada, PDO::PARAM_STR);
                        break;
                    case '`CX_REALIZADA_ID`':
                        $stmt->bindValue($identifier, $this->cx_realizada_id, PDO::PARAM_STR);
                        break;
                    case '`TIPO_CX`':
                        $stmt->bindValue($identifier, $this->tipo_cx, PDO::PARAM_INT);
                        break;
                    case '`DIAGNOSTICO`':
                        $stmt->bindValue($identifier, $this->diagnostico, PDO::PARAM_STR);
                        break;
                    case '`DIAGNOSTICO_ID`':
                        $stmt->bindValue($identifier, $this->diagnostico_id, PDO::PARAM_STR);
                        break;
                    case '`MEDICO_NAME`':
                        $stmt->bindValue($identifier, $this->medico_name, PDO::PARAM_STR);
                        break;
                    case '`PACIENTE_NAME`':
                        $stmt->bindValue($identifier, $this->paciente_name, PDO::PARAM_STR);
                        break;
                    case '`PACIENTE_ID`':
                        $stmt->bindValue($identifier, $this->paciente_id, PDO::PARAM_INT);
                        break;
                    case '`EDAD`':
                        $stmt->bindValue($identifier, $this->edad, PDO::PARAM_STR);
                        break;
                    case '`GENERO`':
                        $stmt->bindValue($identifier, $this->genero, PDO::PARAM_STR);
                        break;
                    case '`GENERO_ID`':
                        $stmt->bindValue($identifier, $this->genero_id, PDO::PARAM_INT);
                        break;
                    case '`REGISTRO`':
                        $stmt->bindValue($identifier, $this->registro, PDO::PARAM_STR);
                        break;
                    case '`SERVICIO`':
                        $stmt->bindValue($identifier, $this->servicio, PDO::PARAM_INT);
                        break;
                    case '`ANESTESIA_ID`':
                        $stmt->bindValue($identifier, $this->anestesia_id, PDO::PARAM_INT);
                        break;
                    case '`ANESTESIA_EMPLEADA`':
                        $stmt->bindValue($identifier, $this->anestesia_empleada, PDO::PARAM_STR);
                        break;
                    case '`EV_ADVERSOS_ANESTESIA`':
                        $stmt->bindValue($identifier, $this->ev_adversos_anestesia, PDO::PARAM_STR);
                        break;
                    case '`OBSERVACIONES`':
                        $stmt->bindValue($identifier, $this->observaciones, PDO::PARAM_STR);
                        break;
                    case '`REQUERIMIENTO`':
                        $stmt->bindValue($identifier, $this->requerimiento, PDO::PARAM_STR);
                        break;
                    case '`REQ_INSUMOS`':
                        $stmt->bindValue($identifier, $this->req_insumos, PDO::PARAM_STR);
                        break;
                    case '`REQ_HEMODERIV`':
                        $stmt->bindValue($identifier, $this->req_hemoderiv, PDO::PARAM_STR);
                        break;
                    case '`REQ_LABORATORIO`':
                        $stmt->bindValue($identifier, $this->req_laboratorio, PDO::PARAM_STR);
                        break;
                    case '`REQ_ANESTESICO`':
                        $stmt->bindValue($identifier, $this->req_anestesico, PDO::PARAM_STR);
                        break;
                    case '`STATUS`':
                        $stmt->bindValue($identifier, $this->status, PDO::PARAM_INT);
                        break;
                    case '`CAUSA_DIFERIDO_ID`':
                        $stmt->bindValue($identifier, $this->causa_diferido_id, PDO::PARAM_INT);
                        break;
                    case '`SOLICITADO`':
                        $stmt->bindValue($identifier, (int) $this->solicitado, PDO::PARAM_INT);
                        break;
                    case '`RIESGOQX_ID`':
                        $stmt->bindValue($identifier, $this->riesgoqx_id, PDO::PARAM_INT);
                        break;
                    case '`CONTAMINACIONQX_ID`':
                        $stmt->bindValue($identifier, $this->contaminacionqx_id, PDO::PARAM_INT);
                        break;
                    case '`EVENTOQX_ID`':
                        $stmt->bindValue($identifier, $this->eventoqx_id, PDO::PARAM_INT);
                        break;
                    case '`COMPLICACIONES`':
                        $stmt->bindValue($identifier, $this->complicaciones, PDO::PARAM_STR);
                        break;
                    case '`VAL_PRE_ANESTESICA`':
                        $stmt->bindValue($identifier, $this->val_pre_anestesica, PDO::PARAM_STR);
                        break;
                    case '`REINTERVENCION`':
                        $stmt->bindValue($identifier, (int) $this->reintervencion, PDO::PARAM_INT);
                        break;
                    case '`PERMISOS`':
                        $stmt->bindValue($identifier, $this->permisos, PDO::PARAM_STR);
                        break;
                    case '`TIPO_PROC_ID`':
                        $stmt->bindValue($identifier, $this->tipo_proc_id, PDO::PARAM_INT);
                        break;
                    case '`ATENCION_ID`':
                        $stmt->bindValue($identifier, $this->atencion_id, PDO::PARAM_INT);
                        break;
                    case '`TIEMPO_FUERA`':
                        $stmt->bindValue($identifier, (int) $this->tiempo_fuera, PDO::PARAM_INT);
                        break;
                    case '`PROCEDENCIA`':
                        $stmt->bindValue($identifier, $this->procedencia, PDO::PARAM_STR);
                        break;
                    case '`CLASIFICACIONQX`':
                        $stmt->bindValue($identifier, $this->clasificacionqx, PDO::PARAM_INT);
                        break;
                    case '`REGION_PX`':
                        $stmt->bindValue($identifier, $this->region_px, PDO::PARAM_INT);
                        break;
                    case '`EXTENSION_PX`':
                        $stmt->bindValue($identifier, $this->extension_px, PDO::PARAM_INT);
                        break;
                    case '`ANEXO_DETALLE`':
                        $stmt->bindValue($identifier, $this->anexo_detalle, PDO::PARAM_INT);
                        break;
                    case '`DESTINO_PX`':
                        $stmt->bindValue($identifier, $this->destino_px, PDO::PARAM_INT);
                        break;
                    case '`LIBERACION_SALA`':
                        $stmt->bindValue($identifier, $this->liberacion_sala, PDO::PARAM_STR);
                        break;
                    case '`TIEMPO_EST`':
                        $stmt->bindValue($identifier, $this->tiempo_est, PDO::PARAM_STR);
                        break;
                    case '`RIESGO_QX_PRE`':
                        $stmt->bindValue($identifier, $this->riesgo_qx_pre, PDO::PARAM_STR);
                        break;
                    case '`SHOW_IN_INDEX`':
                        $stmt->bindValue($identifier, (int) $this->show_in_index, PDO::PARAM_INT);
                        break;
                    case '`PROTOCOLO`':
                        $stmt->bindValue($identifier, (int) $this->protocolo, PDO::PARAM_INT);
                        break;
                    case '`CANCELADA`':
                        $stmt->bindValue($identifier, (int) $this->cancelada, PDO::PARAM_INT);
                        break;
                    case '`CREATED_AT`':
                        $stmt->bindValue($identifier, $this->created_at, PDO::PARAM_STR);
                        break;
                    case '`UPDATED_AT`':
                        $stmt->bindValue($identifier, $this->updated_at, PDO::PARAM_STR);
                        break;
                }
            }
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute INSERT statement [%s]', $sql), $e);
        }

        try {
            $pk = $con->lastInsertId();
        } catch (Exception $e) {
            throw new PropelException('Unable to get autoincrement id.', $e);
        }
        $this->setId($pk);

        $this->setNew(false);
    }

    /**
     * Update the row in the database.
     *
     * @param PropelPDO $con
     *
     * @see        doSave()
     */
    protected function doUpdate(PropelPDO $con)
    {
        $selectCriteria = $this->buildPkeyCriteria();
        $valuesCriteria = $this->buildCriteria();
        BasePeer::doUpdate($selectCriteria, $valuesCriteria, $con);
    }

    /**
     * Array of ValidationFailed objects.
     * @var        array ValidationFailed[]
     */
    protected $validationFailures = array();

    /**
     * Gets any ValidationFailed objects that resulted from last call to validate().
     *
     *
     * @return array ValidationFailed[]
     * @see        validate()
     */
    public function getValidationFailures()
    {
        return $this->validationFailures;
    }

    /**
     * Validates the objects modified field values and all objects related to this table.
     *
     * If $columns is either a column name or an array of column names
     * only those columns are validated.
     *
     * @param mixed $columns Column name or an array of column names.
     * @return boolean Whether all columns pass validation.
     * @see        doValidate()
     * @see        getValidationFailures()
     */
    public function validate($columns = null)
    {
        $res = $this->doValidate($columns);
        if ($res === true) {
            $this->validationFailures = array();

            return true;
        } else {
            $this->validationFailures = $res;

            return false;
        }
    }

    /**
     * This function performs the validation work for complex object models.
     *
     * In addition to checking the current object, all related objects will
     * also be validated.  If all pass then <code>true</code> is returned; otherwise
     * an aggreagated array of ValidationFailed objects will be returned.
     *
     * @param array $columns Array of column names to validate.
     * @return mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
     */
    protected function doValidate($columns = null)
    {
        if (!$this->alreadyInValidation) {
            $this->alreadyInValidation = true;
            $retval = null;

            $failureMap = array();


            // We call the validate method on the following object(s) if they
            // were passed to this object by their coresponding set
            // method.  This object relates to these object(s) by a
            // foreign key reference.

            if ($this->aSalaquirurgica !== null) {
                if (!$this->aSalaquirurgica->validate($columns)) {
                    $failureMap = array_merge($failureMap, $this->aSalaquirurgica->getValidationFailures());
                }
            }

            if ($this->aQuirofano !== null) {
                if (!$this->aQuirofano->validate($columns)) {
                    $failureMap = array_merge($failureMap, $this->aQuirofano->getValidationFailures());
                }
            }

            if ($this->aRiesgoqx !== null) {
                if (!$this->aRiesgoqx->validate($columns)) {
                    $failureMap = array_merge($failureMap, $this->aRiesgoqx->getValidationFailures());
                }
            }

            if ($this->aContaminacionqx !== null) {
                if (!$this->aContaminacionqx->validate($columns)) {
                    $failureMap = array_merge($failureMap, $this->aContaminacionqx->getValidationFailures());
                }
            }

            if ($this->aEventoqx !== null) {
                if (!$this->aEventoqx->validate($columns)) {
                    $failureMap = array_merge($failureMap, $this->aEventoqx->getValidationFailures());
                }
            }

            if ($this->aProcedimiento !== null) {
                if (!$this->aProcedimiento->validate($columns)) {
                    $failureMap = array_merge($failureMap, $this->aProcedimiento->getValidationFailures());
                }
            }

            if ($this->aCausadiferido !== null) {
                if (!$this->aCausadiferido->validate($columns)) {
                    $failureMap = array_merge($failureMap, $this->aCausadiferido->getValidationFailures());
                }
            }

            if ($this->aAtencion !== null) {
                if (!$this->aAtencion->validate($columns)) {
                    $failureMap = array_merge($failureMap, $this->aAtencion->getValidationFailures());
                }
            }

            if ($this->aEspecialidad !== null) {
                if (!$this->aEspecialidad->validate($columns)) {
                    $failureMap = array_merge($failureMap, $this->aEspecialidad->getValidationFailures());
                }
            }


            if (($retval = AgendaPeer::doValidate($this, $columns)) !== true) {
                $failureMap = array_merge($failureMap, $retval);
            }


                if ($this->collPersonalcirugias !== null) {
                    foreach ($this->collPersonalcirugias as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->collDiagnosticocirugias !== null) {
                    foreach ($this->collDiagnosticocirugias as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->collProcedimientocirugias !== null) {
                    foreach ($this->collProcedimientocirugias as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->collProcedimientregrogramados !== null) {
                    foreach ($this->collProcedimientregrogramados as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }


            $this->alreadyInValidation = false;
        }

        return (!empty($failureMap) ? $failureMap : true);
    }

    /**
     * Retrieves a field from the object by name passed in as a string.
     *
     * @param string $name name
     * @param string $type The type of fieldname the $name is of:
     *               one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
     *               BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     *               Defaults to BasePeer::TYPE_PHPNAME
     * @return mixed Value of field.
     */
    public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
    {
        $pos = AgendaPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
        $field = $this->getByPosition($pos);

        return $field;
    }

    /**
     * Retrieves a field from the object by Position as specified in the xml schema.
     * Zero-based.
     *
     * @param int $pos position in xml schema
     * @return mixed Value of field at $pos
     */
    public function getByPosition($pos)
    {
        switch ($pos) {
            case 0:
                return $this->getId();
                break;
            case 1:
                return $this->getProgramacion();
                break;
            case 2:
                return $this->getFechaestado();
                break;
            case 3:
                return $this->getHora();
                break;
            case 4:
                return $this->getHoraestado();
                break;
            case 5:
                return $this->getInicio();
                break;
            case 6:
                return $this->getLastTime();
                break;
            case 7:
                return $this->getIngreso();
                break;
            case 8:
                return $this->getSalaId();
                break;
            case 9:
                return $this->getQuirofanoId();
                break;
            case 10:
                return $this->getEgreso();
                break;
            case 11:
                return $this->getCie9mc();
                break;
            case 12:
                return $this->getCie9mcId();
                break;
            case 13:
                return $this->getCxRealizada();
                break;
            case 14:
                return $this->getCxRealizadaId();
                break;
            case 15:
                return $this->getTipoCx();
                break;
            case 16:
                return $this->getDiagnostico();
                break;
            case 17:
                return $this->getDiagnosticoId();
                break;
            case 18:
                return $this->getMedicoName();
                break;
            case 19:
                return $this->getPacienteName();
                break;
            case 20:
                return $this->getPacienteId();
                break;
            case 21:
                return $this->getEdad();
                break;
            case 22:
                return $this->getGenero();
                break;
            case 23:
                return $this->getGeneroId();
                break;
            case 24:
                return $this->getRegistro();
                break;
            case 25:
                return $this->getServicio();
                break;
            case 26:
                return $this->getAnestesiaId();
                break;
            case 27:
                return $this->getAnestesiaEmpleada();
                break;
            case 28:
                return $this->getEvAdversosAnestesia();
                break;
            case 29:
                return $this->getObservaciones();
                break;
            case 30:
                return $this->getRequerimiento();
                break;
            case 31:
                return $this->getReqInsumos();
                break;
            case 32:
                return $this->getReqHemoderiv();
                break;
            case 33:
                return $this->getReqLaboratorio();
                break;
            case 34:
                return $this->getReqAnestesico();
                break;
            case 35:
                return $this->getStatus();
                break;
            case 36:
                return $this->getCausaDiferidoId();
                break;
            case 37:
                return $this->getSolicitado();
                break;
            case 38:
                return $this->getRiesgoqxId();
                break;
            case 39:
                return $this->getContaminacionqxId();
                break;
            case 40:
                return $this->getEventoqxId();
                break;
            case 41:
                return $this->getComplicaciones();
                break;
            case 42:
                return $this->getValPreAnestesica();
                break;
            case 43:
                return $this->getReintervencion();
                break;
            case 44:
                return $this->getPermisos();
                break;
            case 45:
                return $this->getTipoProcId();
                break;
            case 46:
                return $this->getAtencionId();
                break;
            case 47:
                return $this->getTiempoFuera();
                break;
            case 48:
                return $this->getProcedencia();
                break;
            case 49:
                return $this->getClasificacionqx();
                break;
            case 50:
                return $this->getRegionPx();
                break;
            case 51:
                return $this->getExtensionPx();
                break;
            case 52:
                return $this->getAnexoDetalle();
                break;
            case 53:
                return $this->getDestinoPx();
                break;
            case 54:
                return $this->getLiberacionSala();
                break;
            case 55:
                return $this->getTiempoEst();
                break;
            case 56:
                return $this->getRiesgoQxPre();
                break;
            case 57:
                return $this->getShowInIndex();
                break;
            case 58:
                return $this->getProtocolo();
                break;
            case 59:
                return $this->getCancelada();
                break;
            case 60:
                return $this->getCreatedAt();
                break;
            case 61:
                return $this->getUpdatedAt();
                break;
            default:
                return null;
                break;
        } // switch()
    }

    /**
     * Exports the object as an array.
     *
     * You can specify the key type of the array by passing one of the class
     * type constants.
     *
     * @param     string  $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
     *                    BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     *                    Defaults to BasePeer::TYPE_PHPNAME.
     * @param     boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns. Defaults to true.
     * @param     array $alreadyDumpedObjects List of objects to skip to avoid recursion
     * @param     boolean $includeForeignObjects (optional) Whether to include hydrated related objects. Default to FALSE.
     *
     * @return array an associative array containing the field names (as keys) and field values
     */
    public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true, $alreadyDumpedObjects = array(), $includeForeignObjects = false)
    {
        if (isset($alreadyDumpedObjects['Agenda'][$this->getPrimaryKey()])) {
            return '*RECURSION*';
        }
        $alreadyDumpedObjects['Agenda'][$this->getPrimaryKey()] = true;
        $keys = AgendaPeer::getFieldNames($keyType);
        $result = array(
            $keys[0] => $this->getId(),
            $keys[1] => $this->getProgramacion(),
            $keys[2] => $this->getFechaestado(),
            $keys[3] => $this->getHora(),
            $keys[4] => $this->getHoraestado(),
            $keys[5] => $this->getInicio(),
            $keys[6] => $this->getLastTime(),
            $keys[7] => $this->getIngreso(),
            $keys[8] => $this->getSalaId(),
            $keys[9] => $this->getQuirofanoId(),
            $keys[10] => $this->getEgreso(),
            $keys[11] => $this->getCie9mc(),
            $keys[12] => $this->getCie9mcId(),
            $keys[13] => $this->getCxRealizada(),
            $keys[14] => $this->getCxRealizadaId(),
            $keys[15] => $this->getTipoCx(),
            $keys[16] => $this->getDiagnostico(),
            $keys[17] => $this->getDiagnosticoId(),
            $keys[18] => $this->getMedicoName(),
            $keys[19] => $this->getPacienteName(),
            $keys[20] => $this->getPacienteId(),
            $keys[21] => $this->getEdad(),
            $keys[22] => $this->getGenero(),
            $keys[23] => $this->getGeneroId(),
            $keys[24] => $this->getRegistro(),
            $keys[25] => $this->getServicio(),
            $keys[26] => $this->getAnestesiaId(),
            $keys[27] => $this->getAnestesiaEmpleada(),
            $keys[28] => $this->getEvAdversosAnestesia(),
            $keys[29] => $this->getObservaciones(),
            $keys[30] => $this->getRequerimiento(),
            $keys[31] => $this->getReqInsumos(),
            $keys[32] => $this->getReqHemoderiv(),
            $keys[33] => $this->getReqLaboratorio(),
            $keys[34] => $this->getReqAnestesico(),
            $keys[35] => $this->getStatus(),
            $keys[36] => $this->getCausaDiferidoId(),
            $keys[37] => $this->getSolicitado(),
            $keys[38] => $this->getRiesgoqxId(),
            $keys[39] => $this->getContaminacionqxId(),
            $keys[40] => $this->getEventoqxId(),
            $keys[41] => $this->getComplicaciones(),
            $keys[42] => $this->getValPreAnestesica(),
            $keys[43] => $this->getReintervencion(),
            $keys[44] => $this->getPermisos(),
            $keys[45] => $this->getTipoProcId(),
            $keys[46] => $this->getAtencionId(),
            $keys[47] => $this->getTiempoFuera(),
            $keys[48] => $this->getProcedencia(),
            $keys[49] => $this->getClasificacionqx(),
            $keys[50] => $this->getRegionPx(),
            $keys[51] => $this->getExtensionPx(),
            $keys[52] => $this->getAnexoDetalle(),
            $keys[53] => $this->getDestinoPx(),
            $keys[54] => $this->getLiberacionSala(),
            $keys[55] => $this->getTiempoEst(),
            $keys[56] => $this->getRiesgoQxPre(),
            $keys[57] => $this->getShowInIndex(),
            $keys[58] => $this->getProtocolo(),
            $keys[59] => $this->getCancelada(),
            $keys[60] => $this->getCreatedAt(),
            $keys[61] => $this->getUpdatedAt(),
        );
        if ($includeForeignObjects) {
            if (null !== $this->aSalaquirurgica) {
                $result['Salaquirurgica'] = $this->aSalaquirurgica->toArray($keyType, $includeLazyLoadColumns,  $alreadyDumpedObjects, true);
            }
            if (null !== $this->aQuirofano) {
                $result['Quirofano'] = $this->aQuirofano->toArray($keyType, $includeLazyLoadColumns,  $alreadyDumpedObjects, true);
            }
            if (null !== $this->aRiesgoqx) {
                $result['Riesgoqx'] = $this->aRiesgoqx->toArray($keyType, $includeLazyLoadColumns,  $alreadyDumpedObjects, true);
            }
            if (null !== $this->aContaminacionqx) {
                $result['Contaminacionqx'] = $this->aContaminacionqx->toArray($keyType, $includeLazyLoadColumns,  $alreadyDumpedObjects, true);
            }
            if (null !== $this->aEventoqx) {
                $result['Eventoqx'] = $this->aEventoqx->toArray($keyType, $includeLazyLoadColumns,  $alreadyDumpedObjects, true);
            }
            if (null !== $this->aProcedimiento) {
                $result['Procedimiento'] = $this->aProcedimiento->toArray($keyType, $includeLazyLoadColumns,  $alreadyDumpedObjects, true);
            }
            if (null !== $this->aCausadiferido) {
                $result['Causadiferido'] = $this->aCausadiferido->toArray($keyType, $includeLazyLoadColumns,  $alreadyDumpedObjects, true);
            }
            if (null !== $this->aAtencion) {
                $result['Atencion'] = $this->aAtencion->toArray($keyType, $includeLazyLoadColumns,  $alreadyDumpedObjects, true);
            }
            if (null !== $this->aEspecialidad) {
                $result['Especialidad'] = $this->aEspecialidad->toArray($keyType, $includeLazyLoadColumns,  $alreadyDumpedObjects, true);
            }
            if (null !== $this->collPersonalcirugias) {
                $result['Personalcirugias'] = $this->collPersonalcirugias->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->collDiagnosticocirugias) {
                $result['Diagnosticocirugias'] = $this->collDiagnosticocirugias->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->collProcedimientocirugias) {
                $result['Procedimientocirugias'] = $this->collProcedimientocirugias->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->collProcedimientregrogramados) {
                $result['Procedimientregrogramados'] = $this->collProcedimientregrogramados->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
        }

        return $result;
    }

    /**
     * Sets a field from the object by name passed in as a string.
     *
     * @param string $name peer name
     * @param mixed $value field value
     * @param string $type The type of fieldname the $name is of:
     *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
     *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     *                     Defaults to BasePeer::TYPE_PHPNAME
     * @return void
     */
    public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
    {
        $pos = AgendaPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);

        $this->setByPosition($pos, $value);
    }

    /**
     * Sets a field from the object by Position as specified in the xml schema.
     * Zero-based.
     *
     * @param int $pos position in xml schema
     * @param mixed $value field value
     * @return void
     */
    public function setByPosition($pos, $value)
    {
        switch ($pos) {
            case 0:
                $this->setId($value);
                break;
            case 1:
                $this->setProgramacion($value);
                break;
            case 2:
                $this->setFechaestado($value);
                break;
            case 3:
                $this->setHora($value);
                break;
            case 4:
                $this->setHoraestado($value);
                break;
            case 5:
                $this->setInicio($value);
                break;
            case 6:
                $this->setLastTime($value);
                break;
            case 7:
                $this->setIngreso($value);
                break;
            case 8:
                $this->setSalaId($value);
                break;
            case 9:
                $this->setQuirofanoId($value);
                break;
            case 10:
                $this->setEgreso($value);
                break;
            case 11:
                $this->setCie9mc($value);
                break;
            case 12:
                $this->setCie9mcId($value);
                break;
            case 13:
                $this->setCxRealizada($value);
                break;
            case 14:
                $this->setCxRealizadaId($value);
                break;
            case 15:
                $this->setTipoCx($value);
                break;
            case 16:
                $this->setDiagnostico($value);
                break;
            case 17:
                $this->setDiagnosticoId($value);
                break;
            case 18:
                $this->setMedicoName($value);
                break;
            case 19:
                $this->setPacienteName($value);
                break;
            case 20:
                $this->setPacienteId($value);
                break;
            case 21:
                $this->setEdad($value);
                break;
            case 22:
                $this->setGenero($value);
                break;
            case 23:
                $this->setGeneroId($value);
                break;
            case 24:
                $this->setRegistro($value);
                break;
            case 25:
                $this->setServicio($value);
                break;
            case 26:
                $this->setAnestesiaId($value);
                break;
            case 27:
                $this->setAnestesiaEmpleada($value);
                break;
            case 28:
                $this->setEvAdversosAnestesia($value);
                break;
            case 29:
                $this->setObservaciones($value);
                break;
            case 30:
                $this->setRequerimiento($value);
                break;
            case 31:
                $this->setReqInsumos($value);
                break;
            case 32:
                $this->setReqHemoderiv($value);
                break;
            case 33:
                $this->setReqLaboratorio($value);
                break;
            case 34:
                $this->setReqAnestesico($value);
                break;
            case 35:
                $this->setStatus($value);
                break;
            case 36:
                $this->setCausaDiferidoId($value);
                break;
            case 37:
                $this->setSolicitado($value);
                break;
            case 38:
                $this->setRiesgoqxId($value);
                break;
            case 39:
                $this->setContaminacionqxId($value);
                break;
            case 40:
                $this->setEventoqxId($value);
                break;
            case 41:
                $this->setComplicaciones($value);
                break;
            case 42:
                $this->setValPreAnestesica($value);
                break;
            case 43:
                $this->setReintervencion($value);
                break;
            case 44:
                $this->setPermisos($value);
                break;
            case 45:
                $this->setTipoProcId($value);
                break;
            case 46:
                $this->setAtencionId($value);
                break;
            case 47:
                $this->setTiempoFuera($value);
                break;
            case 48:
                $this->setProcedencia($value);
                break;
            case 49:
                $this->setClasificacionqx($value);
                break;
            case 50:
                $this->setRegionPx($value);
                break;
            case 51:
                $this->setExtensionPx($value);
                break;
            case 52:
                $this->setAnexoDetalle($value);
                break;
            case 53:
                $this->setDestinoPx($value);
                break;
            case 54:
                $this->setLiberacionSala($value);
                break;
            case 55:
                $this->setTiempoEst($value);
                break;
            case 56:
                $this->setRiesgoQxPre($value);
                break;
            case 57:
                $this->setShowInIndex($value);
                break;
            case 58:
                $this->setProtocolo($value);
                break;
            case 59:
                $this->setCancelada($value);
                break;
            case 60:
                $this->setCreatedAt($value);
                break;
            case 61:
                $this->setUpdatedAt($value);
                break;
        } // switch()
    }

    /**
     * Populates the object using an array.
     *
     * This is particularly useful when populating an object from one of the
     * request arrays (e.g. $_POST).  This method goes through the column
     * names, checking to see whether a matching key exists in populated
     * array. If so the setByName() method is called for that column.
     *
     * You can specify the key type of the array by additionally passing one
     * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
     * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     * The default key type is the column's BasePeer::TYPE_PHPNAME
     *
     * @param array  $arr     An array to populate the object from.
     * @param string $keyType The type of keys the array uses.
     * @return void
     */
    public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
    {
        $keys = AgendaPeer::getFieldNames($keyType);

        if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
        if (array_key_exists($keys[1], $arr)) $this->setProgramacion($arr[$keys[1]]);
        if (array_key_exists($keys[2], $arr)) $this->setFechaestado($arr[$keys[2]]);
        if (array_key_exists($keys[3], $arr)) $this->setHora($arr[$keys[3]]);
        if (array_key_exists($keys[4], $arr)) $this->setHoraestado($arr[$keys[4]]);
        if (array_key_exists($keys[5], $arr)) $this->setInicio($arr[$keys[5]]);
        if (array_key_exists($keys[6], $arr)) $this->setLastTime($arr[$keys[6]]);
        if (array_key_exists($keys[7], $arr)) $this->setIngreso($arr[$keys[7]]);
        if (array_key_exists($keys[8], $arr)) $this->setSalaId($arr[$keys[8]]);
        if (array_key_exists($keys[9], $arr)) $this->setQuirofanoId($arr[$keys[9]]);
        if (array_key_exists($keys[10], $arr)) $this->setEgreso($arr[$keys[10]]);
        if (array_key_exists($keys[11], $arr)) $this->setCie9mc($arr[$keys[11]]);
        if (array_key_exists($keys[12], $arr)) $this->setCie9mcId($arr[$keys[12]]);
        if (array_key_exists($keys[13], $arr)) $this->setCxRealizada($arr[$keys[13]]);
        if (array_key_exists($keys[14], $arr)) $this->setCxRealizadaId($arr[$keys[14]]);
        if (array_key_exists($keys[15], $arr)) $this->setTipoCx($arr[$keys[15]]);
        if (array_key_exists($keys[16], $arr)) $this->setDiagnostico($arr[$keys[16]]);
        if (array_key_exists($keys[17], $arr)) $this->setDiagnosticoId($arr[$keys[17]]);
        if (array_key_exists($keys[18], $arr)) $this->setMedicoName($arr[$keys[18]]);
        if (array_key_exists($keys[19], $arr)) $this->setPacienteName($arr[$keys[19]]);
        if (array_key_exists($keys[20], $arr)) $this->setPacienteId($arr[$keys[20]]);
        if (array_key_exists($keys[21], $arr)) $this->setEdad($arr[$keys[21]]);
        if (array_key_exists($keys[22], $arr)) $this->setGenero($arr[$keys[22]]);
        if (array_key_exists($keys[23], $arr)) $this->setGeneroId($arr[$keys[23]]);
        if (array_key_exists($keys[24], $arr)) $this->setRegistro($arr[$keys[24]]);
        if (array_key_exists($keys[25], $arr)) $this->setServicio($arr[$keys[25]]);
        if (array_key_exists($keys[26], $arr)) $this->setAnestesiaId($arr[$keys[26]]);
        if (array_key_exists($keys[27], $arr)) $this->setAnestesiaEmpleada($arr[$keys[27]]);
        if (array_key_exists($keys[28], $arr)) $this->setEvAdversosAnestesia($arr[$keys[28]]);
        if (array_key_exists($keys[29], $arr)) $this->setObservaciones($arr[$keys[29]]);
        if (array_key_exists($keys[30], $arr)) $this->setRequerimiento($arr[$keys[30]]);
        if (array_key_exists($keys[31], $arr)) $this->setReqInsumos($arr[$keys[31]]);
        if (array_key_exists($keys[32], $arr)) $this->setReqHemoderiv($arr[$keys[32]]);
        if (array_key_exists($keys[33], $arr)) $this->setReqLaboratorio($arr[$keys[33]]);
        if (array_key_exists($keys[34], $arr)) $this->setReqAnestesico($arr[$keys[34]]);
        if (array_key_exists($keys[35], $arr)) $this->setStatus($arr[$keys[35]]);
        if (array_key_exists($keys[36], $arr)) $this->setCausaDiferidoId($arr[$keys[36]]);
        if (array_key_exists($keys[37], $arr)) $this->setSolicitado($arr[$keys[37]]);
        if (array_key_exists($keys[38], $arr)) $this->setRiesgoqxId($arr[$keys[38]]);
        if (array_key_exists($keys[39], $arr)) $this->setContaminacionqxId($arr[$keys[39]]);
        if (array_key_exists($keys[40], $arr)) $this->setEventoqxId($arr[$keys[40]]);
        if (array_key_exists($keys[41], $arr)) $this->setComplicaciones($arr[$keys[41]]);
        if (array_key_exists($keys[42], $arr)) $this->setValPreAnestesica($arr[$keys[42]]);
        if (array_key_exists($keys[43], $arr)) $this->setReintervencion($arr[$keys[43]]);
        if (array_key_exists($keys[44], $arr)) $this->setPermisos($arr[$keys[44]]);
        if (array_key_exists($keys[45], $arr)) $this->setTipoProcId($arr[$keys[45]]);
        if (array_key_exists($keys[46], $arr)) $this->setAtencionId($arr[$keys[46]]);
        if (array_key_exists($keys[47], $arr)) $this->setTiempoFuera($arr[$keys[47]]);
        if (array_key_exists($keys[48], $arr)) $this->setProcedencia($arr[$keys[48]]);
        if (array_key_exists($keys[49], $arr)) $this->setClasificacionqx($arr[$keys[49]]);
        if (array_key_exists($keys[50], $arr)) $this->setRegionPx($arr[$keys[50]]);
        if (array_key_exists($keys[51], $arr)) $this->setExtensionPx($arr[$keys[51]]);
        if (array_key_exists($keys[52], $arr)) $this->setAnexoDetalle($arr[$keys[52]]);
        if (array_key_exists($keys[53], $arr)) $this->setDestinoPx($arr[$keys[53]]);
        if (array_key_exists($keys[54], $arr)) $this->setLiberacionSala($arr[$keys[54]]);
        if (array_key_exists($keys[55], $arr)) $this->setTiempoEst($arr[$keys[55]]);
        if (array_key_exists($keys[56], $arr)) $this->setRiesgoQxPre($arr[$keys[56]]);
        if (array_key_exists($keys[57], $arr)) $this->setShowInIndex($arr[$keys[57]]);
        if (array_key_exists($keys[58], $arr)) $this->setProtocolo($arr[$keys[58]]);
        if (array_key_exists($keys[59], $arr)) $this->setCancelada($arr[$keys[59]]);
        if (array_key_exists($keys[60], $arr)) $this->setCreatedAt($arr[$keys[60]]);
        if (array_key_exists($keys[61], $arr)) $this->setUpdatedAt($arr[$keys[61]]);
    }

    /**
     * Build a Criteria object containing the values of all modified columns in this object.
     *
     * @return Criteria The Criteria object containing all modified values.
     */
    public function buildCriteria()
    {
        $criteria = new Criteria(AgendaPeer::DATABASE_NAME);

        if ($this->isColumnModified(AgendaPeer::ID)) $criteria->add(AgendaPeer::ID, $this->id);
        if ($this->isColumnModified(AgendaPeer::PROGRAMACION)) $criteria->add(AgendaPeer::PROGRAMACION, $this->programacion);
        if ($this->isColumnModified(AgendaPeer::FECHAESTADO)) $criteria->add(AgendaPeer::FECHAESTADO, $this->fechaestado);
        if ($this->isColumnModified(AgendaPeer::HORA)) $criteria->add(AgendaPeer::HORA, $this->hora);
        if ($this->isColumnModified(AgendaPeer::HORAESTADO)) $criteria->add(AgendaPeer::HORAESTADO, $this->horaestado);
        if ($this->isColumnModified(AgendaPeer::INICIO)) $criteria->add(AgendaPeer::INICIO, $this->inicio);
        if ($this->isColumnModified(AgendaPeer::LAST_TIME)) $criteria->add(AgendaPeer::LAST_TIME, $this->last_time);
        if ($this->isColumnModified(AgendaPeer::INGRESO)) $criteria->add(AgendaPeer::INGRESO, $this->ingreso);
        if ($this->isColumnModified(AgendaPeer::SALA_ID)) $criteria->add(AgendaPeer::SALA_ID, $this->sala_id);
        if ($this->isColumnModified(AgendaPeer::QUIROFANO_ID)) $criteria->add(AgendaPeer::QUIROFANO_ID, $this->quirofano_id);
        if ($this->isColumnModified(AgendaPeer::EGRESO)) $criteria->add(AgendaPeer::EGRESO, $this->egreso);
        if ($this->isColumnModified(AgendaPeer::CIE9MC)) $criteria->add(AgendaPeer::CIE9MC, $this->cie9mc);
        if ($this->isColumnModified(AgendaPeer::CIE9MC_ID)) $criteria->add(AgendaPeer::CIE9MC_ID, $this->cie9mc_id);
        if ($this->isColumnModified(AgendaPeer::CX_REALIZADA)) $criteria->add(AgendaPeer::CX_REALIZADA, $this->cx_realizada);
        if ($this->isColumnModified(AgendaPeer::CX_REALIZADA_ID)) $criteria->add(AgendaPeer::CX_REALIZADA_ID, $this->cx_realizada_id);
        if ($this->isColumnModified(AgendaPeer::TIPO_CX)) $criteria->add(AgendaPeer::TIPO_CX, $this->tipo_cx);
        if ($this->isColumnModified(AgendaPeer::DIAGNOSTICO)) $criteria->add(AgendaPeer::DIAGNOSTICO, $this->diagnostico);
        if ($this->isColumnModified(AgendaPeer::DIAGNOSTICO_ID)) $criteria->add(AgendaPeer::DIAGNOSTICO_ID, $this->diagnostico_id);
        if ($this->isColumnModified(AgendaPeer::MEDICO_NAME)) $criteria->add(AgendaPeer::MEDICO_NAME, $this->medico_name);
        if ($this->isColumnModified(AgendaPeer::PACIENTE_NAME)) $criteria->add(AgendaPeer::PACIENTE_NAME, $this->paciente_name);
        if ($this->isColumnModified(AgendaPeer::PACIENTE_ID)) $criteria->add(AgendaPeer::PACIENTE_ID, $this->paciente_id);
        if ($this->isColumnModified(AgendaPeer::EDAD)) $criteria->add(AgendaPeer::EDAD, $this->edad);
        if ($this->isColumnModified(AgendaPeer::GENERO)) $criteria->add(AgendaPeer::GENERO, $this->genero);
        if ($this->isColumnModified(AgendaPeer::GENERO_ID)) $criteria->add(AgendaPeer::GENERO_ID, $this->genero_id);
        if ($this->isColumnModified(AgendaPeer::REGISTRO)) $criteria->add(AgendaPeer::REGISTRO, $this->registro);
        if ($this->isColumnModified(AgendaPeer::SERVICIO)) $criteria->add(AgendaPeer::SERVICIO, $this->servicio);
        if ($this->isColumnModified(AgendaPeer::ANESTESIA_ID)) $criteria->add(AgendaPeer::ANESTESIA_ID, $this->anestesia_id);
        if ($this->isColumnModified(AgendaPeer::ANESTESIA_EMPLEADA)) $criteria->add(AgendaPeer::ANESTESIA_EMPLEADA, $this->anestesia_empleada);
        if ($this->isColumnModified(AgendaPeer::EV_ADVERSOS_ANESTESIA)) $criteria->add(AgendaPeer::EV_ADVERSOS_ANESTESIA, $this->ev_adversos_anestesia);
        if ($this->isColumnModified(AgendaPeer::OBSERVACIONES)) $criteria->add(AgendaPeer::OBSERVACIONES, $this->observaciones);
        if ($this->isColumnModified(AgendaPeer::REQUERIMIENTO)) $criteria->add(AgendaPeer::REQUERIMIENTO, $this->requerimiento);
        if ($this->isColumnModified(AgendaPeer::REQ_INSUMOS)) $criteria->add(AgendaPeer::REQ_INSUMOS, $this->req_insumos);
        if ($this->isColumnModified(AgendaPeer::REQ_HEMODERIV)) $criteria->add(AgendaPeer::REQ_HEMODERIV, $this->req_hemoderiv);
        if ($this->isColumnModified(AgendaPeer::REQ_LABORATORIO)) $criteria->add(AgendaPeer::REQ_LABORATORIO, $this->req_laboratorio);
        if ($this->isColumnModified(AgendaPeer::REQ_ANESTESICO)) $criteria->add(AgendaPeer::REQ_ANESTESICO, $this->req_anestesico);
        if ($this->isColumnModified(AgendaPeer::STATUS)) $criteria->add(AgendaPeer::STATUS, $this->status);
        if ($this->isColumnModified(AgendaPeer::CAUSA_DIFERIDO_ID)) $criteria->add(AgendaPeer::CAUSA_DIFERIDO_ID, $this->causa_diferido_id);
        if ($this->isColumnModified(AgendaPeer::SOLICITADO)) $criteria->add(AgendaPeer::SOLICITADO, $this->solicitado);
        if ($this->isColumnModified(AgendaPeer::RIESGOQX_ID)) $criteria->add(AgendaPeer::RIESGOQX_ID, $this->riesgoqx_id);
        if ($this->isColumnModified(AgendaPeer::CONTAMINACIONQX_ID)) $criteria->add(AgendaPeer::CONTAMINACIONQX_ID, $this->contaminacionqx_id);
        if ($this->isColumnModified(AgendaPeer::EVENTOQX_ID)) $criteria->add(AgendaPeer::EVENTOQX_ID, $this->eventoqx_id);
        if ($this->isColumnModified(AgendaPeer::COMPLICACIONES)) $criteria->add(AgendaPeer::COMPLICACIONES, $this->complicaciones);
        if ($this->isColumnModified(AgendaPeer::VAL_PRE_ANESTESICA)) $criteria->add(AgendaPeer::VAL_PRE_ANESTESICA, $this->val_pre_anestesica);
        if ($this->isColumnModified(AgendaPeer::REINTERVENCION)) $criteria->add(AgendaPeer::REINTERVENCION, $this->reintervencion);
        if ($this->isColumnModified(AgendaPeer::PERMISOS)) $criteria->add(AgendaPeer::PERMISOS, $this->permisos);
        if ($this->isColumnModified(AgendaPeer::TIPO_PROC_ID)) $criteria->add(AgendaPeer::TIPO_PROC_ID, $this->tipo_proc_id);
        if ($this->isColumnModified(AgendaPeer::ATENCION_ID)) $criteria->add(AgendaPeer::ATENCION_ID, $this->atencion_id);
        if ($this->isColumnModified(AgendaPeer::TIEMPO_FUERA)) $criteria->add(AgendaPeer::TIEMPO_FUERA, $this->tiempo_fuera);
        if ($this->isColumnModified(AgendaPeer::PROCEDENCIA)) $criteria->add(AgendaPeer::PROCEDENCIA, $this->procedencia);
        if ($this->isColumnModified(AgendaPeer::CLASIFICACIONQX)) $criteria->add(AgendaPeer::CLASIFICACIONQX, $this->clasificacionqx);
        if ($this->isColumnModified(AgendaPeer::REGION_PX)) $criteria->add(AgendaPeer::REGION_PX, $this->region_px);
        if ($this->isColumnModified(AgendaPeer::EXTENSION_PX)) $criteria->add(AgendaPeer::EXTENSION_PX, $this->extension_px);
        if ($this->isColumnModified(AgendaPeer::ANEXO_DETALLE)) $criteria->add(AgendaPeer::ANEXO_DETALLE, $this->anexo_detalle);
        if ($this->isColumnModified(AgendaPeer::DESTINO_PX)) $criteria->add(AgendaPeer::DESTINO_PX, $this->destino_px);
        if ($this->isColumnModified(AgendaPeer::LIBERACION_SALA)) $criteria->add(AgendaPeer::LIBERACION_SALA, $this->liberacion_sala);
        if ($this->isColumnModified(AgendaPeer::TIEMPO_EST)) $criteria->add(AgendaPeer::TIEMPO_EST, $this->tiempo_est);
        if ($this->isColumnModified(AgendaPeer::RIESGO_QX_PRE)) $criteria->add(AgendaPeer::RIESGO_QX_PRE, $this->riesgo_qx_pre);
        if ($this->isColumnModified(AgendaPeer::SHOW_IN_INDEX)) $criteria->add(AgendaPeer::SHOW_IN_INDEX, $this->show_in_index);
        if ($this->isColumnModified(AgendaPeer::PROTOCOLO)) $criteria->add(AgendaPeer::PROTOCOLO, $this->protocolo);
        if ($this->isColumnModified(AgendaPeer::CANCELADA)) $criteria->add(AgendaPeer::CANCELADA, $this->cancelada);
        if ($this->isColumnModified(AgendaPeer::CREATED_AT)) $criteria->add(AgendaPeer::CREATED_AT, $this->created_at);
        if ($this->isColumnModified(AgendaPeer::UPDATED_AT)) $criteria->add(AgendaPeer::UPDATED_AT, $this->updated_at);

        return $criteria;
    }

    /**
     * Builds a Criteria object containing the primary key for this object.
     *
     * Unlike buildCriteria() this method includes the primary key values regardless
     * of whether or not they have been modified.
     *
     * @return Criteria The Criteria object containing value(s) for primary key(s).
     */
    public function buildPkeyCriteria()
    {
        $criteria = new Criteria(AgendaPeer::DATABASE_NAME);
        $criteria->add(AgendaPeer::ID, $this->id);

        return $criteria;
    }

    /**
     * Returns the primary key for this object (row).
     * @return int
     */
    public function getPrimaryKey()
    {
        return $this->getId();
    }

    /**
     * Generic method to set the primary key (id column).
     *
     * @param  int $key Primary key.
     * @return void
     */
    public function setPrimaryKey($key)
    {
        $this->setId($key);
    }

    /**
     * Returns true if the primary key for this object is null.
     * @return boolean
     */
    public function isPrimaryKeyNull()
    {

        return null === $this->getId();
    }

    /**
     * Sets contents of passed object to values from current object.
     *
     * If desired, this method can also make copies of all associated (fkey referrers)
     * objects.
     *
     * @param object $copyObj An object of Agenda (or compatible) type.
     * @param boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
     * @param boolean $makeNew Whether to reset autoincrement PKs and make the object new.
     * @throws PropelException
     */
    public function copyInto($copyObj, $deepCopy = false, $makeNew = true)
    {
        $copyObj->setProgramacion($this->getProgramacion());
        $copyObj->setFechaestado($this->getFechaestado());
        $copyObj->setHora($this->getHora());
        $copyObj->setHoraestado($this->getHoraestado());
        $copyObj->setInicio($this->getInicio());
        $copyObj->setLastTime($this->getLastTime());
        $copyObj->setIngreso($this->getIngreso());
        $copyObj->setSalaId($this->getSalaId());
        $copyObj->setQuirofanoId($this->getQuirofanoId());
        $copyObj->setEgreso($this->getEgreso());
        $copyObj->setCie9mc($this->getCie9mc());
        $copyObj->setCie9mcId($this->getCie9mcId());
        $copyObj->setCxRealizada($this->getCxRealizada());
        $copyObj->setCxRealizadaId($this->getCxRealizadaId());
        $copyObj->setTipoCx($this->getTipoCx());
        $copyObj->setDiagnostico($this->getDiagnostico());
        $copyObj->setDiagnosticoId($this->getDiagnosticoId());
        $copyObj->setMedicoName($this->getMedicoName());
        $copyObj->setPacienteName($this->getPacienteName());
        $copyObj->setPacienteId($this->getPacienteId());
        $copyObj->setEdad($this->getEdad());
        $copyObj->setGenero($this->getGenero());
        $copyObj->setGeneroId($this->getGeneroId());
        $copyObj->setRegistro($this->getRegistro());
        $copyObj->setServicio($this->getServicio());
        $copyObj->setAnestesiaId($this->getAnestesiaId());
        $copyObj->setAnestesiaEmpleada($this->getAnestesiaEmpleada());
        $copyObj->setEvAdversosAnestesia($this->getEvAdversosAnestesia());
        $copyObj->setObservaciones($this->getObservaciones());
        $copyObj->setRequerimiento($this->getRequerimiento());
        $copyObj->setReqInsumos($this->getReqInsumos());
        $copyObj->setReqHemoderiv($this->getReqHemoderiv());
        $copyObj->setReqLaboratorio($this->getReqLaboratorio());
        $copyObj->setReqAnestesico($this->getReqAnestesico());
        $copyObj->setStatus($this->getStatus());
        $copyObj->setCausaDiferidoId($this->getCausaDiferidoId());
        $copyObj->setSolicitado($this->getSolicitado());
        $copyObj->setRiesgoqxId($this->getRiesgoqxId());
        $copyObj->setContaminacionqxId($this->getContaminacionqxId());
        $copyObj->setEventoqxId($this->getEventoqxId());
        $copyObj->setComplicaciones($this->getComplicaciones());
        $copyObj->setValPreAnestesica($this->getValPreAnestesica());
        $copyObj->setReintervencion($this->getReintervencion());
        $copyObj->setPermisos($this->getPermisos());
        $copyObj->setTipoProcId($this->getTipoProcId());
        $copyObj->setAtencionId($this->getAtencionId());
        $copyObj->setTiempoFuera($this->getTiempoFuera());
        $copyObj->setProcedencia($this->getProcedencia());
        $copyObj->setClasificacionqx($this->getClasificacionqx());
        $copyObj->setRegionPx($this->getRegionPx());
        $copyObj->setExtensionPx($this->getExtensionPx());
        $copyObj->setAnexoDetalle($this->getAnexoDetalle());
        $copyObj->setDestinoPx($this->getDestinoPx());
        $copyObj->setLiberacionSala($this->getLiberacionSala());
        $copyObj->setTiempoEst($this->getTiempoEst());
        $copyObj->setRiesgoQxPre($this->getRiesgoQxPre());
        $copyObj->setShowInIndex($this->getShowInIndex());
        $copyObj->setProtocolo($this->getProtocolo());
        $copyObj->setCancelada($this->getCancelada());
        $copyObj->setCreatedAt($this->getCreatedAt());
        $copyObj->setUpdatedAt($this->getUpdatedAt());

        if ($deepCopy && !$this->startCopy) {
            // important: temporarily setNew(false) because this affects the behavior of
            // the getter/setter methods for fkey referrer objects.
            $copyObj->setNew(false);
            // store object hash to prevent cycle
            $this->startCopy = true;

            foreach ($this->getPersonalcirugias() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addPersonalcirugia($relObj->copy($deepCopy));
                }
            }

            foreach ($this->getDiagnosticocirugias() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addDiagnosticocirugia($relObj->copy($deepCopy));
                }
            }

            foreach ($this->getProcedimientocirugias() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addProcedimientocirugia($relObj->copy($deepCopy));
                }
            }

            foreach ($this->getProcedimientregrogramados() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addProcedimientregrogramado($relObj->copy($deepCopy));
                }
            }

            //unflag object copy
            $this->startCopy = false;
        } // if ($deepCopy)

        if ($makeNew) {
            $copyObj->setNew(true);
            $copyObj->setId(NULL); // this is a auto-increment column, so set to default value
        }
    }

    /**
     * Makes a copy of this object that will be inserted as a new row in table when saved.
     * It creates a new object filling in the simple attributes, but skipping any primary
     * keys that are defined for the table.
     *
     * If desired, this method can also make copies of all associated (fkey referrers)
     * objects.
     *
     * @param boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
     * @return Agenda Clone of current object.
     * @throws PropelException
     */
    public function copy($deepCopy = false)
    {
        // we use get_class(), because this might be a subclass
        $clazz = get_class($this);
        $copyObj = new $clazz();
        $this->copyInto($copyObj, $deepCopy);

        return $copyObj;
    }

    /**
     * Returns a peer instance associated with this om.
     *
     * Since Peer classes are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     *
     * @return AgendaPeer
     */
    public function getPeer()
    {
        if (self::$peer === null) {
            self::$peer = new AgendaPeer();
        }

        return self::$peer;
    }

    /**
     * Declares an association between this object and a Salaquirurgica object.
     *
     * @param             Salaquirurgica $v
     * @return Agenda The current object (for fluent API support)
     * @throws PropelException
     */
    public function setSalaquirurgica(Salaquirurgica $v = null)
    {
        if ($v === null) {
            $this->setSalaId(NULL);
        } else {
            $this->setSalaId($v->getId());
        }

        $this->aSalaquirurgica = $v;

        // Add binding for other direction of this n:n relationship.
        // If this object has already been added to the Salaquirurgica object, it will not be re-added.
        if ($v !== null) {
            $v->addAgenda($this);
        }


        return $this;
    }


    /**
     * Get the associated Salaquirurgica object
     *
     * @param PropelPDO $con Optional Connection object.
     * @return Salaquirurgica The associated Salaquirurgica object.
     * @throws PropelException
     */
    public function getSalaquirurgica(PropelPDO $con = null)
    {
        if ($this->aSalaquirurgica === null && ($this->sala_id !== null)) {
            $this->aSalaquirurgica = SalaquirurgicaQuery::create()->findPk($this->sala_id, $con);
            /* The following can be used additionally to
                guarantee the related object contains a reference
                to this object.  This level of coupling may, however, be
                undesirable since it could result in an only partially populated collection
                in the referenced object.
                $this->aSalaquirurgica->addAgendas($this);
             */
        }

        return $this->aSalaquirurgica;
    }

    /**
     * Declares an association between this object and a Quirofano object.
     *
     * @param             Quirofano $v
     * @return Agenda The current object (for fluent API support)
     * @throws PropelException
     */
    public function setQuirofano(Quirofano $v = null)
    {
        if ($v === null) {
            $this->setQuirofanoId(NULL);
        } else {
            $this->setQuirofanoId($v->getId());
        }

        $this->aQuirofano = $v;

        // Add binding for other direction of this n:n relationship.
        // If this object has already been added to the Quirofano object, it will not be re-added.
        if ($v !== null) {
            $v->addAgenda($this);
        }


        return $this;
    }


    /**
     * Get the associated Quirofano object
     *
     * @param PropelPDO $con Optional Connection object.
     * @return Quirofano The associated Quirofano object.
     * @throws PropelException
     */
    public function getQuirofano(PropelPDO $con = null)
    {
        if ($this->aQuirofano === null && ($this->quirofano_id !== null)) {
            $this->aQuirofano = QuirofanoQuery::create()->findPk($this->quirofano_id, $con);
            /* The following can be used additionally to
                guarantee the related object contains a reference
                to this object.  This level of coupling may, however, be
                undesirable since it could result in an only partially populated collection
                in the referenced object.
                $this->aQuirofano->addAgendas($this);
             */
        }

        return $this->aQuirofano;
    }

    /**
     * Declares an association between this object and a Riesgoqx object.
     *
     * @param             Riesgoqx $v
     * @return Agenda The current object (for fluent API support)
     * @throws PropelException
     */
    public function setRiesgoqx(Riesgoqx $v = null)
    {
        if ($v === null) {
            $this->setRiesgoqxId(NULL);
        } else {
            $this->setRiesgoqxId($v->getId());
        }

        $this->aRiesgoqx = $v;

        // Add binding for other direction of this n:n relationship.
        // If this object has already been added to the Riesgoqx object, it will not be re-added.
        if ($v !== null) {
            $v->addAgenda($this);
        }


        return $this;
    }


    /**
     * Get the associated Riesgoqx object
     *
     * @param PropelPDO $con Optional Connection object.
     * @return Riesgoqx The associated Riesgoqx object.
     * @throws PropelException
     */
    public function getRiesgoqx(PropelPDO $con = null)
    {
        if ($this->aRiesgoqx === null && ($this->riesgoqx_id !== null)) {
            $this->aRiesgoqx = RiesgoqxQuery::create()->findPk($this->riesgoqx_id, $con);
            /* The following can be used additionally to
                guarantee the related object contains a reference
                to this object.  This level of coupling may, however, be
                undesirable since it could result in an only partially populated collection
                in the referenced object.
                $this->aRiesgoqx->addAgendas($this);
             */
        }

        return $this->aRiesgoqx;
    }

    /**
     * Declares an association between this object and a Contaminacionqx object.
     *
     * @param             Contaminacionqx $v
     * @return Agenda The current object (for fluent API support)
     * @throws PropelException
     */
    public function setContaminacionqx(Contaminacionqx $v = null)
    {
        if ($v === null) {
            $this->setContaminacionqxId(NULL);
        } else {
            $this->setContaminacionqxId($v->getId());
        }

        $this->aContaminacionqx = $v;

        // Add binding for other direction of this n:n relationship.
        // If this object has already been added to the Contaminacionqx object, it will not be re-added.
        if ($v !== null) {
            $v->addAgenda($this);
        }


        return $this;
    }


    /**
     * Get the associated Contaminacionqx object
     *
     * @param PropelPDO $con Optional Connection object.
     * @return Contaminacionqx The associated Contaminacionqx object.
     * @throws PropelException
     */
    public function getContaminacionqx(PropelPDO $con = null)
    {
        if ($this->aContaminacionqx === null && ($this->contaminacionqx_id !== null)) {
            $this->aContaminacionqx = ContaminacionqxQuery::create()->findPk($this->contaminacionqx_id, $con);
            /* The following can be used additionally to
                guarantee the related object contains a reference
                to this object.  This level of coupling may, however, be
                undesirable since it could result in an only partially populated collection
                in the referenced object.
                $this->aContaminacionqx->addAgendas($this);
             */
        }

        return $this->aContaminacionqx;
    }

    /**
     * Declares an association between this object and a Eventoqx object.
     *
     * @param             Eventoqx $v
     * @return Agenda The current object (for fluent API support)
     * @throws PropelException
     */
    public function setEventoqx(Eventoqx $v = null)
    {
        if ($v === null) {
            $this->setEventoqxId(NULL);
        } else {
            $this->setEventoqxId($v->getId());
        }

        $this->aEventoqx = $v;

        // Add binding for other direction of this n:n relationship.
        // If this object has already been added to the Eventoqx object, it will not be re-added.
        if ($v !== null) {
            $v->addAgenda($this);
        }


        return $this;
    }


    /**
     * Get the associated Eventoqx object
     *
     * @param PropelPDO $con Optional Connection object.
     * @return Eventoqx The associated Eventoqx object.
     * @throws PropelException
     */
    public function getEventoqx(PropelPDO $con = null)
    {
        if ($this->aEventoqx === null && ($this->eventoqx_id !== null)) {
            $this->aEventoqx = EventoqxQuery::create()->findPk($this->eventoqx_id, $con);
            /* The following can be used additionally to
                guarantee the related object contains a reference
                to this object.  This level of coupling may, however, be
                undesirable since it could result in an only partially populated collection
                in the referenced object.
                $this->aEventoqx->addAgendas($this);
             */
        }

        return $this->aEventoqx;
    }

    /**
     * Declares an association between this object and a Procedimiento object.
     *
     * @param             Procedimiento $v
     * @return Agenda The current object (for fluent API support)
     * @throws PropelException
     */
    public function setProcedimiento(Procedimiento $v = null)
    {
        if ($v === null) {
            $this->setTipoProcId(NULL);
        } else {
            $this->setTipoProcId($v->getId());
        }

        $this->aProcedimiento = $v;

        // Add binding for other direction of this n:n relationship.
        // If this object has already been added to the Procedimiento object, it will not be re-added.
        if ($v !== null) {
            $v->addAgenda($this);
        }


        return $this;
    }


    /**
     * Get the associated Procedimiento object
     *
     * @param PropelPDO $con Optional Connection object.
     * @return Procedimiento The associated Procedimiento object.
     * @throws PropelException
     */
    public function getProcedimiento(PropelPDO $con = null)
    {
        if ($this->aProcedimiento === null && ($this->tipo_proc_id !== null)) {
            $this->aProcedimiento = ProcedimientoQuery::create()->findPk($this->tipo_proc_id, $con);
            /* The following can be used additionally to
                guarantee the related object contains a reference
                to this object.  This level of coupling may, however, be
                undesirable since it could result in an only partially populated collection
                in the referenced object.
                $this->aProcedimiento->addAgendas($this);
             */
        }

        return $this->aProcedimiento;
    }

    /**
     * Declares an association between this object and a Causadiferido object.
     *
     * @param             Causadiferido $v
     * @return Agenda The current object (for fluent API support)
     * @throws PropelException
     */
    public function setCausadiferido(Causadiferido $v = null)
    {
        if ($v === null) {
            $this->setCausaDiferidoId(NULL);
        } else {
            $this->setCausaDiferidoId($v->getId());
        }

        $this->aCausadiferido = $v;

        // Add binding for other direction of this n:n relationship.
        // If this object has already been added to the Causadiferido object, it will not be re-added.
        if ($v !== null) {
            $v->addAgenda($this);
        }


        return $this;
    }


    /**
     * Get the associated Causadiferido object
     *
     * @param PropelPDO $con Optional Connection object.
     * @return Causadiferido The associated Causadiferido object.
     * @throws PropelException
     */
    public function getCausadiferido(PropelPDO $con = null)
    {
        if ($this->aCausadiferido === null && ($this->causa_diferido_id !== null)) {
            $this->aCausadiferido = CausadiferidoQuery::create()->findPk($this->causa_diferido_id, $con);
            /* The following can be used additionally to
                guarantee the related object contains a reference
                to this object.  This level of coupling may, however, be
                undesirable since it could result in an only partially populated collection
                in the referenced object.
                $this->aCausadiferido->addAgendas($this);
             */
        }

        return $this->aCausadiferido;
    }

    /**
     * Declares an association between this object and a Atencion object.
     *
     * @param             Atencion $v
     * @return Agenda The current object (for fluent API support)
     * @throws PropelException
     */
    public function setAtencion(Atencion $v = null)
    {
        if ($v === null) {
            $this->setAtencionId(NULL);
        } else {
            $this->setAtencionId($v->getId());
        }

        $this->aAtencion = $v;

        // Add binding for other direction of this n:n relationship.
        // If this object has already been added to the Atencion object, it will not be re-added.
        if ($v !== null) {
            $v->addAgenda($this);
        }


        return $this;
    }


    /**
     * Get the associated Atencion object
     *
     * @param PropelPDO $con Optional Connection object.
     * @return Atencion The associated Atencion object.
     * @throws PropelException
     */
    public function getAtencion(PropelPDO $con = null)
    {
        if ($this->aAtencion === null && ($this->atencion_id !== null)) {
            $this->aAtencion = AtencionQuery::create()->findPk($this->atencion_id, $con);
            /* The following can be used additionally to
                guarantee the related object contains a reference
                to this object.  This level of coupling may, however, be
                undesirable since it could result in an only partially populated collection
                in the referenced object.
                $this->aAtencion->addAgendas($this);
             */
        }

        return $this->aAtencion;
    }

    /**
     * Declares an association between this object and a Especialidad object.
     *
     * @param             Especialidad $v
     * @return Agenda The current object (for fluent API support)
     * @throws PropelException
     */
    public function setEspecialidad(Especialidad $v = null)
    {
        if ($v === null) {
            $this->setServicio(NULL);
        } else {
            $this->setServicio($v->getId());
        }

        $this->aEspecialidad = $v;

        // Add binding for other direction of this n:n relationship.
        // If this object has already been added to the Especialidad object, it will not be re-added.
        if ($v !== null) {
            $v->addAgenda($this);
        }


        return $this;
    }


    /**
     * Get the associated Especialidad object
     *
     * @param PropelPDO $con Optional Connection object.
     * @return Especialidad The associated Especialidad object.
     * @throws PropelException
     */
    public function getEspecialidad(PropelPDO $con = null)
    {
        if ($this->aEspecialidad === null && ($this->servicio !== null)) {
            $this->aEspecialidad = EspecialidadQuery::create()->findPk($this->servicio, $con);
            /* The following can be used additionally to
                guarantee the related object contains a reference
                to this object.  This level of coupling may, however, be
                undesirable since it could result in an only partially populated collection
                in the referenced object.
                $this->aEspecialidad->addAgendas($this);
             */
        }

        return $this->aEspecialidad;
    }


    /**
     * Initializes a collection based on the name of a relation.
     * Avoids crafting an 'init[$relationName]s' method name
     * that wouldn't work when StandardEnglishPluralizer is used.
     *
     * @param string $relationName The name of the relation to initialize
     * @return void
     */
    public function initRelation($relationName)
    {
        if ('Personalcirugia' == $relationName) {
            $this->initPersonalcirugias();
        }
        if ('Diagnosticocirugia' == $relationName) {
            $this->initDiagnosticocirugias();
        }
        if ('Procedimientocirugia' == $relationName) {
            $this->initProcedimientocirugias();
        }
        if ('Procedimientregrogramado' == $relationName) {
            $this->initProcedimientregrogramados();
        }
    }

    /**
     * Clears out the collPersonalcirugias collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return void
     * @see        addPersonalcirugias()
     */
    public function clearPersonalcirugias()
    {
        $this->collPersonalcirugias = null; // important to set this to null since that means it is uninitialized
        $this->collPersonalcirugiasPartial = null;
    }

    /**
     * reset is the collPersonalcirugias collection loaded partially
     *
     * @return void
     */
    public function resetPartialPersonalcirugias($v = true)
    {
        $this->collPersonalcirugiasPartial = $v;
    }

    /**
     * Initializes the collPersonalcirugias collection.
     *
     * By default this just sets the collPersonalcirugias collection to an empty array (like clearcollPersonalcirugias());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initPersonalcirugias($overrideExisting = true)
    {
        if (null !== $this->collPersonalcirugias && !$overrideExisting) {
            return;
        }
        $this->collPersonalcirugias = new PropelObjectCollection();
        $this->collPersonalcirugias->setModel('Personalcirugia');
    }

    /**
     * Gets an array of Personalcirugia objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this Agenda is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|Personalcirugia[] List of Personalcirugia objects
     * @throws PropelException
     */
    public function getPersonalcirugias($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collPersonalcirugiasPartial && !$this->isNew();
        if (null === $this->collPersonalcirugias || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collPersonalcirugias) {
                // return empty collection
                $this->initPersonalcirugias();
            } else {
                $collPersonalcirugias = PersonalcirugiaQuery::create(null, $criteria)
                    ->filterByAgenda($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collPersonalcirugiasPartial && count($collPersonalcirugias)) {
                      $this->initPersonalcirugias(false);

                      foreach($collPersonalcirugias as $obj) {
                        if (false == $this->collPersonalcirugias->contains($obj)) {
                          $this->collPersonalcirugias->append($obj);
                        }
                      }

                      $this->collPersonalcirugiasPartial = true;
                    }

                    return $collPersonalcirugias;
                }

                if($partial && $this->collPersonalcirugias) {
                    foreach($this->collPersonalcirugias as $obj) {
                        if($obj->isNew()) {
                            $collPersonalcirugias[] = $obj;
                        }
                    }
                }

                $this->collPersonalcirugias = $collPersonalcirugias;
                $this->collPersonalcirugiasPartial = false;
            }
        }

        return $this->collPersonalcirugias;
    }

    /**
     * Sets a collection of Personalcirugia objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $personalcirugias A Propel collection.
     * @param PropelPDO $con Optional connection object
     */
    public function setPersonalcirugias(PropelCollection $personalcirugias, PropelPDO $con = null)
    {
        $this->personalcirugiasScheduledForDeletion = $this->getPersonalcirugias(new Criteria(), $con)->diff($personalcirugias);

        foreach ($this->personalcirugiasScheduledForDeletion as $personalcirugiaRemoved) {
            $personalcirugiaRemoved->setAgenda(null);
        }

        $this->collPersonalcirugias = null;
        foreach ($personalcirugias as $personalcirugia) {
            $this->addPersonalcirugia($personalcirugia);
        }

        $this->collPersonalcirugias = $personalcirugias;
        $this->collPersonalcirugiasPartial = false;
    }

    /**
     * Returns the number of related Personalcirugia objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related Personalcirugia objects.
     * @throws PropelException
     */
    public function countPersonalcirugias(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collPersonalcirugiasPartial && !$this->isNew();
        if (null === $this->collPersonalcirugias || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collPersonalcirugias) {
                return 0;
            } else {
                if($partial && !$criteria) {
                    return count($this->getPersonalcirugias());
                }
                $query = PersonalcirugiaQuery::create(null, $criteria);
                if ($distinct) {
                    $query->distinct();
                }

                return $query
                    ->filterByAgenda($this)
                    ->count($con);
            }
        } else {
            return count($this->collPersonalcirugias);
        }
    }

    /**
     * Method called to associate a Personalcirugia object to this object
     * through the Personalcirugia foreign key attribute.
     *
     * @param    Personalcirugia $l Personalcirugia
     * @return Agenda The current object (for fluent API support)
     */
    public function addPersonalcirugia(Personalcirugia $l)
    {
        if ($this->collPersonalcirugias === null) {
            $this->initPersonalcirugias();
            $this->collPersonalcirugiasPartial = true;
        }
        if (!$this->collPersonalcirugias->contains($l)) { // only add it if the **same** object is not already associated
            $this->doAddPersonalcirugia($l);
        }

        return $this;
    }

    /**
     * @param	Personalcirugia $personalcirugia The personalcirugia object to add.
     */
    protected function doAddPersonalcirugia($personalcirugia)
    {
        $this->collPersonalcirugias[]= $personalcirugia;
        $personalcirugia->setAgenda($this);
    }

    /**
     * @param	Personalcirugia $personalcirugia The personalcirugia object to remove.
     */
    public function removePersonalcirugia($personalcirugia)
    {
        if ($this->getPersonalcirugias()->contains($personalcirugia)) {
            $this->collPersonalcirugias->remove($this->collPersonalcirugias->search($personalcirugia));
            if (null === $this->personalcirugiasScheduledForDeletion) {
                $this->personalcirugiasScheduledForDeletion = clone $this->collPersonalcirugias;
                $this->personalcirugiasScheduledForDeletion->clear();
            }
            $this->personalcirugiasScheduledForDeletion[]= $personalcirugia;
            $personalcirugia->setAgenda(null);
        }
    }


    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Agenda is new, it will return
     * an empty collection; or if this Agenda has previously
     * been saved, it will retrieve related Personalcirugias from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Agenda.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @param string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
     * @return PropelObjectCollection|Personalcirugia[] List of Personalcirugia objects
     */
    public function getPersonalcirugiasJoinsfGuardUser($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
    {
        $query = PersonalcirugiaQuery::create(null, $criteria);
        $query->joinWith('sfGuardUser', $join_behavior);

        return $this->getPersonalcirugias($query, $con);
    }

    /**
     * Clears out the collDiagnosticocirugias collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return void
     * @see        addDiagnosticocirugias()
     */
    public function clearDiagnosticocirugias()
    {
        $this->collDiagnosticocirugias = null; // important to set this to null since that means it is uninitialized
        $this->collDiagnosticocirugiasPartial = null;
    }

    /**
     * reset is the collDiagnosticocirugias collection loaded partially
     *
     * @return void
     */
    public function resetPartialDiagnosticocirugias($v = true)
    {
        $this->collDiagnosticocirugiasPartial = $v;
    }

    /**
     * Initializes the collDiagnosticocirugias collection.
     *
     * By default this just sets the collDiagnosticocirugias collection to an empty array (like clearcollDiagnosticocirugias());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initDiagnosticocirugias($overrideExisting = true)
    {
        if (null !== $this->collDiagnosticocirugias && !$overrideExisting) {
            return;
        }
        $this->collDiagnosticocirugias = new PropelObjectCollection();
        $this->collDiagnosticocirugias->setModel('Diagnosticocirugia');
    }

    /**
     * Gets an array of Diagnosticocirugia objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this Agenda is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|Diagnosticocirugia[] List of Diagnosticocirugia objects
     * @throws PropelException
     */
    public function getDiagnosticocirugias($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collDiagnosticocirugiasPartial && !$this->isNew();
        if (null === $this->collDiagnosticocirugias || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collDiagnosticocirugias) {
                // return empty collection
                $this->initDiagnosticocirugias();
            } else {
                $collDiagnosticocirugias = DiagnosticocirugiaQuery::create(null, $criteria)
                    ->filterByAgenda($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collDiagnosticocirugiasPartial && count($collDiagnosticocirugias)) {
                      $this->initDiagnosticocirugias(false);

                      foreach($collDiagnosticocirugias as $obj) {
                        if (false == $this->collDiagnosticocirugias->contains($obj)) {
                          $this->collDiagnosticocirugias->append($obj);
                        }
                      }

                      $this->collDiagnosticocirugiasPartial = true;
                    }

                    return $collDiagnosticocirugias;
                }

                if($partial && $this->collDiagnosticocirugias) {
                    foreach($this->collDiagnosticocirugias as $obj) {
                        if($obj->isNew()) {
                            $collDiagnosticocirugias[] = $obj;
                        }
                    }
                }

                $this->collDiagnosticocirugias = $collDiagnosticocirugias;
                $this->collDiagnosticocirugiasPartial = false;
            }
        }

        return $this->collDiagnosticocirugias;
    }

    /**
     * Sets a collection of Diagnosticocirugia objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $diagnosticocirugias A Propel collection.
     * @param PropelPDO $con Optional connection object
     */
    public function setDiagnosticocirugias(PropelCollection $diagnosticocirugias, PropelPDO $con = null)
    {
        $this->diagnosticocirugiasScheduledForDeletion = $this->getDiagnosticocirugias(new Criteria(), $con)->diff($diagnosticocirugias);

        foreach ($this->diagnosticocirugiasScheduledForDeletion as $diagnosticocirugiaRemoved) {
            $diagnosticocirugiaRemoved->setAgenda(null);
        }

        $this->collDiagnosticocirugias = null;
        foreach ($diagnosticocirugias as $diagnosticocirugia) {
            $this->addDiagnosticocirugia($diagnosticocirugia);
        }

        $this->collDiagnosticocirugias = $diagnosticocirugias;
        $this->collDiagnosticocirugiasPartial = false;
    }

    /**
     * Returns the number of related Diagnosticocirugia objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related Diagnosticocirugia objects.
     * @throws PropelException
     */
    public function countDiagnosticocirugias(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collDiagnosticocirugiasPartial && !$this->isNew();
        if (null === $this->collDiagnosticocirugias || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collDiagnosticocirugias) {
                return 0;
            } else {
                if($partial && !$criteria) {
                    return count($this->getDiagnosticocirugias());
                }
                $query = DiagnosticocirugiaQuery::create(null, $criteria);
                if ($distinct) {
                    $query->distinct();
                }

                return $query
                    ->filterByAgenda($this)
                    ->count($con);
            }
        } else {
            return count($this->collDiagnosticocirugias);
        }
    }

    /**
     * Method called to associate a Diagnosticocirugia object to this object
     * through the Diagnosticocirugia foreign key attribute.
     *
     * @param    Diagnosticocirugia $l Diagnosticocirugia
     * @return Agenda The current object (for fluent API support)
     */
    public function addDiagnosticocirugia(Diagnosticocirugia $l)
    {
        if ($this->collDiagnosticocirugias === null) {
            $this->initDiagnosticocirugias();
            $this->collDiagnosticocirugiasPartial = true;
        }
        if (!$this->collDiagnosticocirugias->contains($l)) { // only add it if the **same** object is not already associated
            $this->doAddDiagnosticocirugia($l);
        }

        return $this;
    }

    /**
     * @param	Diagnosticocirugia $diagnosticocirugia The diagnosticocirugia object to add.
     */
    protected function doAddDiagnosticocirugia($diagnosticocirugia)
    {
        $this->collDiagnosticocirugias[]= $diagnosticocirugia;
        $diagnosticocirugia->setAgenda($this);
    }

    /**
     * @param	Diagnosticocirugia $diagnosticocirugia The diagnosticocirugia object to remove.
     */
    public function removeDiagnosticocirugia($diagnosticocirugia)
    {
        if ($this->getDiagnosticocirugias()->contains($diagnosticocirugia)) {
            $this->collDiagnosticocirugias->remove($this->collDiagnosticocirugias->search($diagnosticocirugia));
            if (null === $this->diagnosticocirugiasScheduledForDeletion) {
                $this->diagnosticocirugiasScheduledForDeletion = clone $this->collDiagnosticocirugias;
                $this->diagnosticocirugiasScheduledForDeletion->clear();
            }
            $this->diagnosticocirugiasScheduledForDeletion[]= $diagnosticocirugia;
            $diagnosticocirugia->setAgenda(null);
        }
    }

    /**
     * Clears out the collProcedimientocirugias collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return void
     * @see        addProcedimientocirugias()
     */
    public function clearProcedimientocirugias()
    {
        $this->collProcedimientocirugias = null; // important to set this to null since that means it is uninitialized
        $this->collProcedimientocirugiasPartial = null;
    }

    /**
     * reset is the collProcedimientocirugias collection loaded partially
     *
     * @return void
     */
    public function resetPartialProcedimientocirugias($v = true)
    {
        $this->collProcedimientocirugiasPartial = $v;
    }

    /**
     * Initializes the collProcedimientocirugias collection.
     *
     * By default this just sets the collProcedimientocirugias collection to an empty array (like clearcollProcedimientocirugias());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initProcedimientocirugias($overrideExisting = true)
    {
        if (null !== $this->collProcedimientocirugias && !$overrideExisting) {
            return;
        }
        $this->collProcedimientocirugias = new PropelObjectCollection();
        $this->collProcedimientocirugias->setModel('Procedimientocirugia');
    }

    /**
     * Gets an array of Procedimientocirugia objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this Agenda is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|Procedimientocirugia[] List of Procedimientocirugia objects
     * @throws PropelException
     */
    public function getProcedimientocirugias($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collProcedimientocirugiasPartial && !$this->isNew();
        if (null === $this->collProcedimientocirugias || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collProcedimientocirugias) {
                // return empty collection
                $this->initProcedimientocirugias();
            } else {
                $collProcedimientocirugias = ProcedimientocirugiaQuery::create(null, $criteria)
                    ->filterByAgenda($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collProcedimientocirugiasPartial && count($collProcedimientocirugias)) {
                      $this->initProcedimientocirugias(false);

                      foreach($collProcedimientocirugias as $obj) {
                        if (false == $this->collProcedimientocirugias->contains($obj)) {
                          $this->collProcedimientocirugias->append($obj);
                        }
                      }

                      $this->collProcedimientocirugiasPartial = true;
                    }

                    return $collProcedimientocirugias;
                }

                if($partial && $this->collProcedimientocirugias) {
                    foreach($this->collProcedimientocirugias as $obj) {
                        if($obj->isNew()) {
                            $collProcedimientocirugias[] = $obj;
                        }
                    }
                }

                $this->collProcedimientocirugias = $collProcedimientocirugias;
                $this->collProcedimientocirugiasPartial = false;
            }
        }

        return $this->collProcedimientocirugias;
    }

    /**
     * Sets a collection of Procedimientocirugia objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $procedimientocirugias A Propel collection.
     * @param PropelPDO $con Optional connection object
     */
    public function setProcedimientocirugias(PropelCollection $procedimientocirugias, PropelPDO $con = null)
    {
        $this->procedimientocirugiasScheduledForDeletion = $this->getProcedimientocirugias(new Criteria(), $con)->diff($procedimientocirugias);

        foreach ($this->procedimientocirugiasScheduledForDeletion as $procedimientocirugiaRemoved) {
            $procedimientocirugiaRemoved->setAgenda(null);
        }

        $this->collProcedimientocirugias = null;
        foreach ($procedimientocirugias as $procedimientocirugia) {
            $this->addProcedimientocirugia($procedimientocirugia);
        }

        $this->collProcedimientocirugias = $procedimientocirugias;
        $this->collProcedimientocirugiasPartial = false;
    }

    /**
     * Returns the number of related Procedimientocirugia objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related Procedimientocirugia objects.
     * @throws PropelException
     */
    public function countProcedimientocirugias(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collProcedimientocirugiasPartial && !$this->isNew();
        if (null === $this->collProcedimientocirugias || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collProcedimientocirugias) {
                return 0;
            } else {
                if($partial && !$criteria) {
                    return count($this->getProcedimientocirugias());
                }
                $query = ProcedimientocirugiaQuery::create(null, $criteria);
                if ($distinct) {
                    $query->distinct();
                }

                return $query
                    ->filterByAgenda($this)
                    ->count($con);
            }
        } else {
            return count($this->collProcedimientocirugias);
        }
    }

    /**
     * Method called to associate a Procedimientocirugia object to this object
     * through the Procedimientocirugia foreign key attribute.
     *
     * @param    Procedimientocirugia $l Procedimientocirugia
     * @return Agenda The current object (for fluent API support)
     */
    public function addProcedimientocirugia(Procedimientocirugia $l)
    {
        if ($this->collProcedimientocirugias === null) {
            $this->initProcedimientocirugias();
            $this->collProcedimientocirugiasPartial = true;
        }
        if (!$this->collProcedimientocirugias->contains($l)) { // only add it if the **same** object is not already associated
            $this->doAddProcedimientocirugia($l);
        }

        return $this;
    }

    /**
     * @param	Procedimientocirugia $procedimientocirugia The procedimientocirugia object to add.
     */
    protected function doAddProcedimientocirugia($procedimientocirugia)
    {
        $this->collProcedimientocirugias[]= $procedimientocirugia;
        $procedimientocirugia->setAgenda($this);
    }

    /**
     * @param	Procedimientocirugia $procedimientocirugia The procedimientocirugia object to remove.
     */
    public function removeProcedimientocirugia($procedimientocirugia)
    {
        if ($this->getProcedimientocirugias()->contains($procedimientocirugia)) {
            $this->collProcedimientocirugias->remove($this->collProcedimientocirugias->search($procedimientocirugia));
            if (null === $this->procedimientocirugiasScheduledForDeletion) {
                $this->procedimientocirugiasScheduledForDeletion = clone $this->collProcedimientocirugias;
                $this->procedimientocirugiasScheduledForDeletion->clear();
            }
            $this->procedimientocirugiasScheduledForDeletion[]= $procedimientocirugia;
            $procedimientocirugia->setAgenda(null);
        }
    }


    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Agenda is new, it will return
     * an empty collection; or if this Agenda has previously
     * been saved, it will retrieve related Procedimientocirugias from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Agenda.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @param string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
     * @return PropelObjectCollection|Procedimientocirugia[] List of Procedimientocirugia objects
     */
    public function getProcedimientocirugiasJoinEspecialidad($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
    {
        $query = ProcedimientocirugiaQuery::create(null, $criteria);
        $query->joinWith('Especialidad', $join_behavior);

        return $this->getProcedimientocirugias($query, $con);
    }

    /**
     * Clears out the collProcedimientregrogramados collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return void
     * @see        addProcedimientregrogramados()
     */
    public function clearProcedimientregrogramados()
    {
        $this->collProcedimientregrogramados = null; // important to set this to null since that means it is uninitialized
        $this->collProcedimientregrogramadosPartial = null;
    }

    /**
     * reset is the collProcedimientregrogramados collection loaded partially
     *
     * @return void
     */
    public function resetPartialProcedimientregrogramados($v = true)
    {
        $this->collProcedimientregrogramadosPartial = $v;
    }

    /**
     * Initializes the collProcedimientregrogramados collection.
     *
     * By default this just sets the collProcedimientregrogramados collection to an empty array (like clearcollProcedimientregrogramados());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initProcedimientregrogramados($overrideExisting = true)
    {
        if (null !== $this->collProcedimientregrogramados && !$overrideExisting) {
            return;
        }
        $this->collProcedimientregrogramados = new PropelObjectCollection();
        $this->collProcedimientregrogramados->setModel('Procedimientregrogramado');
    }

    /**
     * Gets an array of Procedimientregrogramado objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this Agenda is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|Procedimientregrogramado[] List of Procedimientregrogramado objects
     * @throws PropelException
     */
    public function getProcedimientregrogramados($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collProcedimientregrogramadosPartial && !$this->isNew();
        if (null === $this->collProcedimientregrogramados || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collProcedimientregrogramados) {
                // return empty collection
                $this->initProcedimientregrogramados();
            } else {
                $collProcedimientregrogramados = ProcedimientregrogramadoQuery::create(null, $criteria)
                    ->filterByAgenda($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collProcedimientregrogramadosPartial && count($collProcedimientregrogramados)) {
                      $this->initProcedimientregrogramados(false);

                      foreach($collProcedimientregrogramados as $obj) {
                        if (false == $this->collProcedimientregrogramados->contains($obj)) {
                          $this->collProcedimientregrogramados->append($obj);
                        }
                      }

                      $this->collProcedimientregrogramadosPartial = true;
                    }

                    return $collProcedimientregrogramados;
                }

                if($partial && $this->collProcedimientregrogramados) {
                    foreach($this->collProcedimientregrogramados as $obj) {
                        if($obj->isNew()) {
                            $collProcedimientregrogramados[] = $obj;
                        }
                    }
                }

                $this->collProcedimientregrogramados = $collProcedimientregrogramados;
                $this->collProcedimientregrogramadosPartial = false;
            }
        }

        return $this->collProcedimientregrogramados;
    }

    /**
     * Sets a collection of Procedimientregrogramado objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $procedimientregrogramados A Propel collection.
     * @param PropelPDO $con Optional connection object
     */
    public function setProcedimientregrogramados(PropelCollection $procedimientregrogramados, PropelPDO $con = null)
    {
        $this->procedimientregrogramadosScheduledForDeletion = $this->getProcedimientregrogramados(new Criteria(), $con)->diff($procedimientregrogramados);

        foreach ($this->procedimientregrogramadosScheduledForDeletion as $procedimientregrogramadoRemoved) {
            $procedimientregrogramadoRemoved->setAgenda(null);
        }

        $this->collProcedimientregrogramados = null;
        foreach ($procedimientregrogramados as $procedimientregrogramado) {
            $this->addProcedimientregrogramado($procedimientregrogramado);
        }

        $this->collProcedimientregrogramados = $procedimientregrogramados;
        $this->collProcedimientregrogramadosPartial = false;
    }

    /**
     * Returns the number of related Procedimientregrogramado objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related Procedimientregrogramado objects.
     * @throws PropelException
     */
    public function countProcedimientregrogramados(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collProcedimientregrogramadosPartial && !$this->isNew();
        if (null === $this->collProcedimientregrogramados || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collProcedimientregrogramados) {
                return 0;
            } else {
                if($partial && !$criteria) {
                    return count($this->getProcedimientregrogramados());
                }
                $query = ProcedimientregrogramadoQuery::create(null, $criteria);
                if ($distinct) {
                    $query->distinct();
                }

                return $query
                    ->filterByAgenda($this)
                    ->count($con);
            }
        } else {
            return count($this->collProcedimientregrogramados);
        }
    }

    /**
     * Method called to associate a Procedimientregrogramado object to this object
     * through the Procedimientregrogramado foreign key attribute.
     *
     * @param    Procedimientregrogramado $l Procedimientregrogramado
     * @return Agenda The current object (for fluent API support)
     */
    public function addProcedimientregrogramado(Procedimientregrogramado $l)
    {
        if ($this->collProcedimientregrogramados === null) {
            $this->initProcedimientregrogramados();
            $this->collProcedimientregrogramadosPartial = true;
        }
        if (!$this->collProcedimientregrogramados->contains($l)) { // only add it if the **same** object is not already associated
            $this->doAddProcedimientregrogramado($l);
        }

        return $this;
    }

    /**
     * @param	Procedimientregrogramado $procedimientregrogramado The procedimientregrogramado object to add.
     */
    protected function doAddProcedimientregrogramado($procedimientregrogramado)
    {
        $this->collProcedimientregrogramados[]= $procedimientregrogramado;
        $procedimientregrogramado->setAgenda($this);
    }

    /**
     * @param	Procedimientregrogramado $procedimientregrogramado The procedimientregrogramado object to remove.
     */
    public function removeProcedimientregrogramado($procedimientregrogramado)
    {
        if ($this->getProcedimientregrogramados()->contains($procedimientregrogramado)) {
            $this->collProcedimientregrogramados->remove($this->collProcedimientregrogramados->search($procedimientregrogramado));
            if (null === $this->procedimientregrogramadosScheduledForDeletion) {
                $this->procedimientregrogramadosScheduledForDeletion = clone $this->collProcedimientregrogramados;
                $this->procedimientregrogramadosScheduledForDeletion->clear();
            }
            $this->procedimientregrogramadosScheduledForDeletion[]= $procedimientregrogramado;
            $procedimientregrogramado->setAgenda(null);
        }
    }

    /**
     * Clears the current object and sets all attributes to their default values
     */
    public function clear()
    {
        $this->id = null;
        $this->programacion = null;
        $this->fechaestado = null;
        $this->hora = null;
        $this->horaestado = null;
        $this->inicio = null;
        $this->last_time = null;
        $this->ingreso = null;
        $this->sala_id = null;
        $this->quirofano_id = null;
        $this->egreso = null;
        $this->cie9mc = null;
        $this->cie9mc_id = null;
        $this->cx_realizada = null;
        $this->cx_realizada_id = null;
        $this->tipo_cx = null;
        $this->diagnostico = null;
        $this->diagnostico_id = null;
        $this->medico_name = null;
        $this->paciente_name = null;
        $this->paciente_id = null;
        $this->edad = null;
        $this->genero = null;
        $this->genero_id = null;
        $this->registro = null;
        $this->servicio = null;
        $this->anestesia_id = null;
        $this->anestesia_empleada = null;
        $this->ev_adversos_anestesia = null;
        $this->observaciones = null;
        $this->requerimiento = null;
        $this->req_insumos = null;
        $this->req_hemoderiv = null;
        $this->req_laboratorio = null;
        $this->req_anestesico = null;
        $this->status = null;
        $this->causa_diferido_id = null;
        $this->solicitado = null;
        $this->riesgoqx_id = null;
        $this->contaminacionqx_id = null;
        $this->eventoqx_id = null;
        $this->complicaciones = null;
        $this->val_pre_anestesica = null;
        $this->reintervencion = null;
        $this->permisos = null;
        $this->permisos_unserialized = null;
        $this->tipo_proc_id = null;
        $this->atencion_id = null;
        $this->tiempo_fuera = null;
        $this->procedencia = null;
        $this->clasificacionqx = null;
        $this->region_px = null;
        $this->extension_px = null;
        $this->anexo_detalle = null;
        $this->destino_px = null;
        $this->liberacion_sala = null;
        $this->tiempo_est = null;
        $this->riesgo_qx_pre = null;
        $this->show_in_index = null;
        $this->protocolo = null;
        $this->cancelada = null;
        $this->created_at = null;
        $this->updated_at = null;
        $this->alreadyInSave = false;
        $this->alreadyInValidation = false;
        $this->clearAllReferences();
        $this->applyDefaultValues();
        $this->resetModified();
        $this->setNew(true);
        $this->setDeleted(false);
    }

    /**
     * Resets all references to other model objects or collections of model objects.
     *
     * This method is a user-space workaround for PHP's inability to garbage collect
     * objects with circular references (even in PHP 5.3). This is currently necessary
     * when using Propel in certain daemon or large-volumne/high-memory operations.
     *
     * @param boolean $deep Whether to also clear the references on all referrer objects.
     */
    public function clearAllReferences($deep = false)
    {
        if ($deep) {
            if ($this->collPersonalcirugias) {
                foreach ($this->collPersonalcirugias as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->collDiagnosticocirugias) {
                foreach ($this->collDiagnosticocirugias as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->collProcedimientocirugias) {
                foreach ($this->collProcedimientocirugias as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->collProcedimientregrogramados) {
                foreach ($this->collProcedimientregrogramados as $o) {
                    $o->clearAllReferences($deep);
                }
            }
        } // if ($deep)

        if ($this->collPersonalcirugias instanceof PropelCollection) {
            $this->collPersonalcirugias->clearIterator();
        }
        $this->collPersonalcirugias = null;
        if ($this->collDiagnosticocirugias instanceof PropelCollection) {
            $this->collDiagnosticocirugias->clearIterator();
        }
        $this->collDiagnosticocirugias = null;
        if ($this->collProcedimientocirugias instanceof PropelCollection) {
            $this->collProcedimientocirugias->clearIterator();
        }
        $this->collProcedimientocirugias = null;
        if ($this->collProcedimientregrogramados instanceof PropelCollection) {
            $this->collProcedimientregrogramados->clearIterator();
        }
        $this->collProcedimientregrogramados = null;
        $this->aSalaquirurgica = null;
        $this->aQuirofano = null;
        $this->aRiesgoqx = null;
        $this->aContaminacionqx = null;
        $this->aEventoqx = null;
        $this->aProcedimiento = null;
        $this->aCausadiferido = null;
        $this->aAtencion = null;
        $this->aEspecialidad = null;
    }

    /**
     * return the string representation of this object
     *
     * @return string
     */
    public function __toString()
    {
        return (string) $this->exportTo(AgendaPeer::DEFAULT_STRING_FORMAT);
    }

    /**
     * return true is the object is in saving state
     *
     * @return boolean
     */
    public function isAlreadyInSave()
    {
        return $this->alreadyInSave;
    }

    /**
     * Catches calls to virtual methods
     */
    public function __call($name, $params)
    {

        // symfony_behaviors behavior
        if ($callable = sfMixer::getCallable('BaseAgenda:' . $name))
        {
          array_unshift($params, $this);
          return call_user_func_array($callable, $params);
        }


        return parent::__call($name, $params);
    }

}
