<?php


/**
 * Base class that represents a query for the 'hc_agenda' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.7 on:
 *
 * Wed Dec  4 10:55:32 2013
 *
 * @method AgendaQuery orderById($order = Criteria::ASC) Order by the id column
 * @method AgendaQuery orderByProgramacion($order = Criteria::ASC) Order by the programacion column
 * @method AgendaQuery orderByFechaestado($order = Criteria::ASC) Order by the fechaestado column
 * @method AgendaQuery orderByHora($order = Criteria::ASC) Order by the hora column
 * @method AgendaQuery orderByHoraestado($order = Criteria::ASC) Order by the horaestado column
 * @method AgendaQuery orderByInicio($order = Criteria::ASC) Order by the inicio column
 * @method AgendaQuery orderByLastTime($order = Criteria::ASC) Order by the last_time column
 * @method AgendaQuery orderByIngreso($order = Criteria::ASC) Order by the ingreso column
 * @method AgendaQuery orderBySalaId($order = Criteria::ASC) Order by the sala_id column
 * @method AgendaQuery orderByQuirofanoId($order = Criteria::ASC) Order by the quirofano_id column
 * @method AgendaQuery orderByEgreso($order = Criteria::ASC) Order by the egreso column
 * @method AgendaQuery orderByCie9mc($order = Criteria::ASC) Order by the cie9mc column
 * @method AgendaQuery orderByCie9mcId($order = Criteria::ASC) Order by the cie9mc_id column
 * @method AgendaQuery orderByCxRealizada($order = Criteria::ASC) Order by the cx_realizada column
 * @method AgendaQuery orderByCxRealizadaId($order = Criteria::ASC) Order by the cx_realizada_id column
 * @method AgendaQuery orderByTipoCx($order = Criteria::ASC) Order by the tipo_cx column
 * @method AgendaQuery orderByDiagnostico($order = Criteria::ASC) Order by the diagnostico column
 * @method AgendaQuery orderByDiagnosticoId($order = Criteria::ASC) Order by the diagnostico_id column
 * @method AgendaQuery orderByMedicoName($order = Criteria::ASC) Order by the medico_name column
 * @method AgendaQuery orderByPacienteName($order = Criteria::ASC) Order by the paciente_name column
 * @method AgendaQuery orderByPacienteId($order = Criteria::ASC) Order by the paciente_id column
 * @method AgendaQuery orderByEdad($order = Criteria::ASC) Order by the edad column
 * @method AgendaQuery orderByGenero($order = Criteria::ASC) Order by the genero column
 * @method AgendaQuery orderByGeneroId($order = Criteria::ASC) Order by the genero_id column
 * @method AgendaQuery orderByRegistro($order = Criteria::ASC) Order by the registro column
 * @method AgendaQuery orderByServicio($order = Criteria::ASC) Order by the servicio column
 * @method AgendaQuery orderByAnestesiaId($order = Criteria::ASC) Order by the anestesia_id column
 * @method AgendaQuery orderByAnestesiaEmpleada($order = Criteria::ASC) Order by the anestesia_empleada column
 * @method AgendaQuery orderByEvAdversosAnestesia($order = Criteria::ASC) Order by the ev_adversos_anestesia column
 * @method AgendaQuery orderByObservaciones($order = Criteria::ASC) Order by the observaciones column
 * @method AgendaQuery orderByRequerimiento($order = Criteria::ASC) Order by the requerimiento column
 * @method AgendaQuery orderByReqInsumos($order = Criteria::ASC) Order by the req_insumos column
 * @method AgendaQuery orderByReqHemoderiv($order = Criteria::ASC) Order by the req_hemoderiv column
 * @method AgendaQuery orderByReqLaboratorio($order = Criteria::ASC) Order by the req_laboratorio column
 * @method AgendaQuery orderByReqAnestesico($order = Criteria::ASC) Order by the req_anestesico column
 * @method AgendaQuery orderByStatus($order = Criteria::ASC) Order by the status column
 * @method AgendaQuery orderByCausaDiferidoId($order = Criteria::ASC) Order by the causa_diferido_id column
 * @method AgendaQuery orderBySolicitado($order = Criteria::ASC) Order by the solicitado column
 * @method AgendaQuery orderByRiesgoqxId($order = Criteria::ASC) Order by the riesgoqx_id column
 * @method AgendaQuery orderByContaminacionqxId($order = Criteria::ASC) Order by the contaminacionqx_id column
 * @method AgendaQuery orderByEventoqxId($order = Criteria::ASC) Order by the eventoqx_id column
 * @method AgendaQuery orderByComplicaciones($order = Criteria::ASC) Order by the complicaciones column
 * @method AgendaQuery orderByValPreAnestesica($order = Criteria::ASC) Order by the val_pre_anestesica column
 * @method AgendaQuery orderByReintervencion($order = Criteria::ASC) Order by the reintervencion column
 * @method AgendaQuery orderByPermisos($order = Criteria::ASC) Order by the permisos column
 * @method AgendaQuery orderByTipoProcId($order = Criteria::ASC) Order by the tipo_proc_id column
 * @method AgendaQuery orderByAtencionId($order = Criteria::ASC) Order by the atencion_id column
 * @method AgendaQuery orderByTiempoFuera($order = Criteria::ASC) Order by the tiempo_fuera column
 * @method AgendaQuery orderByProcedencia($order = Criteria::ASC) Order by the procedencia column
 * @method AgendaQuery orderByClasificacionqx($order = Criteria::ASC) Order by the clasificacionqx column
 * @method AgendaQuery orderByRegionPx($order = Criteria::ASC) Order by the region_px column
 * @method AgendaQuery orderByExtensionPx($order = Criteria::ASC) Order by the extension_px column
 * @method AgendaQuery orderByAnexoDetalle($order = Criteria::ASC) Order by the anexo_detalle column
 * @method AgendaQuery orderByDestinoPx($order = Criteria::ASC) Order by the destino_px column
 * @method AgendaQuery orderByLiberacionSala($order = Criteria::ASC) Order by the liberacion_sala column
 * @method AgendaQuery orderByTiempoEst($order = Criteria::ASC) Order by the tiempo_est column
 * @method AgendaQuery orderByRiesgoQxPre($order = Criteria::ASC) Order by the riesgo_qx_pre column
 * @method AgendaQuery orderByShowInIndex($order = Criteria::ASC) Order by the show_in_index column
 * @method AgendaQuery orderByProtocolo($order = Criteria::ASC) Order by the protocolo column
 * @method AgendaQuery orderByCancelada($order = Criteria::ASC) Order by the cancelada column
 * @method AgendaQuery orderByCreatedAt($order = Criteria::ASC) Order by the created_at column
 * @method AgendaQuery orderByUpdatedAt($order = Criteria::ASC) Order by the updated_at column
 *
 * @method AgendaQuery groupById() Group by the id column
 * @method AgendaQuery groupByProgramacion() Group by the programacion column
 * @method AgendaQuery groupByFechaestado() Group by the fechaestado column
 * @method AgendaQuery groupByHora() Group by the hora column
 * @method AgendaQuery groupByHoraestado() Group by the horaestado column
 * @method AgendaQuery groupByInicio() Group by the inicio column
 * @method AgendaQuery groupByLastTime() Group by the last_time column
 * @method AgendaQuery groupByIngreso() Group by the ingreso column
 * @method AgendaQuery groupBySalaId() Group by the sala_id column
 * @method AgendaQuery groupByQuirofanoId() Group by the quirofano_id column
 * @method AgendaQuery groupByEgreso() Group by the egreso column
 * @method AgendaQuery groupByCie9mc() Group by the cie9mc column
 * @method AgendaQuery groupByCie9mcId() Group by the cie9mc_id column
 * @method AgendaQuery groupByCxRealizada() Group by the cx_realizada column
 * @method AgendaQuery groupByCxRealizadaId() Group by the cx_realizada_id column
 * @method AgendaQuery groupByTipoCx() Group by the tipo_cx column
 * @method AgendaQuery groupByDiagnostico() Group by the diagnostico column
 * @method AgendaQuery groupByDiagnosticoId() Group by the diagnostico_id column
 * @method AgendaQuery groupByMedicoName() Group by the medico_name column
 * @method AgendaQuery groupByPacienteName() Group by the paciente_name column
 * @method AgendaQuery groupByPacienteId() Group by the paciente_id column
 * @method AgendaQuery groupByEdad() Group by the edad column
 * @method AgendaQuery groupByGenero() Group by the genero column
 * @method AgendaQuery groupByGeneroId() Group by the genero_id column
 * @method AgendaQuery groupByRegistro() Group by the registro column
 * @method AgendaQuery groupByServicio() Group by the servicio column
 * @method AgendaQuery groupByAnestesiaId() Group by the anestesia_id column
 * @method AgendaQuery groupByAnestesiaEmpleada() Group by the anestesia_empleada column
 * @method AgendaQuery groupByEvAdversosAnestesia() Group by the ev_adversos_anestesia column
 * @method AgendaQuery groupByObservaciones() Group by the observaciones column
 * @method AgendaQuery groupByRequerimiento() Group by the requerimiento column
 * @method AgendaQuery groupByReqInsumos() Group by the req_insumos column
 * @method AgendaQuery groupByReqHemoderiv() Group by the req_hemoderiv column
 * @method AgendaQuery groupByReqLaboratorio() Group by the req_laboratorio column
 * @method AgendaQuery groupByReqAnestesico() Group by the req_anestesico column
 * @method AgendaQuery groupByStatus() Group by the status column
 * @method AgendaQuery groupByCausaDiferidoId() Group by the causa_diferido_id column
 * @method AgendaQuery groupBySolicitado() Group by the solicitado column
 * @method AgendaQuery groupByRiesgoqxId() Group by the riesgoqx_id column
 * @method AgendaQuery groupByContaminacionqxId() Group by the contaminacionqx_id column
 * @method AgendaQuery groupByEventoqxId() Group by the eventoqx_id column
 * @method AgendaQuery groupByComplicaciones() Group by the complicaciones column
 * @method AgendaQuery groupByValPreAnestesica() Group by the val_pre_anestesica column
 * @method AgendaQuery groupByReintervencion() Group by the reintervencion column
 * @method AgendaQuery groupByPermisos() Group by the permisos column
 * @method AgendaQuery groupByTipoProcId() Group by the tipo_proc_id column
 * @method AgendaQuery groupByAtencionId() Group by the atencion_id column
 * @method AgendaQuery groupByTiempoFuera() Group by the tiempo_fuera column
 * @method AgendaQuery groupByProcedencia() Group by the procedencia column
 * @method AgendaQuery groupByClasificacionqx() Group by the clasificacionqx column
 * @method AgendaQuery groupByRegionPx() Group by the region_px column
 * @method AgendaQuery groupByExtensionPx() Group by the extension_px column
 * @method AgendaQuery groupByAnexoDetalle() Group by the anexo_detalle column
 * @method AgendaQuery groupByDestinoPx() Group by the destino_px column
 * @method AgendaQuery groupByLiberacionSala() Group by the liberacion_sala column
 * @method AgendaQuery groupByTiempoEst() Group by the tiempo_est column
 * @method AgendaQuery groupByRiesgoQxPre() Group by the riesgo_qx_pre column
 * @method AgendaQuery groupByShowInIndex() Group by the show_in_index column
 * @method AgendaQuery groupByProtocolo() Group by the protocolo column
 * @method AgendaQuery groupByCancelada() Group by the cancelada column
 * @method AgendaQuery groupByCreatedAt() Group by the created_at column
 * @method AgendaQuery groupByUpdatedAt() Group by the updated_at column
 *
 * @method AgendaQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method AgendaQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method AgendaQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method AgendaQuery leftJoinSalaquirurgica($relationAlias = null) Adds a LEFT JOIN clause to the query using the Salaquirurgica relation
 * @method AgendaQuery rightJoinSalaquirurgica($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Salaquirurgica relation
 * @method AgendaQuery innerJoinSalaquirurgica($relationAlias = null) Adds a INNER JOIN clause to the query using the Salaquirurgica relation
 *
 * @method AgendaQuery leftJoinQuirofano($relationAlias = null) Adds a LEFT JOIN clause to the query using the Quirofano relation
 * @method AgendaQuery rightJoinQuirofano($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Quirofano relation
 * @method AgendaQuery innerJoinQuirofano($relationAlias = null) Adds a INNER JOIN clause to the query using the Quirofano relation
 *
 * @method AgendaQuery leftJoinRiesgoqx($relationAlias = null) Adds a LEFT JOIN clause to the query using the Riesgoqx relation
 * @method AgendaQuery rightJoinRiesgoqx($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Riesgoqx relation
 * @method AgendaQuery innerJoinRiesgoqx($relationAlias = null) Adds a INNER JOIN clause to the query using the Riesgoqx relation
 *
 * @method AgendaQuery leftJoinContaminacionqx($relationAlias = null) Adds a LEFT JOIN clause to the query using the Contaminacionqx relation
 * @method AgendaQuery rightJoinContaminacionqx($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Contaminacionqx relation
 * @method AgendaQuery innerJoinContaminacionqx($relationAlias = null) Adds a INNER JOIN clause to the query using the Contaminacionqx relation
 *
 * @method AgendaQuery leftJoinEventoqx($relationAlias = null) Adds a LEFT JOIN clause to the query using the Eventoqx relation
 * @method AgendaQuery rightJoinEventoqx($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Eventoqx relation
 * @method AgendaQuery innerJoinEventoqx($relationAlias = null) Adds a INNER JOIN clause to the query using the Eventoqx relation
 *
 * @method AgendaQuery leftJoinProcedimiento($relationAlias = null) Adds a LEFT JOIN clause to the query using the Procedimiento relation
 * @method AgendaQuery rightJoinProcedimiento($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Procedimiento relation
 * @method AgendaQuery innerJoinProcedimiento($relationAlias = null) Adds a INNER JOIN clause to the query using the Procedimiento relation
 *
 * @method AgendaQuery leftJoinCausadiferido($relationAlias = null) Adds a LEFT JOIN clause to the query using the Causadiferido relation
 * @method AgendaQuery rightJoinCausadiferido($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Causadiferido relation
 * @method AgendaQuery innerJoinCausadiferido($relationAlias = null) Adds a INNER JOIN clause to the query using the Causadiferido relation
 *
 * @method AgendaQuery leftJoinAtencion($relationAlias = null) Adds a LEFT JOIN clause to the query using the Atencion relation
 * @method AgendaQuery rightJoinAtencion($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Atencion relation
 * @method AgendaQuery innerJoinAtencion($relationAlias = null) Adds a INNER JOIN clause to the query using the Atencion relation
 *
 * @method AgendaQuery leftJoinEspecialidad($relationAlias = null) Adds a LEFT JOIN clause to the query using the Especialidad relation
 * @method AgendaQuery rightJoinEspecialidad($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Especialidad relation
 * @method AgendaQuery innerJoinEspecialidad($relationAlias = null) Adds a INNER JOIN clause to the query using the Especialidad relation
 *
 * @method AgendaQuery leftJoinPersonalcirugia($relationAlias = null) Adds a LEFT JOIN clause to the query using the Personalcirugia relation
 * @method AgendaQuery rightJoinPersonalcirugia($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Personalcirugia relation
 * @method AgendaQuery innerJoinPersonalcirugia($relationAlias = null) Adds a INNER JOIN clause to the query using the Personalcirugia relation
 *
 * @method AgendaQuery leftJoinDiagnosticocirugia($relationAlias = null) Adds a LEFT JOIN clause to the query using the Diagnosticocirugia relation
 * @method AgendaQuery rightJoinDiagnosticocirugia($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Diagnosticocirugia relation
 * @method AgendaQuery innerJoinDiagnosticocirugia($relationAlias = null) Adds a INNER JOIN clause to the query using the Diagnosticocirugia relation
 *
 * @method AgendaQuery leftJoinProcedimientocirugia($relationAlias = null) Adds a LEFT JOIN clause to the query using the Procedimientocirugia relation
 * @method AgendaQuery rightJoinProcedimientocirugia($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Procedimientocirugia relation
 * @method AgendaQuery innerJoinProcedimientocirugia($relationAlias = null) Adds a INNER JOIN clause to the query using the Procedimientocirugia relation
 *
 * @method AgendaQuery leftJoinProcedimientregrogramado($relationAlias = null) Adds a LEFT JOIN clause to the query using the Procedimientregrogramado relation
 * @method AgendaQuery rightJoinProcedimientregrogramado($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Procedimientregrogramado relation
 * @method AgendaQuery innerJoinProcedimientregrogramado($relationAlias = null) Adds a INNER JOIN clause to the query using the Procedimientregrogramado relation
 *
 * @method Agenda findOne(PropelPDO $con = null) Return the first Agenda matching the query
 * @method Agenda findOneOrCreate(PropelPDO $con = null) Return the first Agenda matching the query, or a new Agenda object populated from the query conditions when no match is found
 *
 * @method Agenda findOneById(int $id) Return the first Agenda filtered by the id column
 * @method Agenda findOneByProgramacion(string $programacion) Return the first Agenda filtered by the programacion column
 * @method Agenda findOneByFechaestado(string $fechaestado) Return the first Agenda filtered by the fechaestado column
 * @method Agenda findOneByHora(string $hora) Return the first Agenda filtered by the hora column
 * @method Agenda findOneByHoraestado(string $horaestado) Return the first Agenda filtered by the horaestado column
 * @method Agenda findOneByInicio(string $inicio) Return the first Agenda filtered by the inicio column
 * @method Agenda findOneByLastTime(string $last_time) Return the first Agenda filtered by the last_time column
 * @method Agenda findOneByIngreso(string $ingreso) Return the first Agenda filtered by the ingreso column
 * @method Agenda findOneBySalaId(int $sala_id) Return the first Agenda filtered by the sala_id column
 * @method Agenda findOneByQuirofanoId(int $quirofano_id) Return the first Agenda filtered by the quirofano_id column
 * @method Agenda findOneByEgreso(string $egreso) Return the first Agenda filtered by the egreso column
 * @method Agenda findOneByCie9mc(string $cie9mc) Return the first Agenda filtered by the cie9mc column
 * @method Agenda findOneByCie9mcId(string $cie9mc_id) Return the first Agenda filtered by the cie9mc_id column
 * @method Agenda findOneByCxRealizada(string $cx_realizada) Return the first Agenda filtered by the cx_realizada column
 * @method Agenda findOneByCxRealizadaId(string $cx_realizada_id) Return the first Agenda filtered by the cx_realizada_id column
 * @method Agenda findOneByTipoCx(int $tipo_cx) Return the first Agenda filtered by the tipo_cx column
 * @method Agenda findOneByDiagnostico(string $diagnostico) Return the first Agenda filtered by the diagnostico column
 * @method Agenda findOneByDiagnosticoId(string $diagnostico_id) Return the first Agenda filtered by the diagnostico_id column
 * @method Agenda findOneByMedicoName(string $medico_name) Return the first Agenda filtered by the medico_name column
 * @method Agenda findOneByPacienteName(string $paciente_name) Return the first Agenda filtered by the paciente_name column
 * @method Agenda findOneByPacienteId(int $paciente_id) Return the first Agenda filtered by the paciente_id column
 * @method Agenda findOneByEdad(string $edad) Return the first Agenda filtered by the edad column
 * @method Agenda findOneByGenero(string $genero) Return the first Agenda filtered by the genero column
 * @method Agenda findOneByGeneroId(int $genero_id) Return the first Agenda filtered by the genero_id column
 * @method Agenda findOneByRegistro(string $registro) Return the first Agenda filtered by the registro column
 * @method Agenda findOneByServicio(int $servicio) Return the first Agenda filtered by the servicio column
 * @method Agenda findOneByAnestesiaId(int $anestesia_id) Return the first Agenda filtered by the anestesia_id column
 * @method Agenda findOneByAnestesiaEmpleada(string $anestesia_empleada) Return the first Agenda filtered by the anestesia_empleada column
 * @method Agenda findOneByEvAdversosAnestesia(string $ev_adversos_anestesia) Return the first Agenda filtered by the ev_adversos_anestesia column
 * @method Agenda findOneByObservaciones(string $observaciones) Return the first Agenda filtered by the observaciones column
 * @method Agenda findOneByRequerimiento(string $requerimiento) Return the first Agenda filtered by the requerimiento column
 * @method Agenda findOneByReqInsumos(string $req_insumos) Return the first Agenda filtered by the req_insumos column
 * @method Agenda findOneByReqHemoderiv(string $req_hemoderiv) Return the first Agenda filtered by the req_hemoderiv column
 * @method Agenda findOneByReqLaboratorio(string $req_laboratorio) Return the first Agenda filtered by the req_laboratorio column
 * @method Agenda findOneByReqAnestesico(string $req_anestesico) Return the first Agenda filtered by the req_anestesico column
 * @method Agenda findOneByStatus(int $status) Return the first Agenda filtered by the status column
 * @method Agenda findOneByCausaDiferidoId(int $causa_diferido_id) Return the first Agenda filtered by the causa_diferido_id column
 * @method Agenda findOneBySolicitado(boolean $solicitado) Return the first Agenda filtered by the solicitado column
 * @method Agenda findOneByRiesgoqxId(int $riesgoqx_id) Return the first Agenda filtered by the riesgoqx_id column
 * @method Agenda findOneByContaminacionqxId(int $contaminacionqx_id) Return the first Agenda filtered by the contaminacionqx_id column
 * @method Agenda findOneByEventoqxId(int $eventoqx_id) Return the first Agenda filtered by the eventoqx_id column
 * @method Agenda findOneByComplicaciones(string $complicaciones) Return the first Agenda filtered by the complicaciones column
 * @method Agenda findOneByValPreAnestesica(string $val_pre_anestesica) Return the first Agenda filtered by the val_pre_anestesica column
 * @method Agenda findOneByReintervencion(boolean $reintervencion) Return the first Agenda filtered by the reintervencion column
 * @method Agenda findOneByPermisos( $permisos) Return the first Agenda filtered by the permisos column
 * @method Agenda findOneByTipoProcId(int $tipo_proc_id) Return the first Agenda filtered by the tipo_proc_id column
 * @method Agenda findOneByAtencionId(int $atencion_id) Return the first Agenda filtered by the atencion_id column
 * @method Agenda findOneByTiempoFuera(boolean $tiempo_fuera) Return the first Agenda filtered by the tiempo_fuera column
 * @method Agenda findOneByProcedencia(string $procedencia) Return the first Agenda filtered by the procedencia column
 * @method Agenda findOneByClasificacionqx(int $clasificacionqx) Return the first Agenda filtered by the clasificacionqx column
 * @method Agenda findOneByRegionPx(int $region_px) Return the first Agenda filtered by the region_px column
 * @method Agenda findOneByExtensionPx(int $extension_px) Return the first Agenda filtered by the extension_px column
 * @method Agenda findOneByAnexoDetalle(int $anexo_detalle) Return the first Agenda filtered by the anexo_detalle column
 * @method Agenda findOneByDestinoPx(int $destino_px) Return the first Agenda filtered by the destino_px column
 * @method Agenda findOneByLiberacionSala(string $liberacion_sala) Return the first Agenda filtered by the liberacion_sala column
 * @method Agenda findOneByTiempoEst(string $tiempo_est) Return the first Agenda filtered by the tiempo_est column
 * @method Agenda findOneByRiesgoQxPre(string $riesgo_qx_pre) Return the first Agenda filtered by the riesgo_qx_pre column
 * @method Agenda findOneByShowInIndex(boolean $show_in_index) Return the first Agenda filtered by the show_in_index column
 * @method Agenda findOneByProtocolo(boolean $protocolo) Return the first Agenda filtered by the protocolo column
 * @method Agenda findOneByCancelada(boolean $cancelada) Return the first Agenda filtered by the cancelada column
 * @method Agenda findOneByCreatedAt(string $created_at) Return the first Agenda filtered by the created_at column
 * @method Agenda findOneByUpdatedAt(string $updated_at) Return the first Agenda filtered by the updated_at column
 *
 * @method array findById(int $id) Return Agenda objects filtered by the id column
 * @method array findByProgramacion(string $programacion) Return Agenda objects filtered by the programacion column
 * @method array findByFechaestado(string $fechaestado) Return Agenda objects filtered by the fechaestado column
 * @method array findByHora(string $hora) Return Agenda objects filtered by the hora column
 * @method array findByHoraestado(string $horaestado) Return Agenda objects filtered by the horaestado column
 * @method array findByInicio(string $inicio) Return Agenda objects filtered by the inicio column
 * @method array findByLastTime(string $last_time) Return Agenda objects filtered by the last_time column
 * @method array findByIngreso(string $ingreso) Return Agenda objects filtered by the ingreso column
 * @method array findBySalaId(int $sala_id) Return Agenda objects filtered by the sala_id column
 * @method array findByQuirofanoId(int $quirofano_id) Return Agenda objects filtered by the quirofano_id column
 * @method array findByEgreso(string $egreso) Return Agenda objects filtered by the egreso column
 * @method array findByCie9mc(string $cie9mc) Return Agenda objects filtered by the cie9mc column
 * @method array findByCie9mcId(string $cie9mc_id) Return Agenda objects filtered by the cie9mc_id column
 * @method array findByCxRealizada(string $cx_realizada) Return Agenda objects filtered by the cx_realizada column
 * @method array findByCxRealizadaId(string $cx_realizada_id) Return Agenda objects filtered by the cx_realizada_id column
 * @method array findByTipoCx(int $tipo_cx) Return Agenda objects filtered by the tipo_cx column
 * @method array findByDiagnostico(string $diagnostico) Return Agenda objects filtered by the diagnostico column
 * @method array findByDiagnosticoId(string $diagnostico_id) Return Agenda objects filtered by the diagnostico_id column
 * @method array findByMedicoName(string $medico_name) Return Agenda objects filtered by the medico_name column
 * @method array findByPacienteName(string $paciente_name) Return Agenda objects filtered by the paciente_name column
 * @method array findByPacienteId(int $paciente_id) Return Agenda objects filtered by the paciente_id column
 * @method array findByEdad(string $edad) Return Agenda objects filtered by the edad column
 * @method array findByGenero(string $genero) Return Agenda objects filtered by the genero column
 * @method array findByGeneroId(int $genero_id) Return Agenda objects filtered by the genero_id column
 * @method array findByRegistro(string $registro) Return Agenda objects filtered by the registro column
 * @method array findByServicio(int $servicio) Return Agenda objects filtered by the servicio column
 * @method array findByAnestesiaId(int $anestesia_id) Return Agenda objects filtered by the anestesia_id column
 * @method array findByAnestesiaEmpleada(string $anestesia_empleada) Return Agenda objects filtered by the anestesia_empleada column
 * @method array findByEvAdversosAnestesia(string $ev_adversos_anestesia) Return Agenda objects filtered by the ev_adversos_anestesia column
 * @method array findByObservaciones(string $observaciones) Return Agenda objects filtered by the observaciones column
 * @method array findByRequerimiento(string $requerimiento) Return Agenda objects filtered by the requerimiento column
 * @method array findByReqInsumos(string $req_insumos) Return Agenda objects filtered by the req_insumos column
 * @method array findByReqHemoderiv(string $req_hemoderiv) Return Agenda objects filtered by the req_hemoderiv column
 * @method array findByReqLaboratorio(string $req_laboratorio) Return Agenda objects filtered by the req_laboratorio column
 * @method array findByReqAnestesico(string $req_anestesico) Return Agenda objects filtered by the req_anestesico column
 * @method array findByStatus(int $status) Return Agenda objects filtered by the status column
 * @method array findByCausaDiferidoId(int $causa_diferido_id) Return Agenda objects filtered by the causa_diferido_id column
 * @method array findBySolicitado(boolean $solicitado) Return Agenda objects filtered by the solicitado column
 * @method array findByRiesgoqxId(int $riesgoqx_id) Return Agenda objects filtered by the riesgoqx_id column
 * @method array findByContaminacionqxId(int $contaminacionqx_id) Return Agenda objects filtered by the contaminacionqx_id column
 * @method array findByEventoqxId(int $eventoqx_id) Return Agenda objects filtered by the eventoqx_id column
 * @method array findByComplicaciones(string $complicaciones) Return Agenda objects filtered by the complicaciones column
 * @method array findByValPreAnestesica(string $val_pre_anestesica) Return Agenda objects filtered by the val_pre_anestesica column
 * @method array findByReintervencion(boolean $reintervencion) Return Agenda objects filtered by the reintervencion column
 * @method array findByPermisos( $permisos) Return Agenda objects filtered by the permisos column
 * @method array findByTipoProcId(int $tipo_proc_id) Return Agenda objects filtered by the tipo_proc_id column
 * @method array findByAtencionId(int $atencion_id) Return Agenda objects filtered by the atencion_id column
 * @method array findByTiempoFuera(boolean $tiempo_fuera) Return Agenda objects filtered by the tiempo_fuera column
 * @method array findByProcedencia(string $procedencia) Return Agenda objects filtered by the procedencia column
 * @method array findByClasificacionqx(int $clasificacionqx) Return Agenda objects filtered by the clasificacionqx column
 * @method array findByRegionPx(int $region_px) Return Agenda objects filtered by the region_px column
 * @method array findByExtensionPx(int $extension_px) Return Agenda objects filtered by the extension_px column
 * @method array findByAnexoDetalle(int $anexo_detalle) Return Agenda objects filtered by the anexo_detalle column
 * @method array findByDestinoPx(int $destino_px) Return Agenda objects filtered by the destino_px column
 * @method array findByLiberacionSala(string $liberacion_sala) Return Agenda objects filtered by the liberacion_sala column
 * @method array findByTiempoEst(string $tiempo_est) Return Agenda objects filtered by the tiempo_est column
 * @method array findByRiesgoQxPre(string $riesgo_qx_pre) Return Agenda objects filtered by the riesgo_qx_pre column
 * @method array findByShowInIndex(boolean $show_in_index) Return Agenda objects filtered by the show_in_index column
 * @method array findByProtocolo(boolean $protocolo) Return Agenda objects filtered by the protocolo column
 * @method array findByCancelada(boolean $cancelada) Return Agenda objects filtered by the cancelada column
 * @method array findByCreatedAt(string $created_at) Return Agenda objects filtered by the created_at column
 * @method array findByUpdatedAt(string $updated_at) Return Agenda objects filtered by the updated_at column
 *
 * @package    propel.generator.lib.model.data.om
 */
abstract class BaseAgendaQuery extends ModelCriteria
{
    /**
     * Initializes internal state of BaseAgendaQuery object.
     *
     * @param     string $dbName The dabase name
     * @param     string $modelName The phpName of a model, e.g. 'Book'
     * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
     */
    public function __construct($dbName = 'propel', $modelName = 'Agenda', $modelAlias = null)
    {
        parent::__construct($dbName, $modelName, $modelAlias);
    }

    /**
     * Returns a new AgendaQuery object.
     *
     * @param     string $modelAlias The alias of a model in the query
     * @param     AgendaQuery|Criteria $criteria Optional Criteria to build the query from
     *
     * @return AgendaQuery
     */
    public static function create($modelAlias = null, $criteria = null)
    {
        if ($criteria instanceof AgendaQuery) {
            return $criteria;
        }
        $query = new AgendaQuery();
        if (null !== $modelAlias) {
            $query->setModelAlias($modelAlias);
        }
        if ($criteria instanceof Criteria) {
            $query->mergeWith($criteria);
        }

        return $query;
    }

    /**
     * Find object by primary key.
     * Propel uses the instance pool to skip the database if the object exists.
     * Go fast if the query is untouched.
     *
     * <code>
     * $obj  = $c->findPk(12, $con);
     * </code>
     *
     * @param mixed $key Primary key to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return   Agenda|Agenda[]|mixed the result, formatted by the current formatter
     */
    public function findPk($key, $con = null)
    {
        if ($key === null) {
            return null;
        }
        if ((null !== ($obj = AgendaPeer::getInstanceFromPool((string) $key))) && !$this->formatter) {
            // the object is alredy in the instance pool
            return $obj;
        }
        if ($con === null) {
            $con = Propel::getConnection(AgendaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        if ($this->formatter || $this->modelAlias || $this->with || $this->select
         || $this->selectColumns || $this->asColumns || $this->selectModifiers
         || $this->map || $this->having || $this->joins) {
            return $this->findPkComplex($key, $con);
        } else {
            return $this->findPkSimple($key, $con);
        }
    }

    /**
     * Find object by primary key using raw SQL to go fast.
     * Bypass doSelect() and the object formatter by using generated code.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return   Agenda A model object, or null if the key is not found
     * @throws   PropelException
     */
    protected function findPkSimple($key, $con)
    {
        $sql = 'SELECT `ID`, `PROGRAMACION`, `FECHAESTADO`, `HORA`, `HORAESTADO`, `INICIO`, `LAST_TIME`, `INGRESO`, `SALA_ID`, `QUIROFANO_ID`, `EGRESO`, `CIE9MC`, `CIE9MC_ID`, `CX_REALIZADA`, `CX_REALIZADA_ID`, `TIPO_CX`, `DIAGNOSTICO`, `DIAGNOSTICO_ID`, `MEDICO_NAME`, `PACIENTE_NAME`, `PACIENTE_ID`, `EDAD`, `GENERO`, `GENERO_ID`, `REGISTRO`, `SERVICIO`, `ANESTESIA_ID`, `ANESTESIA_EMPLEADA`, `EV_ADVERSOS_ANESTESIA`, `OBSERVACIONES`, `REQUERIMIENTO`, `REQ_INSUMOS`, `REQ_HEMODERIV`, `REQ_LABORATORIO`, `REQ_ANESTESICO`, `STATUS`, `CAUSA_DIFERIDO_ID`, `SOLICITADO`, `RIESGOQX_ID`, `CONTAMINACIONQX_ID`, `EVENTOQX_ID`, `COMPLICACIONES`, `VAL_PRE_ANESTESICA`, `REINTERVENCION`, `PERMISOS`, `TIPO_PROC_ID`, `ATENCION_ID`, `TIEMPO_FUERA`, `PROCEDENCIA`, `CLASIFICACIONQX`, `REGION_PX`, `EXTENSION_PX`, `ANEXO_DETALLE`, `DESTINO_PX`, `LIBERACION_SALA`, `TIEMPO_EST`, `RIESGO_QX_PRE`, `SHOW_IN_INDEX`, `PROTOCOLO`, `CANCELADA`, `CREATED_AT`, `UPDATED_AT` FROM `hc_agenda` WHERE `ID` = :p0';
        try {
            $stmt = $con->prepare($sql);
            $stmt->bindValue(':p0', $key, PDO::PARAM_INT);
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute SELECT statement [%s]', $sql), $e);
        }
        $obj = null;
        if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $obj = new Agenda();
            $obj->hydrate($row);
            AgendaPeer::addInstanceToPool($obj, (string) $key);
        }
        $stmt->closeCursor();

        return $obj;
    }

    /**
     * Find object by primary key.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return Agenda|Agenda[]|mixed the result, formatted by the current formatter
     */
    protected function findPkComplex($key, $con)
    {
        // As the query uses a PK condition, no limit(1) is necessary.
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKey($key)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
    }

    /**
     * Find objects by primary key
     * <code>
     * $objs = $c->findPks(array(12, 56, 832), $con);
     * </code>
     * @param     array $keys Primary keys to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return PropelObjectCollection|Agenda[]|mixed the list of results, formatted by the current formatter
     */
    public function findPks($keys, $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKeys($keys)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->format($stmt);
    }

    /**
     * Filter the query by primary key
     *
     * @param     mixed $key Primary key to use for the query
     *
     * @return AgendaQuery The current query, for fluid interface
     */
    public function filterByPrimaryKey($key)
    {

        return $this->addUsingAlias(AgendaPeer::ID, $key, Criteria::EQUAL);
    }

    /**
     * Filter the query by a list of primary keys
     *
     * @param     array $keys The list of primary key to use for the query
     *
     * @return AgendaQuery The current query, for fluid interface
     */
    public function filterByPrimaryKeys($keys)
    {

        return $this->addUsingAlias(AgendaPeer::ID, $keys, Criteria::IN);
    }

    /**
     * Filter the query on the id column
     *
     * Example usage:
     * <code>
     * $query->filterById(1234); // WHERE id = 1234
     * $query->filterById(array(12, 34)); // WHERE id IN (12, 34)
     * $query->filterById(array('min' => 12)); // WHERE id > 12
     * </code>
     *
     * @param     mixed $id The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaQuery The current query, for fluid interface
     */
    public function filterById($id = null, $comparison = null)
    {
        if (is_array($id) && null === $comparison) {
            $comparison = Criteria::IN;
        }

        return $this->addUsingAlias(AgendaPeer::ID, $id, $comparison);
    }

    /**
     * Filter the query on the programacion column
     *
     * Example usage:
     * <code>
     * $query->filterByProgramacion('2011-03-14'); // WHERE programacion = '2011-03-14'
     * $query->filterByProgramacion('now'); // WHERE programacion = '2011-03-14'
     * $query->filterByProgramacion(array('max' => 'yesterday')); // WHERE programacion > '2011-03-13'
     * </code>
     *
     * @param     mixed $programacion The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaQuery The current query, for fluid interface
     */
    public function filterByProgramacion($programacion = null, $comparison = null)
    {
        if (is_array($programacion)) {
            $useMinMax = false;
            if (isset($programacion['min'])) {
                $this->addUsingAlias(AgendaPeer::PROGRAMACION, $programacion['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($programacion['max'])) {
                $this->addUsingAlias(AgendaPeer::PROGRAMACION, $programacion['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(AgendaPeer::PROGRAMACION, $programacion, $comparison);
    }

    /**
     * Filter the query on the fechaestado column
     *
     * Example usage:
     * <code>
     * $query->filterByFechaestado('2011-03-14'); // WHERE fechaestado = '2011-03-14'
     * $query->filterByFechaestado('now'); // WHERE fechaestado = '2011-03-14'
     * $query->filterByFechaestado(array('max' => 'yesterday')); // WHERE fechaestado > '2011-03-13'
     * </code>
     *
     * @param     mixed $fechaestado The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaQuery The current query, for fluid interface
     */
    public function filterByFechaestado($fechaestado = null, $comparison = null)
    {
        if (is_array($fechaestado)) {
            $useMinMax = false;
            if (isset($fechaestado['min'])) {
                $this->addUsingAlias(AgendaPeer::FECHAESTADO, $fechaestado['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($fechaestado['max'])) {
                $this->addUsingAlias(AgendaPeer::FECHAESTADO, $fechaestado['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(AgendaPeer::FECHAESTADO, $fechaestado, $comparison);
    }

    /**
     * Filter the query on the hora column
     *
     * Example usage:
     * <code>
     * $query->filterByHora('2011-03-14'); // WHERE hora = '2011-03-14'
     * $query->filterByHora('now'); // WHERE hora = '2011-03-14'
     * $query->filterByHora(array('max' => 'yesterday')); // WHERE hora > '2011-03-13'
     * </code>
     *
     * @param     mixed $hora The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaQuery The current query, for fluid interface
     */
    public function filterByHora($hora = null, $comparison = null)
    {
        if (is_array($hora)) {
            $useMinMax = false;
            if (isset($hora['min'])) {
                $this->addUsingAlias(AgendaPeer::HORA, $hora['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($hora['max'])) {
                $this->addUsingAlias(AgendaPeer::HORA, $hora['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(AgendaPeer::HORA, $hora, $comparison);
    }

    /**
     * Filter the query on the horaestado column
     *
     * Example usage:
     * <code>
     * $query->filterByHoraestado('2011-03-14'); // WHERE horaestado = '2011-03-14'
     * $query->filterByHoraestado('now'); // WHERE horaestado = '2011-03-14'
     * $query->filterByHoraestado(array('max' => 'yesterday')); // WHERE horaestado > '2011-03-13'
     * </code>
     *
     * @param     mixed $horaestado The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaQuery The current query, for fluid interface
     */
    public function filterByHoraestado($horaestado = null, $comparison = null)
    {
        if (is_array($horaestado)) {
            $useMinMax = false;
            if (isset($horaestado['min'])) {
                $this->addUsingAlias(AgendaPeer::HORAESTADO, $horaestado['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($horaestado['max'])) {
                $this->addUsingAlias(AgendaPeer::HORAESTADO, $horaestado['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(AgendaPeer::HORAESTADO, $horaestado, $comparison);
    }

    /**
     * Filter the query on the inicio column
     *
     * Example usage:
     * <code>
     * $query->filterByInicio('2011-03-14'); // WHERE inicio = '2011-03-14'
     * $query->filterByInicio('now'); // WHERE inicio = '2011-03-14'
     * $query->filterByInicio(array('max' => 'yesterday')); // WHERE inicio > '2011-03-13'
     * </code>
     *
     * @param     mixed $inicio The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaQuery The current query, for fluid interface
     */
    public function filterByInicio($inicio = null, $comparison = null)
    {
        if (is_array($inicio)) {
            $useMinMax = false;
            if (isset($inicio['min'])) {
                $this->addUsingAlias(AgendaPeer::INICIO, $inicio['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($inicio['max'])) {
                $this->addUsingAlias(AgendaPeer::INICIO, $inicio['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(AgendaPeer::INICIO, $inicio, $comparison);
    }

    /**
     * Filter the query on the last_time column
     *
     * Example usage:
     * <code>
     * $query->filterByLastTime('2011-03-14'); // WHERE last_time = '2011-03-14'
     * $query->filterByLastTime('now'); // WHERE last_time = '2011-03-14'
     * $query->filterByLastTime(array('max' => 'yesterday')); // WHERE last_time > '2011-03-13'
     * </code>
     *
     * @param     mixed $lastTime The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaQuery The current query, for fluid interface
     */
    public function filterByLastTime($lastTime = null, $comparison = null)
    {
        if (is_array($lastTime)) {
            $useMinMax = false;
            if (isset($lastTime['min'])) {
                $this->addUsingAlias(AgendaPeer::LAST_TIME, $lastTime['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($lastTime['max'])) {
                $this->addUsingAlias(AgendaPeer::LAST_TIME, $lastTime['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(AgendaPeer::LAST_TIME, $lastTime, $comparison);
    }

    /**
     * Filter the query on the ingreso column
     *
     * Example usage:
     * <code>
     * $query->filterByIngreso('2011-03-14'); // WHERE ingreso = '2011-03-14'
     * $query->filterByIngreso('now'); // WHERE ingreso = '2011-03-14'
     * $query->filterByIngreso(array('max' => 'yesterday')); // WHERE ingreso > '2011-03-13'
     * </code>
     *
     * @param     mixed $ingreso The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaQuery The current query, for fluid interface
     */
    public function filterByIngreso($ingreso = null, $comparison = null)
    {
        if (is_array($ingreso)) {
            $useMinMax = false;
            if (isset($ingreso['min'])) {
                $this->addUsingAlias(AgendaPeer::INGRESO, $ingreso['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($ingreso['max'])) {
                $this->addUsingAlias(AgendaPeer::INGRESO, $ingreso['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(AgendaPeer::INGRESO, $ingreso, $comparison);
    }

    /**
     * Filter the query on the sala_id column
     *
     * Example usage:
     * <code>
     * $query->filterBySalaId(1234); // WHERE sala_id = 1234
     * $query->filterBySalaId(array(12, 34)); // WHERE sala_id IN (12, 34)
     * $query->filterBySalaId(array('min' => 12)); // WHERE sala_id > 12
     * </code>
     *
     * @see       filterBySalaquirurgica()
     *
     * @param     mixed $salaId The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaQuery The current query, for fluid interface
     */
    public function filterBySalaId($salaId = null, $comparison = null)
    {
        if (is_array($salaId)) {
            $useMinMax = false;
            if (isset($salaId['min'])) {
                $this->addUsingAlias(AgendaPeer::SALA_ID, $salaId['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($salaId['max'])) {
                $this->addUsingAlias(AgendaPeer::SALA_ID, $salaId['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(AgendaPeer::SALA_ID, $salaId, $comparison);
    }

    /**
     * Filter the query on the quirofano_id column
     *
     * Example usage:
     * <code>
     * $query->filterByQuirofanoId(1234); // WHERE quirofano_id = 1234
     * $query->filterByQuirofanoId(array(12, 34)); // WHERE quirofano_id IN (12, 34)
     * $query->filterByQuirofanoId(array('min' => 12)); // WHERE quirofano_id > 12
     * </code>
     *
     * @see       filterByQuirofano()
     *
     * @param     mixed $quirofanoId The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaQuery The current query, for fluid interface
     */
    public function filterByQuirofanoId($quirofanoId = null, $comparison = null)
    {
        if (is_array($quirofanoId)) {
            $useMinMax = false;
            if (isset($quirofanoId['min'])) {
                $this->addUsingAlias(AgendaPeer::QUIROFANO_ID, $quirofanoId['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($quirofanoId['max'])) {
                $this->addUsingAlias(AgendaPeer::QUIROFANO_ID, $quirofanoId['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(AgendaPeer::QUIROFANO_ID, $quirofanoId, $comparison);
    }

    /**
     * Filter the query on the egreso column
     *
     * Example usage:
     * <code>
     * $query->filterByEgreso('2011-03-14'); // WHERE egreso = '2011-03-14'
     * $query->filterByEgreso('now'); // WHERE egreso = '2011-03-14'
     * $query->filterByEgreso(array('max' => 'yesterday')); // WHERE egreso > '2011-03-13'
     * </code>
     *
     * @param     mixed $egreso The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaQuery The current query, for fluid interface
     */
    public function filterByEgreso($egreso = null, $comparison = null)
    {
        if (is_array($egreso)) {
            $useMinMax = false;
            if (isset($egreso['min'])) {
                $this->addUsingAlias(AgendaPeer::EGRESO, $egreso['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($egreso['max'])) {
                $this->addUsingAlias(AgendaPeer::EGRESO, $egreso['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(AgendaPeer::EGRESO, $egreso, $comparison);
    }

    /**
     * Filter the query on the cie9mc column
     *
     * Example usage:
     * <code>
     * $query->filterByCie9mc('fooValue');   // WHERE cie9mc = 'fooValue'
     * $query->filterByCie9mc('%fooValue%'); // WHERE cie9mc LIKE '%fooValue%'
     * </code>
     *
     * @param     string $cie9mc The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaQuery The current query, for fluid interface
     */
    public function filterByCie9mc($cie9mc = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($cie9mc)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $cie9mc)) {
                $cie9mc = str_replace('*', '%', $cie9mc);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(AgendaPeer::CIE9MC, $cie9mc, $comparison);
    }

    /**
     * Filter the query on the cie9mc_id column
     *
     * Example usage:
     * <code>
     * $query->filterByCie9mcId('fooValue');   // WHERE cie9mc_id = 'fooValue'
     * $query->filterByCie9mcId('%fooValue%'); // WHERE cie9mc_id LIKE '%fooValue%'
     * </code>
     *
     * @param     string $cie9mcId The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaQuery The current query, for fluid interface
     */
    public function filterByCie9mcId($cie9mcId = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($cie9mcId)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $cie9mcId)) {
                $cie9mcId = str_replace('*', '%', $cie9mcId);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(AgendaPeer::CIE9MC_ID, $cie9mcId, $comparison);
    }

    /**
     * Filter the query on the cx_realizada column
     *
     * Example usage:
     * <code>
     * $query->filterByCxRealizada('fooValue');   // WHERE cx_realizada = 'fooValue'
     * $query->filterByCxRealizada('%fooValue%'); // WHERE cx_realizada LIKE '%fooValue%'
     * </code>
     *
     * @param     string $cxRealizada The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaQuery The current query, for fluid interface
     */
    public function filterByCxRealizada($cxRealizada = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($cxRealizada)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $cxRealizada)) {
                $cxRealizada = str_replace('*', '%', $cxRealizada);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(AgendaPeer::CX_REALIZADA, $cxRealizada, $comparison);
    }

    /**
     * Filter the query on the cx_realizada_id column
     *
     * Example usage:
     * <code>
     * $query->filterByCxRealizadaId('fooValue');   // WHERE cx_realizada_id = 'fooValue'
     * $query->filterByCxRealizadaId('%fooValue%'); // WHERE cx_realizada_id LIKE '%fooValue%'
     * </code>
     *
     * @param     string $cxRealizadaId The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaQuery The current query, for fluid interface
     */
    public function filterByCxRealizadaId($cxRealizadaId = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($cxRealizadaId)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $cxRealizadaId)) {
                $cxRealizadaId = str_replace('*', '%', $cxRealizadaId);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(AgendaPeer::CX_REALIZADA_ID, $cxRealizadaId, $comparison);
    }

    /**
     * Filter the query on the tipo_cx column
     *
     * Example usage:
     * <code>
     * $query->filterByTipoCx(1234); // WHERE tipo_cx = 1234
     * $query->filterByTipoCx(array(12, 34)); // WHERE tipo_cx IN (12, 34)
     * $query->filterByTipoCx(array('min' => 12)); // WHERE tipo_cx > 12
     * </code>
     *
     * @param     mixed $tipoCx The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaQuery The current query, for fluid interface
     */
    public function filterByTipoCx($tipoCx = null, $comparison = null)
    {
        if (is_array($tipoCx)) {
            $useMinMax = false;
            if (isset($tipoCx['min'])) {
                $this->addUsingAlias(AgendaPeer::TIPO_CX, $tipoCx['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($tipoCx['max'])) {
                $this->addUsingAlias(AgendaPeer::TIPO_CX, $tipoCx['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(AgendaPeer::TIPO_CX, $tipoCx, $comparison);
    }

    /**
     * Filter the query on the diagnostico column
     *
     * Example usage:
     * <code>
     * $query->filterByDiagnostico('fooValue');   // WHERE diagnostico = 'fooValue'
     * $query->filterByDiagnostico('%fooValue%'); // WHERE diagnostico LIKE '%fooValue%'
     * </code>
     *
     * @param     string $diagnostico The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaQuery The current query, for fluid interface
     */
    public function filterByDiagnostico($diagnostico = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($diagnostico)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $diagnostico)) {
                $diagnostico = str_replace('*', '%', $diagnostico);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(AgendaPeer::DIAGNOSTICO, $diagnostico, $comparison);
    }

    /**
     * Filter the query on the diagnostico_id column
     *
     * Example usage:
     * <code>
     * $query->filterByDiagnosticoId('fooValue');   // WHERE diagnostico_id = 'fooValue'
     * $query->filterByDiagnosticoId('%fooValue%'); // WHERE diagnostico_id LIKE '%fooValue%'
     * </code>
     *
     * @param     string $diagnosticoId The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaQuery The current query, for fluid interface
     */
    public function filterByDiagnosticoId($diagnosticoId = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($diagnosticoId)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $diagnosticoId)) {
                $diagnosticoId = str_replace('*', '%', $diagnosticoId);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(AgendaPeer::DIAGNOSTICO_ID, $diagnosticoId, $comparison);
    }

    /**
     * Filter the query on the medico_name column
     *
     * Example usage:
     * <code>
     * $query->filterByMedicoName('fooValue');   // WHERE medico_name = 'fooValue'
     * $query->filterByMedicoName('%fooValue%'); // WHERE medico_name LIKE '%fooValue%'
     * </code>
     *
     * @param     string $medicoName The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaQuery The current query, for fluid interface
     */
    public function filterByMedicoName($medicoName = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($medicoName)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $medicoName)) {
                $medicoName = str_replace('*', '%', $medicoName);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(AgendaPeer::MEDICO_NAME, $medicoName, $comparison);
    }

    /**
     * Filter the query on the paciente_name column
     *
     * Example usage:
     * <code>
     * $query->filterByPacienteName('fooValue');   // WHERE paciente_name = 'fooValue'
     * $query->filterByPacienteName('%fooValue%'); // WHERE paciente_name LIKE '%fooValue%'
     * </code>
     *
     * @param     string $pacienteName The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaQuery The current query, for fluid interface
     */
    public function filterByPacienteName($pacienteName = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($pacienteName)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $pacienteName)) {
                $pacienteName = str_replace('*', '%', $pacienteName);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(AgendaPeer::PACIENTE_NAME, $pacienteName, $comparison);
    }

    /**
     * Filter the query on the paciente_id column
     *
     * Example usage:
     * <code>
     * $query->filterByPacienteId(1234); // WHERE paciente_id = 1234
     * $query->filterByPacienteId(array(12, 34)); // WHERE paciente_id IN (12, 34)
     * $query->filterByPacienteId(array('min' => 12)); // WHERE paciente_id > 12
     * </code>
     *
     * @param     mixed $pacienteId The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaQuery The current query, for fluid interface
     */
    public function filterByPacienteId($pacienteId = null, $comparison = null)
    {
        if (is_array($pacienteId)) {
            $useMinMax = false;
            if (isset($pacienteId['min'])) {
                $this->addUsingAlias(AgendaPeer::PACIENTE_ID, $pacienteId['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($pacienteId['max'])) {
                $this->addUsingAlias(AgendaPeer::PACIENTE_ID, $pacienteId['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(AgendaPeer::PACIENTE_ID, $pacienteId, $comparison);
    }

    /**
     * Filter the query on the edad column
     *
     * Example usage:
     * <code>
     * $query->filterByEdad('fooValue');   // WHERE edad = 'fooValue'
     * $query->filterByEdad('%fooValue%'); // WHERE edad LIKE '%fooValue%'
     * </code>
     *
     * @param     string $edad The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaQuery The current query, for fluid interface
     */
    public function filterByEdad($edad = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($edad)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $edad)) {
                $edad = str_replace('*', '%', $edad);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(AgendaPeer::EDAD, $edad, $comparison);
    }

    /**
     * Filter the query on the genero column
     *
     * Example usage:
     * <code>
     * $query->filterByGenero('fooValue');   // WHERE genero = 'fooValue'
     * $query->filterByGenero('%fooValue%'); // WHERE genero LIKE '%fooValue%'
     * </code>
     *
     * @param     string $genero The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaQuery The current query, for fluid interface
     */
    public function filterByGenero($genero = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($genero)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $genero)) {
                $genero = str_replace('*', '%', $genero);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(AgendaPeer::GENERO, $genero, $comparison);
    }

    /**
     * Filter the query on the genero_id column
     *
     * Example usage:
     * <code>
     * $query->filterByGeneroId(1234); // WHERE genero_id = 1234
     * $query->filterByGeneroId(array(12, 34)); // WHERE genero_id IN (12, 34)
     * $query->filterByGeneroId(array('min' => 12)); // WHERE genero_id > 12
     * </code>
     *
     * @param     mixed $generoId The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaQuery The current query, for fluid interface
     */
    public function filterByGeneroId($generoId = null, $comparison = null)
    {
        if (is_array($generoId)) {
            $useMinMax = false;
            if (isset($generoId['min'])) {
                $this->addUsingAlias(AgendaPeer::GENERO_ID, $generoId['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($generoId['max'])) {
                $this->addUsingAlias(AgendaPeer::GENERO_ID, $generoId['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(AgendaPeer::GENERO_ID, $generoId, $comparison);
    }

    /**
     * Filter the query on the registro column
     *
     * Example usage:
     * <code>
     * $query->filterByRegistro('fooValue');   // WHERE registro = 'fooValue'
     * $query->filterByRegistro('%fooValue%'); // WHERE registro LIKE '%fooValue%'
     * </code>
     *
     * @param     string $registro The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaQuery The current query, for fluid interface
     */
    public function filterByRegistro($registro = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($registro)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $registro)) {
                $registro = str_replace('*', '%', $registro);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(AgendaPeer::REGISTRO, $registro, $comparison);
    }

    /**
     * Filter the query on the servicio column
     *
     * Example usage:
     * <code>
     * $query->filterByServicio(1234); // WHERE servicio = 1234
     * $query->filterByServicio(array(12, 34)); // WHERE servicio IN (12, 34)
     * $query->filterByServicio(array('min' => 12)); // WHERE servicio > 12
     * </code>
     *
     * @see       filterByEspecialidad()
     *
     * @param     mixed $servicio The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaQuery The current query, for fluid interface
     */
    public function filterByServicio($servicio = null, $comparison = null)
    {
        if (is_array($servicio)) {
            $useMinMax = false;
            if (isset($servicio['min'])) {
                $this->addUsingAlias(AgendaPeer::SERVICIO, $servicio['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($servicio['max'])) {
                $this->addUsingAlias(AgendaPeer::SERVICIO, $servicio['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(AgendaPeer::SERVICIO, $servicio, $comparison);
    }

    /**
     * Filter the query on the anestesia_id column
     *
     * Example usage:
     * <code>
     * $query->filterByAnestesiaId(1234); // WHERE anestesia_id = 1234
     * $query->filterByAnestesiaId(array(12, 34)); // WHERE anestesia_id IN (12, 34)
     * $query->filterByAnestesiaId(array('min' => 12)); // WHERE anestesia_id > 12
     * </code>
     *
     * @param     mixed $anestesiaId The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaQuery The current query, for fluid interface
     */
    public function filterByAnestesiaId($anestesiaId = null, $comparison = null)
    {
        if (is_array($anestesiaId)) {
            $useMinMax = false;
            if (isset($anestesiaId['min'])) {
                $this->addUsingAlias(AgendaPeer::ANESTESIA_ID, $anestesiaId['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($anestesiaId['max'])) {
                $this->addUsingAlias(AgendaPeer::ANESTESIA_ID, $anestesiaId['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(AgendaPeer::ANESTESIA_ID, $anestesiaId, $comparison);
    }

    /**
     * Filter the query on the anestesia_empleada column
     *
     * Example usage:
     * <code>
     * $query->filterByAnestesiaEmpleada('fooValue');   // WHERE anestesia_empleada = 'fooValue'
     * $query->filterByAnestesiaEmpleada('%fooValue%'); // WHERE anestesia_empleada LIKE '%fooValue%'
     * </code>
     *
     * @param     string $anestesiaEmpleada The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaQuery The current query, for fluid interface
     */
    public function filterByAnestesiaEmpleada($anestesiaEmpleada = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($anestesiaEmpleada)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $anestesiaEmpleada)) {
                $anestesiaEmpleada = str_replace('*', '%', $anestesiaEmpleada);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(AgendaPeer::ANESTESIA_EMPLEADA, $anestesiaEmpleada, $comparison);
    }

    /**
     * Filter the query on the ev_adversos_anestesia column
     *
     * Example usage:
     * <code>
     * $query->filterByEvAdversosAnestesia('fooValue');   // WHERE ev_adversos_anestesia = 'fooValue'
     * $query->filterByEvAdversosAnestesia('%fooValue%'); // WHERE ev_adversos_anestesia LIKE '%fooValue%'
     * </code>
     *
     * @param     string $evAdversosAnestesia The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaQuery The current query, for fluid interface
     */
    public function filterByEvAdversosAnestesia($evAdversosAnestesia = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($evAdversosAnestesia)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $evAdversosAnestesia)) {
                $evAdversosAnestesia = str_replace('*', '%', $evAdversosAnestesia);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(AgendaPeer::EV_ADVERSOS_ANESTESIA, $evAdversosAnestesia, $comparison);
    }

    /**
     * Filter the query on the observaciones column
     *
     * Example usage:
     * <code>
     * $query->filterByObservaciones('fooValue');   // WHERE observaciones = 'fooValue'
     * $query->filterByObservaciones('%fooValue%'); // WHERE observaciones LIKE '%fooValue%'
     * </code>
     *
     * @param     string $observaciones The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaQuery The current query, for fluid interface
     */
    public function filterByObservaciones($observaciones = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($observaciones)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $observaciones)) {
                $observaciones = str_replace('*', '%', $observaciones);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(AgendaPeer::OBSERVACIONES, $observaciones, $comparison);
    }

    /**
     * Filter the query on the requerimiento column
     *
     * Example usage:
     * <code>
     * $query->filterByRequerimiento('fooValue');   // WHERE requerimiento = 'fooValue'
     * $query->filterByRequerimiento('%fooValue%'); // WHERE requerimiento LIKE '%fooValue%'
     * </code>
     *
     * @param     string $requerimiento The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaQuery The current query, for fluid interface
     */
    public function filterByRequerimiento($requerimiento = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($requerimiento)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $requerimiento)) {
                $requerimiento = str_replace('*', '%', $requerimiento);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(AgendaPeer::REQUERIMIENTO, $requerimiento, $comparison);
    }

    /**
     * Filter the query on the req_insumos column
     *
     * Example usage:
     * <code>
     * $query->filterByReqInsumos('fooValue');   // WHERE req_insumos = 'fooValue'
     * $query->filterByReqInsumos('%fooValue%'); // WHERE req_insumos LIKE '%fooValue%'
     * </code>
     *
     * @param     string $reqInsumos The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaQuery The current query, for fluid interface
     */
    public function filterByReqInsumos($reqInsumos = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($reqInsumos)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $reqInsumos)) {
                $reqInsumos = str_replace('*', '%', $reqInsumos);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(AgendaPeer::REQ_INSUMOS, $reqInsumos, $comparison);
    }

    /**
     * Filter the query on the req_hemoderiv column
     *
     * Example usage:
     * <code>
     * $query->filterByReqHemoderiv('fooValue');   // WHERE req_hemoderiv = 'fooValue'
     * $query->filterByReqHemoderiv('%fooValue%'); // WHERE req_hemoderiv LIKE '%fooValue%'
     * </code>
     *
     * @param     string $reqHemoderiv The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaQuery The current query, for fluid interface
     */
    public function filterByReqHemoderiv($reqHemoderiv = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($reqHemoderiv)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $reqHemoderiv)) {
                $reqHemoderiv = str_replace('*', '%', $reqHemoderiv);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(AgendaPeer::REQ_HEMODERIV, $reqHemoderiv, $comparison);
    }

    /**
     * Filter the query on the req_laboratorio column
     *
     * Example usage:
     * <code>
     * $query->filterByReqLaboratorio('fooValue');   // WHERE req_laboratorio = 'fooValue'
     * $query->filterByReqLaboratorio('%fooValue%'); // WHERE req_laboratorio LIKE '%fooValue%'
     * </code>
     *
     * @param     string $reqLaboratorio The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaQuery The current query, for fluid interface
     */
    public function filterByReqLaboratorio($reqLaboratorio = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($reqLaboratorio)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $reqLaboratorio)) {
                $reqLaboratorio = str_replace('*', '%', $reqLaboratorio);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(AgendaPeer::REQ_LABORATORIO, $reqLaboratorio, $comparison);
    }

    /**
     * Filter the query on the req_anestesico column
     *
     * Example usage:
     * <code>
     * $query->filterByReqAnestesico('fooValue');   // WHERE req_anestesico = 'fooValue'
     * $query->filterByReqAnestesico('%fooValue%'); // WHERE req_anestesico LIKE '%fooValue%'
     * </code>
     *
     * @param     string $reqAnestesico The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaQuery The current query, for fluid interface
     */
    public function filterByReqAnestesico($reqAnestesico = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($reqAnestesico)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $reqAnestesico)) {
                $reqAnestesico = str_replace('*', '%', $reqAnestesico);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(AgendaPeer::REQ_ANESTESICO, $reqAnestesico, $comparison);
    }

    /**
     * Filter the query on the status column
     *
     * Example usage:
     * <code>
     * $query->filterByStatus(1234); // WHERE status = 1234
     * $query->filterByStatus(array(12, 34)); // WHERE status IN (12, 34)
     * $query->filterByStatus(array('min' => 12)); // WHERE status > 12
     * </code>
     *
     * @param     mixed $status The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaQuery The current query, for fluid interface
     */
    public function filterByStatus($status = null, $comparison = null)
    {
        if (is_array($status)) {
            $useMinMax = false;
            if (isset($status['min'])) {
                $this->addUsingAlias(AgendaPeer::STATUS, $status['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($status['max'])) {
                $this->addUsingAlias(AgendaPeer::STATUS, $status['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(AgendaPeer::STATUS, $status, $comparison);
    }

    /**
     * Filter the query on the causa_diferido_id column
     *
     * Example usage:
     * <code>
     * $query->filterByCausaDiferidoId(1234); // WHERE causa_diferido_id = 1234
     * $query->filterByCausaDiferidoId(array(12, 34)); // WHERE causa_diferido_id IN (12, 34)
     * $query->filterByCausaDiferidoId(array('min' => 12)); // WHERE causa_diferido_id > 12
     * </code>
     *
     * @see       filterByCausadiferido()
     *
     * @param     mixed $causaDiferidoId The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaQuery The current query, for fluid interface
     */
    public function filterByCausaDiferidoId($causaDiferidoId = null, $comparison = null)
    {
        if (is_array($causaDiferidoId)) {
            $useMinMax = false;
            if (isset($causaDiferidoId['min'])) {
                $this->addUsingAlias(AgendaPeer::CAUSA_DIFERIDO_ID, $causaDiferidoId['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($causaDiferidoId['max'])) {
                $this->addUsingAlias(AgendaPeer::CAUSA_DIFERIDO_ID, $causaDiferidoId['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(AgendaPeer::CAUSA_DIFERIDO_ID, $causaDiferidoId, $comparison);
    }

    /**
     * Filter the query on the solicitado column
     *
     * Example usage:
     * <code>
     * $query->filterBySolicitado(true); // WHERE solicitado = true
     * $query->filterBySolicitado('yes'); // WHERE solicitado = true
     * </code>
     *
     * @param     boolean|string $solicitado The value to use as filter.
     *              Non-boolean arguments are converted using the following rules:
     *                * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *                * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     *              Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaQuery The current query, for fluid interface
     */
    public function filterBySolicitado($solicitado = null, $comparison = null)
    {
        if (is_string($solicitado)) {
            $solicitado = in_array(strtolower($solicitado), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
        }

        return $this->addUsingAlias(AgendaPeer::SOLICITADO, $solicitado, $comparison);
    }

    /**
     * Filter the query on the riesgoqx_id column
     *
     * Example usage:
     * <code>
     * $query->filterByRiesgoqxId(1234); // WHERE riesgoqx_id = 1234
     * $query->filterByRiesgoqxId(array(12, 34)); // WHERE riesgoqx_id IN (12, 34)
     * $query->filterByRiesgoqxId(array('min' => 12)); // WHERE riesgoqx_id > 12
     * </code>
     *
     * @see       filterByRiesgoqx()
     *
     * @param     mixed $riesgoqxId The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaQuery The current query, for fluid interface
     */
    public function filterByRiesgoqxId($riesgoqxId = null, $comparison = null)
    {
        if (is_array($riesgoqxId)) {
            $useMinMax = false;
            if (isset($riesgoqxId['min'])) {
                $this->addUsingAlias(AgendaPeer::RIESGOQX_ID, $riesgoqxId['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($riesgoqxId['max'])) {
                $this->addUsingAlias(AgendaPeer::RIESGOQX_ID, $riesgoqxId['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(AgendaPeer::RIESGOQX_ID, $riesgoqxId, $comparison);
    }

    /**
     * Filter the query on the contaminacionqx_id column
     *
     * Example usage:
     * <code>
     * $query->filterByContaminacionqxId(1234); // WHERE contaminacionqx_id = 1234
     * $query->filterByContaminacionqxId(array(12, 34)); // WHERE contaminacionqx_id IN (12, 34)
     * $query->filterByContaminacionqxId(array('min' => 12)); // WHERE contaminacionqx_id > 12
     * </code>
     *
     * @see       filterByContaminacionqx()
     *
     * @param     mixed $contaminacionqxId The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaQuery The current query, for fluid interface
     */
    public function filterByContaminacionqxId($contaminacionqxId = null, $comparison = null)
    {
        if (is_array($contaminacionqxId)) {
            $useMinMax = false;
            if (isset($contaminacionqxId['min'])) {
                $this->addUsingAlias(AgendaPeer::CONTAMINACIONQX_ID, $contaminacionqxId['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($contaminacionqxId['max'])) {
                $this->addUsingAlias(AgendaPeer::CONTAMINACIONQX_ID, $contaminacionqxId['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(AgendaPeer::CONTAMINACIONQX_ID, $contaminacionqxId, $comparison);
    }

    /**
     * Filter the query on the eventoqx_id column
     *
     * Example usage:
     * <code>
     * $query->filterByEventoqxId(1234); // WHERE eventoqx_id = 1234
     * $query->filterByEventoqxId(array(12, 34)); // WHERE eventoqx_id IN (12, 34)
     * $query->filterByEventoqxId(array('min' => 12)); // WHERE eventoqx_id > 12
     * </code>
     *
     * @see       filterByEventoqx()
     *
     * @param     mixed $eventoqxId The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaQuery The current query, for fluid interface
     */
    public function filterByEventoqxId($eventoqxId = null, $comparison = null)
    {
        if (is_array($eventoqxId)) {
            $useMinMax = false;
            if (isset($eventoqxId['min'])) {
                $this->addUsingAlias(AgendaPeer::EVENTOQX_ID, $eventoqxId['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($eventoqxId['max'])) {
                $this->addUsingAlias(AgendaPeer::EVENTOQX_ID, $eventoqxId['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(AgendaPeer::EVENTOQX_ID, $eventoqxId, $comparison);
    }

    /**
     * Filter the query on the complicaciones column
     *
     * Example usage:
     * <code>
     * $query->filterByComplicaciones('fooValue');   // WHERE complicaciones = 'fooValue'
     * $query->filterByComplicaciones('%fooValue%'); // WHERE complicaciones LIKE '%fooValue%'
     * </code>
     *
     * @param     string $complicaciones The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaQuery The current query, for fluid interface
     */
    public function filterByComplicaciones($complicaciones = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($complicaciones)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $complicaciones)) {
                $complicaciones = str_replace('*', '%', $complicaciones);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(AgendaPeer::COMPLICACIONES, $complicaciones, $comparison);
    }

    /**
     * Filter the query on the val_pre_anestesica column
     *
     * Example usage:
     * <code>
     * $query->filterByValPreAnestesica('fooValue');   // WHERE val_pre_anestesica = 'fooValue'
     * $query->filterByValPreAnestesica('%fooValue%'); // WHERE val_pre_anestesica LIKE '%fooValue%'
     * </code>
     *
     * @param     string $valPreAnestesica The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaQuery The current query, for fluid interface
     */
    public function filterByValPreAnestesica($valPreAnestesica = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($valPreAnestesica)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $valPreAnestesica)) {
                $valPreAnestesica = str_replace('*', '%', $valPreAnestesica);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(AgendaPeer::VAL_PRE_ANESTESICA, $valPreAnestesica, $comparison);
    }

    /**
     * Filter the query on the reintervencion column
     *
     * Example usage:
     * <code>
     * $query->filterByReintervencion(true); // WHERE reintervencion = true
     * $query->filterByReintervencion('yes'); // WHERE reintervencion = true
     * </code>
     *
     * @param     boolean|string $reintervencion The value to use as filter.
     *              Non-boolean arguments are converted using the following rules:
     *                * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *                * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     *              Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaQuery The current query, for fluid interface
     */
    public function filterByReintervencion($reintervencion = null, $comparison = null)
    {
        if (is_string($reintervencion)) {
            $reintervencion = in_array(strtolower($reintervencion), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
        }

        return $this->addUsingAlias(AgendaPeer::REINTERVENCION, $reintervencion, $comparison);
    }

    /**
     * Filter the query on the permisos column
     *
     * @param     mixed $permisos The value to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaQuery The current query, for fluid interface
     */
    public function filterByPermisos($permisos = null, $comparison = null)
    {
        if (is_object($permisos)) {
            $permisos = serialize($permisos);
        }

        return $this->addUsingAlias(AgendaPeer::PERMISOS, $permisos, $comparison);
    }

    /**
     * Filter the query on the tipo_proc_id column
     *
     * Example usage:
     * <code>
     * $query->filterByTipoProcId(1234); // WHERE tipo_proc_id = 1234
     * $query->filterByTipoProcId(array(12, 34)); // WHERE tipo_proc_id IN (12, 34)
     * $query->filterByTipoProcId(array('min' => 12)); // WHERE tipo_proc_id > 12
     * </code>
     *
     * @see       filterByProcedimiento()
     *
     * @param     mixed $tipoProcId The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaQuery The current query, for fluid interface
     */
    public function filterByTipoProcId($tipoProcId = null, $comparison = null)
    {
        if (is_array($tipoProcId)) {
            $useMinMax = false;
            if (isset($tipoProcId['min'])) {
                $this->addUsingAlias(AgendaPeer::TIPO_PROC_ID, $tipoProcId['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($tipoProcId['max'])) {
                $this->addUsingAlias(AgendaPeer::TIPO_PROC_ID, $tipoProcId['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(AgendaPeer::TIPO_PROC_ID, $tipoProcId, $comparison);
    }

    /**
     * Filter the query on the atencion_id column
     *
     * Example usage:
     * <code>
     * $query->filterByAtencionId(1234); // WHERE atencion_id = 1234
     * $query->filterByAtencionId(array(12, 34)); // WHERE atencion_id IN (12, 34)
     * $query->filterByAtencionId(array('min' => 12)); // WHERE atencion_id > 12
     * </code>
     *
     * @see       filterByAtencion()
     *
     * @param     mixed $atencionId The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaQuery The current query, for fluid interface
     */
    public function filterByAtencionId($atencionId = null, $comparison = null)
    {
        if (is_array($atencionId)) {
            $useMinMax = false;
            if (isset($atencionId['min'])) {
                $this->addUsingAlias(AgendaPeer::ATENCION_ID, $atencionId['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($atencionId['max'])) {
                $this->addUsingAlias(AgendaPeer::ATENCION_ID, $atencionId['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(AgendaPeer::ATENCION_ID, $atencionId, $comparison);
    }

    /**
     * Filter the query on the tiempo_fuera column
     *
     * Example usage:
     * <code>
     * $query->filterByTiempoFuera(true); // WHERE tiempo_fuera = true
     * $query->filterByTiempoFuera('yes'); // WHERE tiempo_fuera = true
     * </code>
     *
     * @param     boolean|string $tiempoFuera The value to use as filter.
     *              Non-boolean arguments are converted using the following rules:
     *                * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *                * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     *              Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaQuery The current query, for fluid interface
     */
    public function filterByTiempoFuera($tiempoFuera = null, $comparison = null)
    {
        if (is_string($tiempoFuera)) {
            $tiempo_fuera = in_array(strtolower($tiempoFuera), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
        }

        return $this->addUsingAlias(AgendaPeer::TIEMPO_FUERA, $tiempoFuera, $comparison);
    }

    /**
     * Filter the query on the procedencia column
     *
     * Example usage:
     * <code>
     * $query->filterByProcedencia('fooValue');   // WHERE procedencia = 'fooValue'
     * $query->filterByProcedencia('%fooValue%'); // WHERE procedencia LIKE '%fooValue%'
     * </code>
     *
     * @param     string $procedencia The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaQuery The current query, for fluid interface
     */
    public function filterByProcedencia($procedencia = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($procedencia)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $procedencia)) {
                $procedencia = str_replace('*', '%', $procedencia);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(AgendaPeer::PROCEDENCIA, $procedencia, $comparison);
    }

    /**
     * Filter the query on the clasificacionqx column
     *
     * Example usage:
     * <code>
     * $query->filterByClasificacionqx(1234); // WHERE clasificacionqx = 1234
     * $query->filterByClasificacionqx(array(12, 34)); // WHERE clasificacionqx IN (12, 34)
     * $query->filterByClasificacionqx(array('min' => 12)); // WHERE clasificacionqx > 12
     * </code>
     *
     * @param     mixed $clasificacionqx The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaQuery The current query, for fluid interface
     */
    public function filterByClasificacionqx($clasificacionqx = null, $comparison = null)
    {
        if (is_array($clasificacionqx)) {
            $useMinMax = false;
            if (isset($clasificacionqx['min'])) {
                $this->addUsingAlias(AgendaPeer::CLASIFICACIONQX, $clasificacionqx['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($clasificacionqx['max'])) {
                $this->addUsingAlias(AgendaPeer::CLASIFICACIONQX, $clasificacionqx['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(AgendaPeer::CLASIFICACIONQX, $clasificacionqx, $comparison);
    }

    /**
     * Filter the query on the region_px column
     *
     * Example usage:
     * <code>
     * $query->filterByRegionPx(1234); // WHERE region_px = 1234
     * $query->filterByRegionPx(array(12, 34)); // WHERE region_px IN (12, 34)
     * $query->filterByRegionPx(array('min' => 12)); // WHERE region_px > 12
     * </code>
     *
     * @param     mixed $regionPx The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaQuery The current query, for fluid interface
     */
    public function filterByRegionPx($regionPx = null, $comparison = null)
    {
        if (is_array($regionPx)) {
            $useMinMax = false;
            if (isset($regionPx['min'])) {
                $this->addUsingAlias(AgendaPeer::REGION_PX, $regionPx['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($regionPx['max'])) {
                $this->addUsingAlias(AgendaPeer::REGION_PX, $regionPx['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(AgendaPeer::REGION_PX, $regionPx, $comparison);
    }

    /**
     * Filter the query on the extension_px column
     *
     * Example usage:
     * <code>
     * $query->filterByExtensionPx(1234); // WHERE extension_px = 1234
     * $query->filterByExtensionPx(array(12, 34)); // WHERE extension_px IN (12, 34)
     * $query->filterByExtensionPx(array('min' => 12)); // WHERE extension_px > 12
     * </code>
     *
     * @param     mixed $extensionPx The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaQuery The current query, for fluid interface
     */
    public function filterByExtensionPx($extensionPx = null, $comparison = null)
    {
        if (is_array($extensionPx)) {
            $useMinMax = false;
            if (isset($extensionPx['min'])) {
                $this->addUsingAlias(AgendaPeer::EXTENSION_PX, $extensionPx['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($extensionPx['max'])) {
                $this->addUsingAlias(AgendaPeer::EXTENSION_PX, $extensionPx['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(AgendaPeer::EXTENSION_PX, $extensionPx, $comparison);
    }

    /**
     * Filter the query on the anexo_detalle column
     *
     * Example usage:
     * <code>
     * $query->filterByAnexoDetalle(1234); // WHERE anexo_detalle = 1234
     * $query->filterByAnexoDetalle(array(12, 34)); // WHERE anexo_detalle IN (12, 34)
     * $query->filterByAnexoDetalle(array('min' => 12)); // WHERE anexo_detalle > 12
     * </code>
     *
     * @param     mixed $anexoDetalle The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaQuery The current query, for fluid interface
     */
    public function filterByAnexoDetalle($anexoDetalle = null, $comparison = null)
    {
        if (is_array($anexoDetalle)) {
            $useMinMax = false;
            if (isset($anexoDetalle['min'])) {
                $this->addUsingAlias(AgendaPeer::ANEXO_DETALLE, $anexoDetalle['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($anexoDetalle['max'])) {
                $this->addUsingAlias(AgendaPeer::ANEXO_DETALLE, $anexoDetalle['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(AgendaPeer::ANEXO_DETALLE, $anexoDetalle, $comparison);
    }

    /**
     * Filter the query on the destino_px column
     *
     * Example usage:
     * <code>
     * $query->filterByDestinoPx(1234); // WHERE destino_px = 1234
     * $query->filterByDestinoPx(array(12, 34)); // WHERE destino_px IN (12, 34)
     * $query->filterByDestinoPx(array('min' => 12)); // WHERE destino_px > 12
     * </code>
     *
     * @param     mixed $destinoPx The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaQuery The current query, for fluid interface
     */
    public function filterByDestinoPx($destinoPx = null, $comparison = null)
    {
        if (is_array($destinoPx)) {
            $useMinMax = false;
            if (isset($destinoPx['min'])) {
                $this->addUsingAlias(AgendaPeer::DESTINO_PX, $destinoPx['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($destinoPx['max'])) {
                $this->addUsingAlias(AgendaPeer::DESTINO_PX, $destinoPx['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(AgendaPeer::DESTINO_PX, $destinoPx, $comparison);
    }

    /**
     * Filter the query on the liberacion_sala column
     *
     * Example usage:
     * <code>
     * $query->filterByLiberacionSala('2011-03-14'); // WHERE liberacion_sala = '2011-03-14'
     * $query->filterByLiberacionSala('now'); // WHERE liberacion_sala = '2011-03-14'
     * $query->filterByLiberacionSala(array('max' => 'yesterday')); // WHERE liberacion_sala > '2011-03-13'
     * </code>
     *
     * @param     mixed $liberacionSala The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaQuery The current query, for fluid interface
     */
    public function filterByLiberacionSala($liberacionSala = null, $comparison = null)
    {
        if (is_array($liberacionSala)) {
            $useMinMax = false;
            if (isset($liberacionSala['min'])) {
                $this->addUsingAlias(AgendaPeer::LIBERACION_SALA, $liberacionSala['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($liberacionSala['max'])) {
                $this->addUsingAlias(AgendaPeer::LIBERACION_SALA, $liberacionSala['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(AgendaPeer::LIBERACION_SALA, $liberacionSala, $comparison);
    }

    /**
     * Filter the query on the tiempo_est column
     *
     * Example usage:
     * <code>
     * $query->filterByTiempoEst('2011-03-14'); // WHERE tiempo_est = '2011-03-14'
     * $query->filterByTiempoEst('now'); // WHERE tiempo_est = '2011-03-14'
     * $query->filterByTiempoEst(array('max' => 'yesterday')); // WHERE tiempo_est > '2011-03-13'
     * </code>
     *
     * @param     mixed $tiempoEst The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaQuery The current query, for fluid interface
     */
    public function filterByTiempoEst($tiempoEst = null, $comparison = null)
    {
        if (is_array($tiempoEst)) {
            $useMinMax = false;
            if (isset($tiempoEst['min'])) {
                $this->addUsingAlias(AgendaPeer::TIEMPO_EST, $tiempoEst['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($tiempoEst['max'])) {
                $this->addUsingAlias(AgendaPeer::TIEMPO_EST, $tiempoEst['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(AgendaPeer::TIEMPO_EST, $tiempoEst, $comparison);
    }

    /**
     * Filter the query on the riesgo_qx_pre column
     *
     * Example usage:
     * <code>
     * $query->filterByRiesgoQxPre('fooValue');   // WHERE riesgo_qx_pre = 'fooValue'
     * $query->filterByRiesgoQxPre('%fooValue%'); // WHERE riesgo_qx_pre LIKE '%fooValue%'
     * </code>
     *
     * @param     string $riesgoQxPre The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaQuery The current query, for fluid interface
     */
    public function filterByRiesgoQxPre($riesgoQxPre = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($riesgoQxPre)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $riesgoQxPre)) {
                $riesgoQxPre = str_replace('*', '%', $riesgoQxPre);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(AgendaPeer::RIESGO_QX_PRE, $riesgoQxPre, $comparison);
    }

    /**
     * Filter the query on the show_in_index column
     *
     * Example usage:
     * <code>
     * $query->filterByShowInIndex(true); // WHERE show_in_index = true
     * $query->filterByShowInIndex('yes'); // WHERE show_in_index = true
     * </code>
     *
     * @param     boolean|string $showInIndex The value to use as filter.
     *              Non-boolean arguments are converted using the following rules:
     *                * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *                * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     *              Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaQuery The current query, for fluid interface
     */
    public function filterByShowInIndex($showInIndex = null, $comparison = null)
    {
        if (is_string($showInIndex)) {
            $show_in_index = in_array(strtolower($showInIndex), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
        }

        return $this->addUsingAlias(AgendaPeer::SHOW_IN_INDEX, $showInIndex, $comparison);
    }

    /**
     * Filter the query on the protocolo column
     *
     * Example usage:
     * <code>
     * $query->filterByProtocolo(true); // WHERE protocolo = true
     * $query->filterByProtocolo('yes'); // WHERE protocolo = true
     * </code>
     *
     * @param     boolean|string $protocolo The value to use as filter.
     *              Non-boolean arguments are converted using the following rules:
     *                * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *                * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     *              Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaQuery The current query, for fluid interface
     */
    public function filterByProtocolo($protocolo = null, $comparison = null)
    {
        if (is_string($protocolo)) {
            $protocolo = in_array(strtolower($protocolo), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
        }

        return $this->addUsingAlias(AgendaPeer::PROTOCOLO, $protocolo, $comparison);
    }

    /**
     * Filter the query on the cancelada column
     *
     * Example usage:
     * <code>
     * $query->filterByCancelada(true); // WHERE cancelada = true
     * $query->filterByCancelada('yes'); // WHERE cancelada = true
     * </code>
     *
     * @param     boolean|string $cancelada The value to use as filter.
     *              Non-boolean arguments are converted using the following rules:
     *                * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *                * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     *              Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaQuery The current query, for fluid interface
     */
    public function filterByCancelada($cancelada = null, $comparison = null)
    {
        if (is_string($cancelada)) {
            $cancelada = in_array(strtolower($cancelada), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
        }

        return $this->addUsingAlias(AgendaPeer::CANCELADA, $cancelada, $comparison);
    }

    /**
     * Filter the query on the created_at column
     *
     * Example usage:
     * <code>
     * $query->filterByCreatedAt('2011-03-14'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt('now'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt(array('max' => 'yesterday')); // WHERE created_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $createdAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaQuery The current query, for fluid interface
     */
    public function filterByCreatedAt($createdAt = null, $comparison = null)
    {
        if (is_array($createdAt)) {
            $useMinMax = false;
            if (isset($createdAt['min'])) {
                $this->addUsingAlias(AgendaPeer::CREATED_AT, $createdAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($createdAt['max'])) {
                $this->addUsingAlias(AgendaPeer::CREATED_AT, $createdAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(AgendaPeer::CREATED_AT, $createdAt, $comparison);
    }

    /**
     * Filter the query on the updated_at column
     *
     * Example usage:
     * <code>
     * $query->filterByUpdatedAt('2011-03-14'); // WHERE updated_at = '2011-03-14'
     * $query->filterByUpdatedAt('now'); // WHERE updated_at = '2011-03-14'
     * $query->filterByUpdatedAt(array('max' => 'yesterday')); // WHERE updated_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $updatedAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaQuery The current query, for fluid interface
     */
    public function filterByUpdatedAt($updatedAt = null, $comparison = null)
    {
        if (is_array($updatedAt)) {
            $useMinMax = false;
            if (isset($updatedAt['min'])) {
                $this->addUsingAlias(AgendaPeer::UPDATED_AT, $updatedAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($updatedAt['max'])) {
                $this->addUsingAlias(AgendaPeer::UPDATED_AT, $updatedAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(AgendaPeer::UPDATED_AT, $updatedAt, $comparison);
    }

    /**
     * Filter the query by a related Salaquirurgica object
     *
     * @param   Salaquirurgica|PropelObjectCollection $salaquirurgica The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   AgendaQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterBySalaquirurgica($salaquirurgica, $comparison = null)
    {
        if ($salaquirurgica instanceof Salaquirurgica) {
            return $this
                ->addUsingAlias(AgendaPeer::SALA_ID, $salaquirurgica->getId(), $comparison);
        } elseif ($salaquirurgica instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(AgendaPeer::SALA_ID, $salaquirurgica->toKeyValue('PrimaryKey', 'Id'), $comparison);
        } else {
            throw new PropelException('filterBySalaquirurgica() only accepts arguments of type Salaquirurgica or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Salaquirurgica relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return AgendaQuery The current query, for fluid interface
     */
    public function joinSalaquirurgica($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Salaquirurgica');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Salaquirurgica');
        }

        return $this;
    }

    /**
     * Use the Salaquirurgica relation Salaquirurgica object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   SalaquirurgicaQuery A secondary query class using the current class as primary query
     */
    public function useSalaquirurgicaQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinSalaquirurgica($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Salaquirurgica', 'SalaquirurgicaQuery');
    }

    /**
     * Filter the query by a related Quirofano object
     *
     * @param   Quirofano|PropelObjectCollection $quirofano The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   AgendaQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByQuirofano($quirofano, $comparison = null)
    {
        if ($quirofano instanceof Quirofano) {
            return $this
                ->addUsingAlias(AgendaPeer::QUIROFANO_ID, $quirofano->getId(), $comparison);
        } elseif ($quirofano instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(AgendaPeer::QUIROFANO_ID, $quirofano->toKeyValue('PrimaryKey', 'Id'), $comparison);
        } else {
            throw new PropelException('filterByQuirofano() only accepts arguments of type Quirofano or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Quirofano relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return AgendaQuery The current query, for fluid interface
     */
    public function joinQuirofano($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Quirofano');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Quirofano');
        }

        return $this;
    }

    /**
     * Use the Quirofano relation Quirofano object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   QuirofanoQuery A secondary query class using the current class as primary query
     */
    public function useQuirofanoQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinQuirofano($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Quirofano', 'QuirofanoQuery');
    }

    /**
     * Filter the query by a related Riesgoqx object
     *
     * @param   Riesgoqx|PropelObjectCollection $riesgoqx The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   AgendaQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByRiesgoqx($riesgoqx, $comparison = null)
    {
        if ($riesgoqx instanceof Riesgoqx) {
            return $this
                ->addUsingAlias(AgendaPeer::RIESGOQX_ID, $riesgoqx->getId(), $comparison);
        } elseif ($riesgoqx instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(AgendaPeer::RIESGOQX_ID, $riesgoqx->toKeyValue('PrimaryKey', 'Id'), $comparison);
        } else {
            throw new PropelException('filterByRiesgoqx() only accepts arguments of type Riesgoqx or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Riesgoqx relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return AgendaQuery The current query, for fluid interface
     */
    public function joinRiesgoqx($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Riesgoqx');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Riesgoqx');
        }

        return $this;
    }

    /**
     * Use the Riesgoqx relation Riesgoqx object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   RiesgoqxQuery A secondary query class using the current class as primary query
     */
    public function useRiesgoqxQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinRiesgoqx($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Riesgoqx', 'RiesgoqxQuery');
    }

    /**
     * Filter the query by a related Contaminacionqx object
     *
     * @param   Contaminacionqx|PropelObjectCollection $contaminacionqx The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   AgendaQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByContaminacionqx($contaminacionqx, $comparison = null)
    {
        if ($contaminacionqx instanceof Contaminacionqx) {
            return $this
                ->addUsingAlias(AgendaPeer::CONTAMINACIONQX_ID, $contaminacionqx->getId(), $comparison);
        } elseif ($contaminacionqx instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(AgendaPeer::CONTAMINACIONQX_ID, $contaminacionqx->toKeyValue('PrimaryKey', 'Id'), $comparison);
        } else {
            throw new PropelException('filterByContaminacionqx() only accepts arguments of type Contaminacionqx or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Contaminacionqx relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return AgendaQuery The current query, for fluid interface
     */
    public function joinContaminacionqx($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Contaminacionqx');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Contaminacionqx');
        }

        return $this;
    }

    /**
     * Use the Contaminacionqx relation Contaminacionqx object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   ContaminacionqxQuery A secondary query class using the current class as primary query
     */
    public function useContaminacionqxQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinContaminacionqx($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Contaminacionqx', 'ContaminacionqxQuery');
    }

    /**
     * Filter the query by a related Eventoqx object
     *
     * @param   Eventoqx|PropelObjectCollection $eventoqx The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   AgendaQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByEventoqx($eventoqx, $comparison = null)
    {
        if ($eventoqx instanceof Eventoqx) {
            return $this
                ->addUsingAlias(AgendaPeer::EVENTOQX_ID, $eventoqx->getId(), $comparison);
        } elseif ($eventoqx instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(AgendaPeer::EVENTOQX_ID, $eventoqx->toKeyValue('PrimaryKey', 'Id'), $comparison);
        } else {
            throw new PropelException('filterByEventoqx() only accepts arguments of type Eventoqx or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Eventoqx relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return AgendaQuery The current query, for fluid interface
     */
    public function joinEventoqx($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Eventoqx');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Eventoqx');
        }

        return $this;
    }

    /**
     * Use the Eventoqx relation Eventoqx object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   EventoqxQuery A secondary query class using the current class as primary query
     */
    public function useEventoqxQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinEventoqx($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Eventoqx', 'EventoqxQuery');
    }

    /**
     * Filter the query by a related Procedimiento object
     *
     * @param   Procedimiento|PropelObjectCollection $procedimiento The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   AgendaQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByProcedimiento($procedimiento, $comparison = null)
    {
        if ($procedimiento instanceof Procedimiento) {
            return $this
                ->addUsingAlias(AgendaPeer::TIPO_PROC_ID, $procedimiento->getId(), $comparison);
        } elseif ($procedimiento instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(AgendaPeer::TIPO_PROC_ID, $procedimiento->toKeyValue('PrimaryKey', 'Id'), $comparison);
        } else {
            throw new PropelException('filterByProcedimiento() only accepts arguments of type Procedimiento or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Procedimiento relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return AgendaQuery The current query, for fluid interface
     */
    public function joinProcedimiento($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Procedimiento');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Procedimiento');
        }

        return $this;
    }

    /**
     * Use the Procedimiento relation Procedimiento object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   ProcedimientoQuery A secondary query class using the current class as primary query
     */
    public function useProcedimientoQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinProcedimiento($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Procedimiento', 'ProcedimientoQuery');
    }

    /**
     * Filter the query by a related Causadiferido object
     *
     * @param   Causadiferido|PropelObjectCollection $causadiferido The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   AgendaQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByCausadiferido($causadiferido, $comparison = null)
    {
        if ($causadiferido instanceof Causadiferido) {
            return $this
                ->addUsingAlias(AgendaPeer::CAUSA_DIFERIDO_ID, $causadiferido->getId(), $comparison);
        } elseif ($causadiferido instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(AgendaPeer::CAUSA_DIFERIDO_ID, $causadiferido->toKeyValue('PrimaryKey', 'Id'), $comparison);
        } else {
            throw new PropelException('filterByCausadiferido() only accepts arguments of type Causadiferido or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Causadiferido relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return AgendaQuery The current query, for fluid interface
     */
    public function joinCausadiferido($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Causadiferido');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Causadiferido');
        }

        return $this;
    }

    /**
     * Use the Causadiferido relation Causadiferido object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   CausadiferidoQuery A secondary query class using the current class as primary query
     */
    public function useCausadiferidoQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinCausadiferido($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Causadiferido', 'CausadiferidoQuery');
    }

    /**
     * Filter the query by a related Atencion object
     *
     * @param   Atencion|PropelObjectCollection $atencion The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   AgendaQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByAtencion($atencion, $comparison = null)
    {
        if ($atencion instanceof Atencion) {
            return $this
                ->addUsingAlias(AgendaPeer::ATENCION_ID, $atencion->getId(), $comparison);
        } elseif ($atencion instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(AgendaPeer::ATENCION_ID, $atencion->toKeyValue('PrimaryKey', 'Id'), $comparison);
        } else {
            throw new PropelException('filterByAtencion() only accepts arguments of type Atencion or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Atencion relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return AgendaQuery The current query, for fluid interface
     */
    public function joinAtencion($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Atencion');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Atencion');
        }

        return $this;
    }

    /**
     * Use the Atencion relation Atencion object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   AtencionQuery A secondary query class using the current class as primary query
     */
    public function useAtencionQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinAtencion($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Atencion', 'AtencionQuery');
    }

    /**
     * Filter the query by a related Especialidad object
     *
     * @param   Especialidad|PropelObjectCollection $especialidad The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   AgendaQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByEspecialidad($especialidad, $comparison = null)
    {
        if ($especialidad instanceof Especialidad) {
            return $this
                ->addUsingAlias(AgendaPeer::SERVICIO, $especialidad->getId(), $comparison);
        } elseif ($especialidad instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(AgendaPeer::SERVICIO, $especialidad->toKeyValue('PrimaryKey', 'Id'), $comparison);
        } else {
            throw new PropelException('filterByEspecialidad() only accepts arguments of type Especialidad or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Especialidad relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return AgendaQuery The current query, for fluid interface
     */
    public function joinEspecialidad($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Especialidad');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Especialidad');
        }

        return $this;
    }

    /**
     * Use the Especialidad relation Especialidad object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   EspecialidadQuery A secondary query class using the current class as primary query
     */
    public function useEspecialidadQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinEspecialidad($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Especialidad', 'EspecialidadQuery');
    }

    /**
     * Filter the query by a related Personalcirugia object
     *
     * @param   Personalcirugia|PropelObjectCollection $personalcirugia  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   AgendaQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByPersonalcirugia($personalcirugia, $comparison = null)
    {
        if ($personalcirugia instanceof Personalcirugia) {
            return $this
                ->addUsingAlias(AgendaPeer::ID, $personalcirugia->getAgendaId(), $comparison);
        } elseif ($personalcirugia instanceof PropelObjectCollection) {
            return $this
                ->usePersonalcirugiaQuery()
                ->filterByPrimaryKeys($personalcirugia->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByPersonalcirugia() only accepts arguments of type Personalcirugia or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Personalcirugia relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return AgendaQuery The current query, for fluid interface
     */
    public function joinPersonalcirugia($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Personalcirugia');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Personalcirugia');
        }

        return $this;
    }

    /**
     * Use the Personalcirugia relation Personalcirugia object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   PersonalcirugiaQuery A secondary query class using the current class as primary query
     */
    public function usePersonalcirugiaQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinPersonalcirugia($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Personalcirugia', 'PersonalcirugiaQuery');
    }

    /**
     * Filter the query by a related Diagnosticocirugia object
     *
     * @param   Diagnosticocirugia|PropelObjectCollection $diagnosticocirugia  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   AgendaQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByDiagnosticocirugia($diagnosticocirugia, $comparison = null)
    {
        if ($diagnosticocirugia instanceof Diagnosticocirugia) {
            return $this
                ->addUsingAlias(AgendaPeer::ID, $diagnosticocirugia->getAgendaId(), $comparison);
        } elseif ($diagnosticocirugia instanceof PropelObjectCollection) {
            return $this
                ->useDiagnosticocirugiaQuery()
                ->filterByPrimaryKeys($diagnosticocirugia->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByDiagnosticocirugia() only accepts arguments of type Diagnosticocirugia or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Diagnosticocirugia relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return AgendaQuery The current query, for fluid interface
     */
    public function joinDiagnosticocirugia($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Diagnosticocirugia');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Diagnosticocirugia');
        }

        return $this;
    }

    /**
     * Use the Diagnosticocirugia relation Diagnosticocirugia object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   DiagnosticocirugiaQuery A secondary query class using the current class as primary query
     */
    public function useDiagnosticocirugiaQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinDiagnosticocirugia($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Diagnosticocirugia', 'DiagnosticocirugiaQuery');
    }

    /**
     * Filter the query by a related Procedimientocirugia object
     *
     * @param   Procedimientocirugia|PropelObjectCollection $procedimientocirugia  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   AgendaQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByProcedimientocirugia($procedimientocirugia, $comparison = null)
    {
        if ($procedimientocirugia instanceof Procedimientocirugia) {
            return $this
                ->addUsingAlias(AgendaPeer::ID, $procedimientocirugia->getAgendaId(), $comparison);
        } elseif ($procedimientocirugia instanceof PropelObjectCollection) {
            return $this
                ->useProcedimientocirugiaQuery()
                ->filterByPrimaryKeys($procedimientocirugia->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByProcedimientocirugia() only accepts arguments of type Procedimientocirugia or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Procedimientocirugia relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return AgendaQuery The current query, for fluid interface
     */
    public function joinProcedimientocirugia($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Procedimientocirugia');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Procedimientocirugia');
        }

        return $this;
    }

    /**
     * Use the Procedimientocirugia relation Procedimientocirugia object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   ProcedimientocirugiaQuery A secondary query class using the current class as primary query
     */
    public function useProcedimientocirugiaQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinProcedimientocirugia($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Procedimientocirugia', 'ProcedimientocirugiaQuery');
    }

    /**
     * Filter the query by a related Procedimientregrogramado object
     *
     * @param   Procedimientregrogramado|PropelObjectCollection $procedimientregrogramado  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   AgendaQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByProcedimientregrogramado($procedimientregrogramado, $comparison = null)
    {
        if ($procedimientregrogramado instanceof Procedimientregrogramado) {
            return $this
                ->addUsingAlias(AgendaPeer::ID, $procedimientregrogramado->getAgendaId(), $comparison);
        } elseif ($procedimientregrogramado instanceof PropelObjectCollection) {
            return $this
                ->useProcedimientregrogramadoQuery()
                ->filterByPrimaryKeys($procedimientregrogramado->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByProcedimientregrogramado() only accepts arguments of type Procedimientregrogramado or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Procedimientregrogramado relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return AgendaQuery The current query, for fluid interface
     */
    public function joinProcedimientregrogramado($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Procedimientregrogramado');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Procedimientregrogramado');
        }

        return $this;
    }

    /**
     * Use the Procedimientregrogramado relation Procedimientregrogramado object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   ProcedimientregrogramadoQuery A secondary query class using the current class as primary query
     */
    public function useProcedimientregrogramadoQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinProcedimientregrogramado($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Procedimientregrogramado', 'ProcedimientregrogramadoQuery');
    }

    /**
     * Exclude object from result
     *
     * @param   Agenda $agenda Object to remove from the list of results
     *
     * @return AgendaQuery The current query, for fluid interface
     */
    public function prune($agenda = null)
    {
        if ($agenda) {
            $this->addUsingAlias(AgendaPeer::ID, $agenda->getId(), Criteria::NOT_EQUAL);
        }

        return $this;
    }

}
