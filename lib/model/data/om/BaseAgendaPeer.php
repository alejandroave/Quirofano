<?php


/**
 * Base static class for performing query and update operations on the 'hc_agenda' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.7 on:
 *
 * Thu Aug  1 20:31:52 2013
 *
 * @package propel.generator.lib.model.data.om
 */
abstract class BaseAgendaPeer
{

    /** the default database name for this class */
    const DATABASE_NAME = 'propel';

    /** the table name for this class */
    const TABLE_NAME = 'hc_agenda';

    /** the related Propel class for this table */
    const OM_CLASS = 'Agenda';

    /** the related TableMap class for this table */
    const TM_CLASS = 'AgendaTableMap';

    /** The total number of columns. */
    const NUM_COLUMNS = 58;

    /** The number of lazy-loaded columns. */
    const NUM_LAZY_LOAD_COLUMNS = 0;

    /** The number of columns to hydrate (NUM_COLUMNS - NUM_LAZY_LOAD_COLUMNS) */
    const NUM_HYDRATE_COLUMNS = 58;

    /** the column name for the ID field */
    const ID = 'hc_agenda.ID';

    /** the column name for the PROGRAMACION field */
    const PROGRAMACION = 'hc_agenda.PROGRAMACION';

    /** the column name for the HORA field */
    const HORA = 'hc_agenda.HORA';

    /** the column name for the LAST_TIME field */
    const LAST_TIME = 'hc_agenda.LAST_TIME';

    /** the column name for the INGRESO field */
    const INGRESO = 'hc_agenda.INGRESO';

    /** the column name for the SALA_ID field */
    const SALA_ID = 'hc_agenda.SALA_ID';

    /** the column name for the QUIROFANO_ID field */
    const QUIROFANO_ID = 'hc_agenda.QUIROFANO_ID';

    /** the column name for the EGRESO field */
    const EGRESO = 'hc_agenda.EGRESO';

    /** the column name for the CIE9MC field */
    const CIE9MC = 'hc_agenda.CIE9MC';

    /** the column name for the CIE9MC_ID field */
    const CIE9MC_ID = 'hc_agenda.CIE9MC_ID';

    /** the column name for the CX_REALIZADA field */
    const CX_REALIZADA = 'hc_agenda.CX_REALIZADA';

    /** the column name for the CX_REALIZADA_ID field */
    const CX_REALIZADA_ID = 'hc_agenda.CX_REALIZADA_ID';

    /** the column name for the TIPO_CX field */
    const TIPO_CX = 'hc_agenda.TIPO_CX';

    /** the column name for the DIAGNOSTICO field */
    const DIAGNOSTICO = 'hc_agenda.DIAGNOSTICO';

    /** the column name for the DIAGNOSTICO_ID field */
    const DIAGNOSTICO_ID = 'hc_agenda.DIAGNOSTICO_ID';

    /** the column name for the PACIENTE_NAME field */
    const PACIENTE_NAME = 'hc_agenda.PACIENTE_NAME';

    /** the column name for the PACIENTE_ID field */
    const PACIENTE_ID = 'hc_agenda.PACIENTE_ID';

    /** the column name for the EDAD field */
    const EDAD = 'hc_agenda.EDAD';

    /** the column name for the GENERO field */
    const GENERO = 'hc_agenda.GENERO';

    /** the column name for the GENERO_ID field */
    const GENERO_ID = 'hc_agenda.GENERO_ID';

    /** the column name for the REGISTRO field */
    const REGISTRO = 'hc_agenda.REGISTRO';

    /** the column name for the SERVICIO field */
    const SERVICIO = 'hc_agenda.SERVICIO';

    /** the column name for the ANESTESIA_ID field */
    const ANESTESIA_ID = 'hc_agenda.ANESTESIA_ID';

    /** the column name for the ANESTESIA_EMPLEADA field */
    const ANESTESIA_EMPLEADA = 'hc_agenda.ANESTESIA_EMPLEADA';

    /** the column name for the EV_ADVERSOS_ANESTESIA field */
    const EV_ADVERSOS_ANESTESIA = 'hc_agenda.EV_ADVERSOS_ANESTESIA';

    /** the column name for the OBSERVACIONES field */
    const OBSERVACIONES = 'hc_agenda.OBSERVACIONES';

    /** the column name for the REQUERIMIENTO field */
    const REQUERIMIENTO = 'hc_agenda.REQUERIMIENTO';

    /** the column name for the REQ_INSUMOS field */
    const REQ_INSUMOS = 'hc_agenda.REQ_INSUMOS';

    /** the column name for the REQ_HEMODERIV field */
    const REQ_HEMODERIV = 'hc_agenda.REQ_HEMODERIV';

    /** the column name for the REQ_LABORATORIO field */
    const REQ_LABORATORIO = 'hc_agenda.REQ_LABORATORIO';

    /** the column name for the REQ_ANESTESICO field */
    const REQ_ANESTESICO = 'hc_agenda.REQ_ANESTESICO';

    /** the column name for the STATUS field */
    const STATUS = 'hc_agenda.STATUS';

    /** the column name for the CAUSA_DIFERIDO_ID field */
    const CAUSA_DIFERIDO_ID = 'hc_agenda.CAUSA_DIFERIDO_ID';

    /** the column name for the SOLICITADO field */
    const SOLICITADO = 'hc_agenda.SOLICITADO';

    /** the column name for the RIESGOQX_ID field */
    const RIESGOQX_ID = 'hc_agenda.RIESGOQX_ID';

    /** the column name for the CONTAMINACIONQX_ID field */
    const CONTAMINACIONQX_ID = 'hc_agenda.CONTAMINACIONQX_ID';

    /** the column name for the EVENTOQX_ID field */
    const EVENTOQX_ID = 'hc_agenda.EVENTOQX_ID';

    /** the column name for the COMPLICACIONES field */
    const COMPLICACIONES = 'hc_agenda.COMPLICACIONES';

    /** the column name for the VAL_PRE_ANESTESICA field */
    const VAL_PRE_ANESTESICA = 'hc_agenda.VAL_PRE_ANESTESICA';

    /** the column name for the REINTERVENCION field */
    const REINTERVENCION = 'hc_agenda.REINTERVENCION';

    /** the column name for the PERMISOS field */
    const PERMISOS = 'hc_agenda.PERMISOS';

    /** the column name for the TIPO_PROC_ID field */
    const TIPO_PROC_ID = 'hc_agenda.TIPO_PROC_ID';

    /** the column name for the ATENCION_ID field */
    const ATENCION_ID = 'hc_agenda.ATENCION_ID';

    /** the column name for the TIEMPO_FUERA field */
    const TIEMPO_FUERA = 'hc_agenda.TIEMPO_FUERA';

    /** the column name for the PROCEDENCIA field */
    const PROCEDENCIA = 'hc_agenda.PROCEDENCIA';

    /** the column name for the CLASIFICACIONQX field */
    const CLASIFICACIONQX = 'hc_agenda.CLASIFICACIONQX';

    /** the column name for the REGION_PX field */
    const REGION_PX = 'hc_agenda.REGION_PX';

    /** the column name for the EXTENSION_PX field */
    const EXTENSION_PX = 'hc_agenda.EXTENSION_PX';

    /** the column name for the ANEXO_DETALLE field */
    const ANEXO_DETALLE = 'hc_agenda.ANEXO_DETALLE';

    /** the column name for the DESTINO_PX field */
    const DESTINO_PX = 'hc_agenda.DESTINO_PX';

    /** the column name for the LIBERACION_SALA field */
    const LIBERACION_SALA = 'hc_agenda.LIBERACION_SALA';

    /** the column name for the TIEMPO_EST field */
    const TIEMPO_EST = 'hc_agenda.TIEMPO_EST';

    /** the column name for the RIESGO_QX_PRE field */
    const RIESGO_QX_PRE = 'hc_agenda.RIESGO_QX_PRE';

    /** the column name for the SHOW_IN_INDEX field */
    const SHOW_IN_INDEX = 'hc_agenda.SHOW_IN_INDEX';

    /** the column name for the PROTOCOLO field */
    const PROTOCOLO = 'hc_agenda.PROTOCOLO';

    /** the column name for the CANCELADA field */
    const CANCELADA = 'hc_agenda.CANCELADA';

    /** the column name for the CREATED_AT field */
    const CREATED_AT = 'hc_agenda.CREATED_AT';

    /** the column name for the UPDATED_AT field */
    const UPDATED_AT = 'hc_agenda.UPDATED_AT';

    /** The default string format for model objects of the related table **/
    const DEFAULT_STRING_FORMAT = 'YAML';

    /**
     * An identiy map to hold any loaded instances of Agenda objects.
     * This must be public so that other peer classes can access this when hydrating from JOIN
     * queries.
     * @var        array Agenda[]
     */
    public static $instances = array();


    /**
     * holds an array of fieldnames
     *
     * first dimension keys are the type constants
     * e.g. AgendaPeer::$fieldNames[AgendaPeer::TYPE_PHPNAME][0] = 'Id'
     */
    protected static $fieldNames = array (
        BasePeer::TYPE_PHPNAME => array ('Id', 'Programacion', 'Hora', 'LastTime', 'Ingreso', 'SalaId', 'QuirofanoId', 'Egreso', 'Cie9mc', 'Cie9mcId', 'CxRealizada', 'CxRealizadaId', 'TipoCx', 'Diagnostico', 'DiagnosticoId', 'PacienteName', 'PacienteId', 'Edad', 'Genero', 'GeneroId', 'Registro', 'Servicio', 'AnestesiaId', 'AnestesiaEmpleada', 'EvAdversosAnestesia', 'Observaciones', 'Requerimiento', 'ReqInsumos', 'ReqHemoderiv', 'ReqLaboratorio', 'ReqAnestesico', 'Status', 'CausaDiferidoId', 'Solicitado', 'RiesgoqxId', 'ContaminacionqxId', 'EventoqxId', 'Complicaciones', 'ValPreAnestesica', 'Reintervencion', 'Permisos', 'TipoProcId', 'AtencionId', 'TiempoFuera', 'Procedencia', 'Clasificacionqx', 'RegionPx', 'ExtensionPx', 'AnexoDetalle', 'DestinoPx', 'LiberacionSala', 'TiempoEst', 'RiesgoQxPre', 'ShowInIndex', 'Protocolo', 'Cancelada', 'CreatedAt', 'UpdatedAt', ),
        BasePeer::TYPE_STUDLYPHPNAME => array ('id', 'programacion', 'hora', 'lastTime', 'ingreso', 'salaId', 'quirofanoId', 'egreso', 'cie9mc', 'cie9mcId', 'cxRealizada', 'cxRealizadaId', 'tipoCx', 'diagnostico', 'diagnosticoId', 'pacienteName', 'pacienteId', 'edad', 'genero', 'generoId', 'registro', 'servicio', 'anestesiaId', 'anestesiaEmpleada', 'evAdversosAnestesia', 'observaciones', 'requerimiento', 'reqInsumos', 'reqHemoderiv', 'reqLaboratorio', 'reqAnestesico', 'status', 'causaDiferidoId', 'solicitado', 'riesgoqxId', 'contaminacionqxId', 'eventoqxId', 'complicaciones', 'valPreAnestesica', 'reintervencion', 'permisos', 'tipoProcId', 'atencionId', 'tiempoFuera', 'procedencia', 'clasificacionqx', 'regionPx', 'extensionPx', 'anexoDetalle', 'destinoPx', 'liberacionSala', 'tiempoEst', 'riesgoQxPre', 'showInIndex', 'protocolo', 'cancelada', 'createdAt', 'updatedAt', ),
        BasePeer::TYPE_COLNAME => array (AgendaPeer::ID, AgendaPeer::PROGRAMACION, AgendaPeer::HORA, AgendaPeer::LAST_TIME, AgendaPeer::INGRESO, AgendaPeer::SALA_ID, AgendaPeer::QUIROFANO_ID, AgendaPeer::EGRESO, AgendaPeer::CIE9MC, AgendaPeer::CIE9MC_ID, AgendaPeer::CX_REALIZADA, AgendaPeer::CX_REALIZADA_ID, AgendaPeer::TIPO_CX, AgendaPeer::DIAGNOSTICO, AgendaPeer::DIAGNOSTICO_ID, AgendaPeer::PACIENTE_NAME, AgendaPeer::PACIENTE_ID, AgendaPeer::EDAD, AgendaPeer::GENERO, AgendaPeer::GENERO_ID, AgendaPeer::REGISTRO, AgendaPeer::SERVICIO, AgendaPeer::ANESTESIA_ID, AgendaPeer::ANESTESIA_EMPLEADA, AgendaPeer::EV_ADVERSOS_ANESTESIA, AgendaPeer::OBSERVACIONES, AgendaPeer::REQUERIMIENTO, AgendaPeer::REQ_INSUMOS, AgendaPeer::REQ_HEMODERIV, AgendaPeer::REQ_LABORATORIO, AgendaPeer::REQ_ANESTESICO, AgendaPeer::STATUS, AgendaPeer::CAUSA_DIFERIDO_ID, AgendaPeer::SOLICITADO, AgendaPeer::RIESGOQX_ID, AgendaPeer::CONTAMINACIONQX_ID, AgendaPeer::EVENTOQX_ID, AgendaPeer::COMPLICACIONES, AgendaPeer::VAL_PRE_ANESTESICA, AgendaPeer::REINTERVENCION, AgendaPeer::PERMISOS, AgendaPeer::TIPO_PROC_ID, AgendaPeer::ATENCION_ID, AgendaPeer::TIEMPO_FUERA, AgendaPeer::PROCEDENCIA, AgendaPeer::CLASIFICACIONQX, AgendaPeer::REGION_PX, AgendaPeer::EXTENSION_PX, AgendaPeer::ANEXO_DETALLE, AgendaPeer::DESTINO_PX, AgendaPeer::LIBERACION_SALA, AgendaPeer::TIEMPO_EST, AgendaPeer::RIESGO_QX_PRE, AgendaPeer::SHOW_IN_INDEX, AgendaPeer::PROTOCOLO, AgendaPeer::CANCELADA, AgendaPeer::CREATED_AT, AgendaPeer::UPDATED_AT, ),
        BasePeer::TYPE_RAW_COLNAME => array ('ID', 'PROGRAMACION', 'HORA', 'LAST_TIME', 'INGRESO', 'SALA_ID', 'QUIROFANO_ID', 'EGRESO', 'CIE9MC', 'CIE9MC_ID', 'CX_REALIZADA', 'CX_REALIZADA_ID', 'TIPO_CX', 'DIAGNOSTICO', 'DIAGNOSTICO_ID', 'PACIENTE_NAME', 'PACIENTE_ID', 'EDAD', 'GENERO', 'GENERO_ID', 'REGISTRO', 'SERVICIO', 'ANESTESIA_ID', 'ANESTESIA_EMPLEADA', 'EV_ADVERSOS_ANESTESIA', 'OBSERVACIONES', 'REQUERIMIENTO', 'REQ_INSUMOS', 'REQ_HEMODERIV', 'REQ_LABORATORIO', 'REQ_ANESTESICO', 'STATUS', 'CAUSA_DIFERIDO_ID', 'SOLICITADO', 'RIESGOQX_ID', 'CONTAMINACIONQX_ID', 'EVENTOQX_ID', 'COMPLICACIONES', 'VAL_PRE_ANESTESICA', 'REINTERVENCION', 'PERMISOS', 'TIPO_PROC_ID', 'ATENCION_ID', 'TIEMPO_FUERA', 'PROCEDENCIA', 'CLASIFICACIONQX', 'REGION_PX', 'EXTENSION_PX', 'ANEXO_DETALLE', 'DESTINO_PX', 'LIBERACION_SALA', 'TIEMPO_EST', 'RIESGO_QX_PRE', 'SHOW_IN_INDEX', 'PROTOCOLO', 'CANCELADA', 'CREATED_AT', 'UPDATED_AT', ),
        BasePeer::TYPE_FIELDNAME => array ('id', 'programacion', 'hora', 'last_time', 'ingreso', 'sala_id', 'quirofano_id', 'egreso', 'cie9mc', 'cie9mc_id', 'cx_realizada', 'cx_realizada_id', 'tipo_cx', 'diagnostico', 'diagnostico_id', 'paciente_name', 'paciente_id', 'edad', 'genero', 'genero_id', 'registro', 'servicio', 'anestesia_id', 'anestesia_empleada', 'ev_adversos_anestesia', 'observaciones', 'requerimiento', 'req_insumos', 'req_hemoderiv', 'req_laboratorio', 'req_anestesico', 'status', 'causa_diferido_id', 'solicitado', 'riesgoqx_id', 'contaminacionqx_id', 'eventoqx_id', 'complicaciones', 'val_pre_anestesica', 'reintervencion', 'permisos', 'tipo_proc_id', 'atencion_id', 'tiempo_fuera', 'procedencia', 'clasificacionqx', 'region_px', 'extension_px', 'anexo_detalle', 'destino_px', 'liberacion_sala', 'tiempo_est', 'riesgo_qx_pre', 'show_in_index', 'protocolo', 'cancelada', 'created_at', 'updated_at', ),
        BasePeer::TYPE_NUM => array (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, )
    );

    /**
     * holds an array of keys for quick access to the fieldnames array
     *
     * first dimension keys are the type constants
     * e.g. AgendaPeer::$fieldNames[BasePeer::TYPE_PHPNAME]['Id'] = 0
     */
    protected static $fieldKeys = array (
        BasePeer::TYPE_PHPNAME => array ('Id' => 0, 'Programacion' => 1, 'Hora' => 2, 'LastTime' => 3, 'Ingreso' => 4, 'SalaId' => 5, 'QuirofanoId' => 6, 'Egreso' => 7, 'Cie9mc' => 8, 'Cie9mcId' => 9, 'CxRealizada' => 10, 'CxRealizadaId' => 11, 'TipoCx' => 12, 'Diagnostico' => 13, 'DiagnosticoId' => 14, 'PacienteName' => 15, 'PacienteId' => 16, 'Edad' => 17, 'Genero' => 18, 'GeneroId' => 19, 'Registro' => 20, 'Servicio' => 21, 'AnestesiaId' => 22, 'AnestesiaEmpleada' => 23, 'EvAdversosAnestesia' => 24, 'Observaciones' => 25, 'Requerimiento' => 26, 'ReqInsumos' => 27, 'ReqHemoderiv' => 28, 'ReqLaboratorio' => 29, 'ReqAnestesico' => 30, 'Status' => 31, 'CausaDiferidoId' => 32, 'Solicitado' => 33, 'RiesgoqxId' => 34, 'ContaminacionqxId' => 35, 'EventoqxId' => 36, 'Complicaciones' => 37, 'ValPreAnestesica' => 38, 'Reintervencion' => 39, 'Permisos' => 40, 'TipoProcId' => 41, 'AtencionId' => 42, 'TiempoFuera' => 43, 'Procedencia' => 44, 'Clasificacionqx' => 45, 'RegionPx' => 46, 'ExtensionPx' => 47, 'AnexoDetalle' => 48, 'DestinoPx' => 49, 'LiberacionSala' => 50, 'TiempoEst' => 51, 'RiesgoQxPre' => 52, 'ShowInIndex' => 53, 'Protocolo' => 54, 'Cancelada' => 55, 'CreatedAt' => 56, 'UpdatedAt' => 57, ),
        BasePeer::TYPE_STUDLYPHPNAME => array ('id' => 0, 'programacion' => 1, 'hora' => 2, 'lastTime' => 3, 'ingreso' => 4, 'salaId' => 5, 'quirofanoId' => 6, 'egreso' => 7, 'cie9mc' => 8, 'cie9mcId' => 9, 'cxRealizada' => 10, 'cxRealizadaId' => 11, 'tipoCx' => 12, 'diagnostico' => 13, 'diagnosticoId' => 14, 'pacienteName' => 15, 'pacienteId' => 16, 'edad' => 17, 'genero' => 18, 'generoId' => 19, 'registro' => 20, 'servicio' => 21, 'anestesiaId' => 22, 'anestesiaEmpleada' => 23, 'evAdversosAnestesia' => 24, 'observaciones' => 25, 'requerimiento' => 26, 'reqInsumos' => 27, 'reqHemoderiv' => 28, 'reqLaboratorio' => 29, 'reqAnestesico' => 30, 'status' => 31, 'causaDiferidoId' => 32, 'solicitado' => 33, 'riesgoqxId' => 34, 'contaminacionqxId' => 35, 'eventoqxId' => 36, 'complicaciones' => 37, 'valPreAnestesica' => 38, 'reintervencion' => 39, 'permisos' => 40, 'tipoProcId' => 41, 'atencionId' => 42, 'tiempoFuera' => 43, 'procedencia' => 44, 'clasificacionqx' => 45, 'regionPx' => 46, 'extensionPx' => 47, 'anexoDetalle' => 48, 'destinoPx' => 49, 'liberacionSala' => 50, 'tiempoEst' => 51, 'riesgoQxPre' => 52, 'showInIndex' => 53, 'protocolo' => 54, 'cancelada' => 55, 'createdAt' => 56, 'updatedAt' => 57, ),
        BasePeer::TYPE_COLNAME => array (AgendaPeer::ID => 0, AgendaPeer::PROGRAMACION => 1, AgendaPeer::HORA => 2, AgendaPeer::LAST_TIME => 3, AgendaPeer::INGRESO => 4, AgendaPeer::SALA_ID => 5, AgendaPeer::QUIROFANO_ID => 6, AgendaPeer::EGRESO => 7, AgendaPeer::CIE9MC => 8, AgendaPeer::CIE9MC_ID => 9, AgendaPeer::CX_REALIZADA => 10, AgendaPeer::CX_REALIZADA_ID => 11, AgendaPeer::TIPO_CX => 12, AgendaPeer::DIAGNOSTICO => 13, AgendaPeer::DIAGNOSTICO_ID => 14, AgendaPeer::PACIENTE_NAME => 15, AgendaPeer::PACIENTE_ID => 16, AgendaPeer::EDAD => 17, AgendaPeer::GENERO => 18, AgendaPeer::GENERO_ID => 19, AgendaPeer::REGISTRO => 20, AgendaPeer::SERVICIO => 21, AgendaPeer::ANESTESIA_ID => 22, AgendaPeer::ANESTESIA_EMPLEADA => 23, AgendaPeer::EV_ADVERSOS_ANESTESIA => 24, AgendaPeer::OBSERVACIONES => 25, AgendaPeer::REQUERIMIENTO => 26, AgendaPeer::REQ_INSUMOS => 27, AgendaPeer::REQ_HEMODERIV => 28, AgendaPeer::REQ_LABORATORIO => 29, AgendaPeer::REQ_ANESTESICO => 30, AgendaPeer::STATUS => 31, AgendaPeer::CAUSA_DIFERIDO_ID => 32, AgendaPeer::SOLICITADO => 33, AgendaPeer::RIESGOQX_ID => 34, AgendaPeer::CONTAMINACIONQX_ID => 35, AgendaPeer::EVENTOQX_ID => 36, AgendaPeer::COMPLICACIONES => 37, AgendaPeer::VAL_PRE_ANESTESICA => 38, AgendaPeer::REINTERVENCION => 39, AgendaPeer::PERMISOS => 40, AgendaPeer::TIPO_PROC_ID => 41, AgendaPeer::ATENCION_ID => 42, AgendaPeer::TIEMPO_FUERA => 43, AgendaPeer::PROCEDENCIA => 44, AgendaPeer::CLASIFICACIONQX => 45, AgendaPeer::REGION_PX => 46, AgendaPeer::EXTENSION_PX => 47, AgendaPeer::ANEXO_DETALLE => 48, AgendaPeer::DESTINO_PX => 49, AgendaPeer::LIBERACION_SALA => 50, AgendaPeer::TIEMPO_EST => 51, AgendaPeer::RIESGO_QX_PRE => 52, AgendaPeer::SHOW_IN_INDEX => 53, AgendaPeer::PROTOCOLO => 54, AgendaPeer::CANCELADA => 55, AgendaPeer::CREATED_AT => 56, AgendaPeer::UPDATED_AT => 57, ),
        BasePeer::TYPE_RAW_COLNAME => array ('ID' => 0, 'PROGRAMACION' => 1, 'HORA' => 2, 'LAST_TIME' => 3, 'INGRESO' => 4, 'SALA_ID' => 5, 'QUIROFANO_ID' => 6, 'EGRESO' => 7, 'CIE9MC' => 8, 'CIE9MC_ID' => 9, 'CX_REALIZADA' => 10, 'CX_REALIZADA_ID' => 11, 'TIPO_CX' => 12, 'DIAGNOSTICO' => 13, 'DIAGNOSTICO_ID' => 14, 'PACIENTE_NAME' => 15, 'PACIENTE_ID' => 16, 'EDAD' => 17, 'GENERO' => 18, 'GENERO_ID' => 19, 'REGISTRO' => 20, 'SERVICIO' => 21, 'ANESTESIA_ID' => 22, 'ANESTESIA_EMPLEADA' => 23, 'EV_ADVERSOS_ANESTESIA' => 24, 'OBSERVACIONES' => 25, 'REQUERIMIENTO' => 26, 'REQ_INSUMOS' => 27, 'REQ_HEMODERIV' => 28, 'REQ_LABORATORIO' => 29, 'REQ_ANESTESICO' => 30, 'STATUS' => 31, 'CAUSA_DIFERIDO_ID' => 32, 'SOLICITADO' => 33, 'RIESGOQX_ID' => 34, 'CONTAMINACIONQX_ID' => 35, 'EVENTOQX_ID' => 36, 'COMPLICACIONES' => 37, 'VAL_PRE_ANESTESICA' => 38, 'REINTERVENCION' => 39, 'PERMISOS' => 40, 'TIPO_PROC_ID' => 41, 'ATENCION_ID' => 42, 'TIEMPO_FUERA' => 43, 'PROCEDENCIA' => 44, 'CLASIFICACIONQX' => 45, 'REGION_PX' => 46, 'EXTENSION_PX' => 47, 'ANEXO_DETALLE' => 48, 'DESTINO_PX' => 49, 'LIBERACION_SALA' => 50, 'TIEMPO_EST' => 51, 'RIESGO_QX_PRE' => 52, 'SHOW_IN_INDEX' => 53, 'PROTOCOLO' => 54, 'CANCELADA' => 55, 'CREATED_AT' => 56, 'UPDATED_AT' => 57, ),
        BasePeer::TYPE_FIELDNAME => array ('id' => 0, 'programacion' => 1, 'hora' => 2, 'last_time' => 3, 'ingreso' => 4, 'sala_id' => 5, 'quirofano_id' => 6, 'egreso' => 7, 'cie9mc' => 8, 'cie9mc_id' => 9, 'cx_realizada' => 10, 'cx_realizada_id' => 11, 'tipo_cx' => 12, 'diagnostico' => 13, 'diagnostico_id' => 14, 'paciente_name' => 15, 'paciente_id' => 16, 'edad' => 17, 'genero' => 18, 'genero_id' => 19, 'registro' => 20, 'servicio' => 21, 'anestesia_id' => 22, 'anestesia_empleada' => 23, 'ev_adversos_anestesia' => 24, 'observaciones' => 25, 'requerimiento' => 26, 'req_insumos' => 27, 'req_hemoderiv' => 28, 'req_laboratorio' => 29, 'req_anestesico' => 30, 'status' => 31, 'causa_diferido_id' => 32, 'solicitado' => 33, 'riesgoqx_id' => 34, 'contaminacionqx_id' => 35, 'eventoqx_id' => 36, 'complicaciones' => 37, 'val_pre_anestesica' => 38, 'reintervencion' => 39, 'permisos' => 40, 'tipo_proc_id' => 41, 'atencion_id' => 42, 'tiempo_fuera' => 43, 'procedencia' => 44, 'clasificacionqx' => 45, 'region_px' => 46, 'extension_px' => 47, 'anexo_detalle' => 48, 'destino_px' => 49, 'liberacion_sala' => 50, 'tiempo_est' => 51, 'riesgo_qx_pre' => 52, 'show_in_index' => 53, 'protocolo' => 54, 'cancelada' => 55, 'created_at' => 56, 'updated_at' => 57, ),
        BasePeer::TYPE_NUM => array (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, )
    );

    /**
     * Translates a fieldname to another type
     *
     * @param      string $name field name
     * @param      string $fromType One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
     *                         BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
     * @param      string $toType   One of the class type constants
     * @return string          translated name of the field.
     * @throws PropelException - if the specified name could not be found in the fieldname mappings.
     */
    public static function translateFieldName($name, $fromType, $toType)
    {
        $toNames = AgendaPeer::getFieldNames($toType);
        $key = isset(AgendaPeer::$fieldKeys[$fromType][$name]) ? AgendaPeer::$fieldKeys[$fromType][$name] : null;
        if ($key === null) {
            throw new PropelException("'$name' could not be found in the field names of type '$fromType'. These are: " . print_r(AgendaPeer::$fieldKeys[$fromType], true));
        }

        return $toNames[$key];
    }

    /**
     * Returns an array of field names.
     *
     * @param      string $type The type of fieldnames to return:
     *                      One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
     *                      BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
     * @return array           A list of field names
     * @throws PropelException - if the type is not valid.
     */
    public static function getFieldNames($type = BasePeer::TYPE_PHPNAME)
    {
        if (!array_key_exists($type, AgendaPeer::$fieldNames)) {
            throw new PropelException('Method getFieldNames() expects the parameter $type to be one of the class constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME, BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. ' . $type . ' was given.');
        }

        return AgendaPeer::$fieldNames[$type];
    }

    /**
     * Convenience method which changes table.column to alias.column.
     *
     * Using this method you can maintain SQL abstraction while using column aliases.
     * <code>
     *		$c->addAlias("alias1", TablePeer::TABLE_NAME);
     *		$c->addJoin(TablePeer::alias("alias1", TablePeer::PRIMARY_KEY_COLUMN), TablePeer::PRIMARY_KEY_COLUMN);
     * </code>
     * @param      string $alias The alias for the current table.
     * @param      string $column The column name for current table. (i.e. AgendaPeer::COLUMN_NAME).
     * @return string
     */
    public static function alias($alias, $column)
    {
        return str_replace(AgendaPeer::TABLE_NAME.'.', $alias.'.', $column);
    }

    /**
     * Add all the columns needed to create a new object.
     *
     * Note: any columns that were marked with lazyLoad="true" in the
     * XML schema will not be added to the select list and only loaded
     * on demand.
     *
     * @param      Criteria $criteria object containing the columns to add.
     * @param      string   $alias    optional table alias
     * @throws PropelException Any exceptions caught during processing will be
     *		 rethrown wrapped into a PropelException.
     */
    public static function addSelectColumns(Criteria $criteria, $alias = null)
    {
        if (null === $alias) {
            $criteria->addSelectColumn(AgendaPeer::ID);
            $criteria->addSelectColumn(AgendaPeer::PROGRAMACION);
            $criteria->addSelectColumn(AgendaPeer::HORA);
            $criteria->addSelectColumn(AgendaPeer::LAST_TIME);
            $criteria->addSelectColumn(AgendaPeer::INGRESO);
            $criteria->addSelectColumn(AgendaPeer::SALA_ID);
            $criteria->addSelectColumn(AgendaPeer::QUIROFANO_ID);
            $criteria->addSelectColumn(AgendaPeer::EGRESO);
            $criteria->addSelectColumn(AgendaPeer::CIE9MC);
            $criteria->addSelectColumn(AgendaPeer::CIE9MC_ID);
            $criteria->addSelectColumn(AgendaPeer::CX_REALIZADA);
            $criteria->addSelectColumn(AgendaPeer::CX_REALIZADA_ID);
            $criteria->addSelectColumn(AgendaPeer::TIPO_CX);
            $criteria->addSelectColumn(AgendaPeer::DIAGNOSTICO);
            $criteria->addSelectColumn(AgendaPeer::DIAGNOSTICO_ID);
            $criteria->addSelectColumn(AgendaPeer::PACIENTE_NAME);
            $criteria->addSelectColumn(AgendaPeer::PACIENTE_ID);
            $criteria->addSelectColumn(AgendaPeer::EDAD);
            $criteria->addSelectColumn(AgendaPeer::GENERO);
            $criteria->addSelectColumn(AgendaPeer::GENERO_ID);
            $criteria->addSelectColumn(AgendaPeer::REGISTRO);
            $criteria->addSelectColumn(AgendaPeer::SERVICIO);
            $criteria->addSelectColumn(AgendaPeer::ANESTESIA_ID);
            $criteria->addSelectColumn(AgendaPeer::ANESTESIA_EMPLEADA);
            $criteria->addSelectColumn(AgendaPeer::EV_ADVERSOS_ANESTESIA);
            $criteria->addSelectColumn(AgendaPeer::OBSERVACIONES);
            $criteria->addSelectColumn(AgendaPeer::REQUERIMIENTO);
            $criteria->addSelectColumn(AgendaPeer::REQ_INSUMOS);
            $criteria->addSelectColumn(AgendaPeer::REQ_HEMODERIV);
            $criteria->addSelectColumn(AgendaPeer::REQ_LABORATORIO);
            $criteria->addSelectColumn(AgendaPeer::REQ_ANESTESICO);
            $criteria->addSelectColumn(AgendaPeer::STATUS);
            $criteria->addSelectColumn(AgendaPeer::CAUSA_DIFERIDO_ID);
            $criteria->addSelectColumn(AgendaPeer::SOLICITADO);
            $criteria->addSelectColumn(AgendaPeer::RIESGOQX_ID);
            $criteria->addSelectColumn(AgendaPeer::CONTAMINACIONQX_ID);
            $criteria->addSelectColumn(AgendaPeer::EVENTOQX_ID);
            $criteria->addSelectColumn(AgendaPeer::COMPLICACIONES);
            $criteria->addSelectColumn(AgendaPeer::VAL_PRE_ANESTESICA);
            $criteria->addSelectColumn(AgendaPeer::REINTERVENCION);
            $criteria->addSelectColumn(AgendaPeer::PERMISOS);
            $criteria->addSelectColumn(AgendaPeer::TIPO_PROC_ID);
            $criteria->addSelectColumn(AgendaPeer::ATENCION_ID);
            $criteria->addSelectColumn(AgendaPeer::TIEMPO_FUERA);
            $criteria->addSelectColumn(AgendaPeer::PROCEDENCIA);
            $criteria->addSelectColumn(AgendaPeer::CLASIFICACIONQX);
            $criteria->addSelectColumn(AgendaPeer::REGION_PX);
            $criteria->addSelectColumn(AgendaPeer::EXTENSION_PX);
            $criteria->addSelectColumn(AgendaPeer::ANEXO_DETALLE);
            $criteria->addSelectColumn(AgendaPeer::DESTINO_PX);
            $criteria->addSelectColumn(AgendaPeer::LIBERACION_SALA);
            $criteria->addSelectColumn(AgendaPeer::TIEMPO_EST);
            $criteria->addSelectColumn(AgendaPeer::RIESGO_QX_PRE);
            $criteria->addSelectColumn(AgendaPeer::SHOW_IN_INDEX);
            $criteria->addSelectColumn(AgendaPeer::PROTOCOLO);
            $criteria->addSelectColumn(AgendaPeer::CANCELADA);
            $criteria->addSelectColumn(AgendaPeer::CREATED_AT);
            $criteria->addSelectColumn(AgendaPeer::UPDATED_AT);
        } else {
            $criteria->addSelectColumn($alias . '.ID');
            $criteria->addSelectColumn($alias . '.PROGRAMACION');
            $criteria->addSelectColumn($alias . '.HORA');
            $criteria->addSelectColumn($alias . '.LAST_TIME');
            $criteria->addSelectColumn($alias . '.INGRESO');
            $criteria->addSelectColumn($alias . '.SALA_ID');
            $criteria->addSelectColumn($alias . '.QUIROFANO_ID');
            $criteria->addSelectColumn($alias . '.EGRESO');
            $criteria->addSelectColumn($alias . '.CIE9MC');
            $criteria->addSelectColumn($alias . '.CIE9MC_ID');
            $criteria->addSelectColumn($alias . '.CX_REALIZADA');
            $criteria->addSelectColumn($alias . '.CX_REALIZADA_ID');
            $criteria->addSelectColumn($alias . '.TIPO_CX');
            $criteria->addSelectColumn($alias . '.DIAGNOSTICO');
            $criteria->addSelectColumn($alias . '.DIAGNOSTICO_ID');
            $criteria->addSelectColumn($alias . '.PACIENTE_NAME');
            $criteria->addSelectColumn($alias . '.PACIENTE_ID');
            $criteria->addSelectColumn($alias . '.EDAD');
            $criteria->addSelectColumn($alias . '.GENERO');
            $criteria->addSelectColumn($alias . '.GENERO_ID');
            $criteria->addSelectColumn($alias . '.REGISTRO');
            $criteria->addSelectColumn($alias . '.SERVICIO');
            $criteria->addSelectColumn($alias . '.ANESTESIA_ID');
            $criteria->addSelectColumn($alias . '.ANESTESIA_EMPLEADA');
            $criteria->addSelectColumn($alias . '.EV_ADVERSOS_ANESTESIA');
            $criteria->addSelectColumn($alias . '.OBSERVACIONES');
            $criteria->addSelectColumn($alias . '.REQUERIMIENTO');
            $criteria->addSelectColumn($alias . '.REQ_INSUMOS');
            $criteria->addSelectColumn($alias . '.REQ_HEMODERIV');
            $criteria->addSelectColumn($alias . '.REQ_LABORATORIO');
            $criteria->addSelectColumn($alias . '.REQ_ANESTESICO');
            $criteria->addSelectColumn($alias . '.STATUS');
            $criteria->addSelectColumn($alias . '.CAUSA_DIFERIDO_ID');
            $criteria->addSelectColumn($alias . '.SOLICITADO');
            $criteria->addSelectColumn($alias . '.RIESGOQX_ID');
            $criteria->addSelectColumn($alias . '.CONTAMINACIONQX_ID');
            $criteria->addSelectColumn($alias . '.EVENTOQX_ID');
            $criteria->addSelectColumn($alias . '.COMPLICACIONES');
            $criteria->addSelectColumn($alias . '.VAL_PRE_ANESTESICA');
            $criteria->addSelectColumn($alias . '.REINTERVENCION');
            $criteria->addSelectColumn($alias . '.PERMISOS');
            $criteria->addSelectColumn($alias . '.TIPO_PROC_ID');
            $criteria->addSelectColumn($alias . '.ATENCION_ID');
            $criteria->addSelectColumn($alias . '.TIEMPO_FUERA');
            $criteria->addSelectColumn($alias . '.PROCEDENCIA');
            $criteria->addSelectColumn($alias . '.CLASIFICACIONQX');
            $criteria->addSelectColumn($alias . '.REGION_PX');
            $criteria->addSelectColumn($alias . '.EXTENSION_PX');
            $criteria->addSelectColumn($alias . '.ANEXO_DETALLE');
            $criteria->addSelectColumn($alias . '.DESTINO_PX');
            $criteria->addSelectColumn($alias . '.LIBERACION_SALA');
            $criteria->addSelectColumn($alias . '.TIEMPO_EST');
            $criteria->addSelectColumn($alias . '.RIESGO_QX_PRE');
            $criteria->addSelectColumn($alias . '.SHOW_IN_INDEX');
            $criteria->addSelectColumn($alias . '.PROTOCOLO');
            $criteria->addSelectColumn($alias . '.CANCELADA');
            $criteria->addSelectColumn($alias . '.CREATED_AT');
            $criteria->addSelectColumn($alias . '.UPDATED_AT');
        }
    }

    /**
     * Returns the number of rows matching criteria.
     *
     * @param      Criteria $criteria
     * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
     * @param      PropelPDO $con
     * @return int Number of matching rows.
     */
    public static function doCount(Criteria $criteria, $distinct = false, PropelPDO $con = null)
    {
        // we may modify criteria, so copy it first
        $criteria = clone $criteria;

        // We need to set the primary table name, since in the case that there are no WHERE columns
        // it will be impossible for the BasePeer::createSelectSql() method to determine which
        // tables go into the FROM clause.
        $criteria->setPrimaryTableName(AgendaPeer::TABLE_NAME);

        if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
            $criteria->setDistinct();
        }

        if (!$criteria->hasSelectClause()) {
            AgendaPeer::addSelectColumns($criteria);
        }

        $criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
        $criteria->setDbName(AgendaPeer::DATABASE_NAME); // Set the correct dbName

        if ($con === null) {
            $con = Propel::getConnection(AgendaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }
        // symfony_behaviors behavior
        foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
        {
          call_user_func($sf_hook, 'BaseAgendaPeer', $criteria, $con);
        }

        // BasePeer returns a PDOStatement
        $stmt = BasePeer::doCount($criteria, $con);

        if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $count = (int) $row[0];
        } else {
            $count = 0; // no rows returned; we infer that means 0 matches.
        }
        $stmt->closeCursor();

        return $count;
    }
    /**
     * Selects one object from the DB.
     *
     * @param      Criteria $criteria object used to create the SELECT statement.
     * @param      PropelPDO $con
     * @return                 Agenda
     * @throws PropelException Any exceptions caught during processing will be
     *		 rethrown wrapped into a PropelException.
     */
    public static function doSelectOne(Criteria $criteria, PropelPDO $con = null)
    {
        $critcopy = clone $criteria;
        $critcopy->setLimit(1);
        $objects = AgendaPeer::doSelect($critcopy, $con);
        if ($objects) {
            return $objects[0];
        }

        return null;
    }
    /**
     * Selects several row from the DB.
     *
     * @param      Criteria $criteria The Criteria object used to build the SELECT statement.
     * @param      PropelPDO $con
     * @return array           Array of selected Objects
     * @throws PropelException Any exceptions caught during processing will be
     *		 rethrown wrapped into a PropelException.
     */
    public static function doSelect(Criteria $criteria, PropelPDO $con = null)
    {
        return AgendaPeer::populateObjects(AgendaPeer::doSelectStmt($criteria, $con));
    }
    /**
     * Prepares the Criteria object and uses the parent doSelect() method to execute a PDOStatement.
     *
     * Use this method directly if you want to work with an executed statement durirectly (for example
     * to perform your own object hydration).
     *
     * @param      Criteria $criteria The Criteria object used to build the SELECT statement.
     * @param      PropelPDO $con The connection to use
     * @throws PropelException Any exceptions caught during processing will be
     *		 rethrown wrapped into a PropelException.
     * @return PDOStatement The executed PDOStatement object.
     * @see        BasePeer::doSelect()
     */
    public static function doSelectStmt(Criteria $criteria, PropelPDO $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection(AgendaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }

        if (!$criteria->hasSelectClause()) {
            $criteria = clone $criteria;
            AgendaPeer::addSelectColumns($criteria);
        }

        // Set the correct dbName
        $criteria->setDbName(AgendaPeer::DATABASE_NAME);
        // symfony_behaviors behavior
        foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
        {
          call_user_func($sf_hook, 'BaseAgendaPeer', $criteria, $con);
        }


        // BasePeer returns a PDOStatement
        return BasePeer::doSelect($criteria, $con);
    }
    /**
     * Adds an object to the instance pool.
     *
     * Propel keeps cached copies of objects in an instance pool when they are retrieved
     * from the database.  In some cases -- especially when you override doSelect*()
     * methods in your stub classes -- you may need to explicitly add objects
     * to the cache in order to ensure that the same objects are always returned by doSelect*()
     * and retrieveByPK*() calls.
     *
     * @param      Agenda $obj A Agenda object.
     * @param      string $key (optional) key to use for instance map (for performance boost if key was already calculated externally).
     */
    public static function addInstanceToPool($obj, $key = null)
    {
        if (Propel::isInstancePoolingEnabled()) {
            if ($key === null) {
                $key = (string) $obj->getId();
            } // if key === null
            AgendaPeer::$instances[$key] = $obj;
        }
    }

    /**
     * Removes an object from the instance pool.
     *
     * Propel keeps cached copies of objects in an instance pool when they are retrieved
     * from the database.  In some cases -- especially when you override doDelete
     * methods in your stub classes -- you may need to explicitly remove objects
     * from the cache in order to prevent returning objects that no longer exist.
     *
     * @param      mixed $value A Agenda object or a primary key value.
     *
     * @return void
     * @throws PropelException - if the value is invalid.
     */
    public static function removeInstanceFromPool($value)
    {
        if (Propel::isInstancePoolingEnabled() && $value !== null) {
            if (is_object($value) && $value instanceof Agenda) {
                $key = (string) $value->getId();
            } elseif (is_scalar($value)) {
                // assume we've been passed a primary key
                $key = (string) $value;
            } else {
                $e = new PropelException("Invalid value passed to removeInstanceFromPool().  Expected primary key or Agenda object; got " . (is_object($value) ? get_class($value) . ' object.' : var_export($value,true)));
                throw $e;
            }

            unset(AgendaPeer::$instances[$key]);
        }
    } // removeInstanceFromPool()

    /**
     * Retrieves a string version of the primary key from the DB resultset row that can be used to uniquely identify a row in this table.
     *
     * For tables with a single-column primary key, that simple pkey value will be returned.  For tables with
     * a multi-column primary key, a serialize()d version of the primary key will be returned.
     *
     * @param      string $key The key (@see getPrimaryKeyHash()) for this instance.
     * @return   Agenda Found object or null if 1) no instance exists for specified key or 2) instance pooling has been disabled.
     * @see        getPrimaryKeyHash()
     */
    public static function getInstanceFromPool($key)
    {
        if (Propel::isInstancePoolingEnabled()) {
            if (isset(AgendaPeer::$instances[$key])) {
                return AgendaPeer::$instances[$key];
            }
        }

        return null; // just to be explicit
    }

    /**
     * Clear the instance pool.
     *
     * @return void
     */
    public static function clearInstancePool()
    {
        AgendaPeer::$instances = array();
    }

    /**
     * Method to invalidate the instance pool of all tables related to hc_agenda
     * by a foreign key with ON DELETE CASCADE
     */
    public static function clearRelatedInstancePool()
    {
        // Invalidate objects in PersonalcirugiaPeer instance pool,
        // since one or more of them may be deleted by ON DELETE CASCADE/SETNULL rule.
        PersonalcirugiaPeer::clearInstancePool();
    }

    /**
     * Retrieves a string version of the primary key from the DB resultset row that can be used to uniquely identify a row in this table.
     *
     * For tables with a single-column primary key, that simple pkey value will be returned.  For tables with
     * a multi-column primary key, a serialize()d version of the primary key will be returned.
     *
     * @param      array $row PropelPDO resultset row.
     * @param      int $startcol The 0-based offset for reading from the resultset row.
     * @return string A string version of PK or null if the components of primary key in result array are all null.
     */
    public static function getPrimaryKeyHashFromRow($row, $startcol = 0)
    {
        // If the PK cannot be derived from the row, return null.
        if ($row[$startcol] === null) {
            return null;
        }

        return (string) $row[$startcol];
    }

    /**
     * Retrieves the primary key from the DB resultset row
     * For tables with a single-column primary key, that simple pkey value will be returned.  For tables with
     * a multi-column primary key, an array of the primary key columns will be returned.
     *
     * @param      array $row PropelPDO resultset row.
     * @param      int $startcol The 0-based offset for reading from the resultset row.
     * @return mixed The primary key of the row
     */
    public static function getPrimaryKeyFromRow($row, $startcol = 0)
    {

        return (int) $row[$startcol];
    }

    /**
     * The returned array will contain objects of the default type or
     * objects that inherit from the default.
     *
     * @throws PropelException Any exceptions caught during processing will be
     *		 rethrown wrapped into a PropelException.
     */
    public static function populateObjects(PDOStatement $stmt)
    {
        $results = array();

        // set the class once to avoid overhead in the loop
        $cls = AgendaPeer::getOMClass();
        // populate the object(s)
        while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $key = AgendaPeer::getPrimaryKeyHashFromRow($row, 0);
            if (null !== ($obj = AgendaPeer::getInstanceFromPool($key))) {
                // We no longer rehydrate the object, since this can cause data loss.
                // See http://www.propelorm.org/ticket/509
                // $obj->hydrate($row, 0, true); // rehydrate
                $results[] = $obj;
            } else {
                $obj = new $cls();
                $obj->hydrate($row);
                $results[] = $obj;
                AgendaPeer::addInstanceToPool($obj, $key);
            } // if key exists
        }
        $stmt->closeCursor();

        return $results;
    }
    /**
     * Populates an object of the default type or an object that inherit from the default.
     *
     * @param      array $row PropelPDO resultset row.
     * @param      int $startcol The 0-based offset for reading from the resultset row.
     * @throws PropelException Any exceptions caught during processing will be
     *		 rethrown wrapped into a PropelException.
     * @return array (Agenda object, last column rank)
     */
    public static function populateObject($row, $startcol = 0)
    {
        $key = AgendaPeer::getPrimaryKeyHashFromRow($row, $startcol);
        if (null !== ($obj = AgendaPeer::getInstanceFromPool($key))) {
            // We no longer rehydrate the object, since this can cause data loss.
            // See http://www.propelorm.org/ticket/509
            // $obj->hydrate($row, $startcol, true); // rehydrate
            $col = $startcol + AgendaPeer::NUM_HYDRATE_COLUMNS;
        } else {
            $cls = AgendaPeer::OM_CLASS;
            $obj = new $cls();
            $col = $obj->hydrate($row, $startcol);
            AgendaPeer::addInstanceToPool($obj, $key);
        }

        return array($obj, $col);
    }

    /**
     * Returns the TableMap related to this peer.
     * This method is not needed for general use but a specific application could have a need.
     * @return TableMap
     * @throws PropelException Any exceptions caught during processing will be
     *		 rethrown wrapped into a PropelException.
     */
    public static function getTableMap()
    {
        return Propel::getDatabaseMap(AgendaPeer::DATABASE_NAME)->getTable(AgendaPeer::TABLE_NAME);
    }

    /**
     * Add a TableMap instance to the database for this peer class.
     */
    public static function buildTableMap()
    {
      $dbMap = Propel::getDatabaseMap(BaseAgendaPeer::DATABASE_NAME);
      if (!$dbMap->hasTable(BaseAgendaPeer::TABLE_NAME)) {
        $dbMap->addTableObject(new AgendaTableMap());
      }
    }

    /**
     * The class that the Peer will make instances of.
     *
     *
     * @return string ClassName
     */
    public static function getOMClass()
    {
        return AgendaPeer::OM_CLASS;
    }

    /**
     * Performs an INSERT on the database, given a Agenda or Criteria object.
     *
     * @param      mixed $values Criteria or Agenda object containing data that is used to create the INSERT statement.
     * @param      PropelPDO $con the PropelPDO connection to use
     * @return mixed           The new primary key.
     * @throws PropelException Any exceptions caught during processing will be
     *		 rethrown wrapped into a PropelException.
     */
    public static function doInsert($values, PropelPDO $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection(AgendaPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
        }

        if ($values instanceof Criteria) {
            $criteria = clone $values; // rename for clarity
        } else {
            $criteria = $values->buildCriteria(); // build Criteria from Agenda object
        }

        if ($criteria->containsKey(AgendaPeer::ID) && $criteria->keyContainsValue(AgendaPeer::ID) ) {
            throw new PropelException('Cannot insert a value for auto-increment primary key ('.AgendaPeer::ID.')');
        }


        // Set the correct dbName
        $criteria->setDbName(AgendaPeer::DATABASE_NAME);

        try {
            // use transaction because $criteria could contain info
            // for more than one table (I guess, conceivably)
            $con->beginTransaction();
            $pk = BasePeer::doInsert($criteria, $con);
            $con->commit();
        } catch (PropelException $e) {
            $con->rollBack();
            throw $e;
        }

        return $pk;
    }

    /**
     * Performs an UPDATE on the database, given a Agenda or Criteria object.
     *
     * @param      mixed $values Criteria or Agenda object containing data that is used to create the UPDATE statement.
     * @param      PropelPDO $con The connection to use (specify PropelPDO connection object to exert more control over transactions).
     * @return int             The number of affected rows (if supported by underlying database driver).
     * @throws PropelException Any exceptions caught during processing will be
     *		 rethrown wrapped into a PropelException.
     */
    public static function doUpdate($values, PropelPDO $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection(AgendaPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
        }

        $selectCriteria = new Criteria(AgendaPeer::DATABASE_NAME);

        if ($values instanceof Criteria) {
            $criteria = clone $values; // rename for clarity

            $comparison = $criteria->getComparison(AgendaPeer::ID);
            $value = $criteria->remove(AgendaPeer::ID);
            if ($value) {
                $selectCriteria->add(AgendaPeer::ID, $value, $comparison);
            } else {
                $selectCriteria->setPrimaryTableName(AgendaPeer::TABLE_NAME);
            }

        } else { // $values is Agenda object
            $criteria = $values->buildCriteria(); // gets full criteria
            $selectCriteria = $values->buildPkeyCriteria(); // gets criteria w/ primary key(s)
        }

        // set the correct dbName
        $criteria->setDbName(AgendaPeer::DATABASE_NAME);

        return BasePeer::doUpdate($selectCriteria, $criteria, $con);
    }

    /**
     * Deletes all rows from the hc_agenda table.
     *
     * @param      PropelPDO $con the connection to use
     * @return int             The number of affected rows (if supported by underlying database driver).
     * @throws PropelException
     */
    public static function doDeleteAll(PropelPDO $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection(AgendaPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
        }
        $affectedRows = 0; // initialize var to track total num of affected rows
        try {
            // use transaction because $criteria could contain info
            // for more than one table or we could emulating ON DELETE CASCADE, etc.
            $con->beginTransaction();
            AgendaPeer::doOnDeleteSetNull(new Criteria(AgendaPeer::DATABASE_NAME), $con);
            $affectedRows += BasePeer::doDeleteAll(AgendaPeer::TABLE_NAME, $con, AgendaPeer::DATABASE_NAME);
            // Because this db requires some delete cascade/set null emulation, we have to
            // clear the cached instance *after* the emulation has happened (since
            // instances get re-added by the select statement contained therein).
            AgendaPeer::clearInstancePool();
            AgendaPeer::clearRelatedInstancePool();
            $con->commit();

            return $affectedRows;
        } catch (PropelException $e) {
            $con->rollBack();
            throw $e;
        }
    }

    /**
     * Performs a DELETE on the database, given a Agenda or Criteria object OR a primary key value.
     *
     * @param      mixed $values Criteria or Agenda object or primary key or array of primary keys
     *              which is used to create the DELETE statement
     * @param      PropelPDO $con the connection to use
     * @return int The number of affected rows (if supported by underlying database driver).  This includes CASCADE-related rows
     *				if supported by native driver or if emulated using Propel.
     * @throws PropelException Any exceptions caught during processing will be
     *		 rethrown wrapped into a PropelException.
     */
     public static function doDelete($values, PropelPDO $con = null)
     {
        if ($con === null) {
            $con = Propel::getConnection(AgendaPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
        }

        if ($values instanceof Criteria) {
            // rename for clarity
            $criteria = clone $values;
        } elseif ($values instanceof Agenda) { // it's a model object
            // create criteria based on pk values
            $criteria = $values->buildPkeyCriteria();
        } else { // it's a primary key, or an array of pks
            $criteria = new Criteria(AgendaPeer::DATABASE_NAME);
            $criteria->add(AgendaPeer::ID, (array) $values, Criteria::IN);
        }

        // Set the correct dbName
        $criteria->setDbName(AgendaPeer::DATABASE_NAME);

        $affectedRows = 0; // initialize var to track total num of affected rows

        try {
            // use transaction because $criteria could contain info
            // for more than one table or we could emulating ON DELETE CASCADE, etc.
            $con->beginTransaction();

            // cloning the Criteria in case it's modified by doSelect() or doSelectStmt()
            $c = clone $criteria;
            AgendaPeer::doOnDeleteSetNull($c, $con);

            // Because this db requires some delete cascade/set null emulation, we have to
            // clear the cached instance *after* the emulation has happened (since
            // instances get re-added by the select statement contained therein).
            if ($values instanceof Criteria) {
                AgendaPeer::clearInstancePool();
            } elseif ($values instanceof Agenda) { // it's a model object
                AgendaPeer::removeInstanceFromPool($values);
            } else { // it's a primary key, or an array of pks
                foreach ((array) $values as $singleval) {
                    AgendaPeer::removeInstanceFromPool($singleval);
                }
            }

            $affectedRows += BasePeer::doDelete($criteria, $con);
            AgendaPeer::clearRelatedInstancePool();
            $con->commit();

            return $affectedRows;
        } catch (PropelException $e) {
            $con->rollBack();
            throw $e;
        }
    }

    /**
     * This is a method for emulating ON DELETE SET NULL DBs that don't support this
     * feature (like MySQL or SQLite).
     *
     * This method is not very speedy because it must perform a query first to get
     * the implicated records and then perform the deletes by calling those Peer classes.
     *
     * This method should be used within a transaction if possible.
     *
     * @param      Criteria $criteria
     * @param      PropelPDO $con
     * @return void
     */
    protected static function doOnDeleteSetNull(Criteria $criteria, PropelPDO $con)
    {

        // first find the objects that are implicated by the $criteria
        $objects = AgendaPeer::doSelect($criteria, $con);
        foreach ($objects as $obj) {

            // set fkey col in related Personalcirugia rows to null
            $selectCriteria = new Criteria(AgendaPeer::DATABASE_NAME);
            $updateValues = new Criteria(AgendaPeer::DATABASE_NAME);
            $selectCriteria->add(PersonalcirugiaPeer::AGENDA_ID, $obj->getId());
            $updateValues->add(PersonalcirugiaPeer::AGENDA_ID, null);

            BasePeer::doUpdate($selectCriteria, $updateValues, $con); // use BasePeer because generated Peer doUpdate() methods only update using pkey

        }
    }

    /**
     * Validates all modified columns of given Agenda object.
     * If parameter $columns is either a single column name or an array of column names
     * than only those columns are validated.
     *
     * NOTICE: This does not apply to primary or foreign keys for now.
     *
     * @param      Agenda $obj The object to validate.
     * @param      mixed $cols Column name or array of column names.
     *
     * @return mixed TRUE if all columns are valid or the error message of the first invalid column.
     */
    public static function doValidate($obj, $cols = null)
    {
        $columns = array();

        if ($cols) {
            $dbMap = Propel::getDatabaseMap(AgendaPeer::DATABASE_NAME);
            $tableMap = $dbMap->getTable(AgendaPeer::TABLE_NAME);

            if (! is_array($cols)) {
                $cols = array($cols);
            }

            foreach ($cols as $colName) {
                if ($tableMap->hasColumn($colName)) {
                    $get = 'get' . $tableMap->getColumn($colName)->getPhpName();
                    $columns[$colName] = $obj->$get();
                }
            }
        } else {

        }

        return BasePeer::doValidate(AgendaPeer::DATABASE_NAME, AgendaPeer::TABLE_NAME, $columns);
    }

    /**
     * Retrieve a single object by pkey.
     *
     * @param      int $pk the primary key.
     * @param      PropelPDO $con the connection to use
     * @return Agenda
     */
    public static function retrieveByPK($pk, PropelPDO $con = null)
    {

        if (null !== ($obj = AgendaPeer::getInstanceFromPool((string) $pk))) {
            return $obj;
        }

        if ($con === null) {
            $con = Propel::getConnection(AgendaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }

        $criteria = new Criteria(AgendaPeer::DATABASE_NAME);
        $criteria->add(AgendaPeer::ID, $pk);

        $v = AgendaPeer::doSelect($criteria, $con);

        return !empty($v) > 0 ? $v[0] : null;
    }

    /**
     * Retrieve multiple objects by pkey.
     *
     * @param      array $pks List of primary keys
     * @param      PropelPDO $con the connection to use
     * @return Agenda[]
     * @throws PropelException Any exceptions caught during processing will be
     *		 rethrown wrapped into a PropelException.
     */
    public static function retrieveByPKs($pks, PropelPDO $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection(AgendaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }

        $objs = null;
        if (empty($pks)) {
            $objs = array();
        } else {
            $criteria = new Criteria(AgendaPeer::DATABASE_NAME);
            $criteria->add(AgendaPeer::ID, $pks, Criteria::IN);
            $objs = AgendaPeer::doSelect($criteria, $con);
        }

        return $objs;
    }

    // symfony behavior

    /**
     * Returns an array of arrays that contain columns in each unique index.
     *
     * @return array
     */
    static public function getUniqueColumnNames()
    {
      return array();
    }

    // symfony_behaviors behavior

    /**
     * Returns the name of the hook to call from inside the supplied method.
     *
     * @param string $method The calling method
     *
     * @return string A hook name for {@link sfMixer}
     *
     * @throws LogicException If the method name is not recognized
     */
    static private function getMixerPreSelectHook($method)
    {
      if (preg_match('/^do(Select|Count)(Join(All(Except)?)?|Stmt)?/', $method, $match))
      {
        return sprintf('BaseAgendaPeer:%s:%1$s', 'Count' == $match[1] ? 'doCount' : $match[0]);
      }

      throw new LogicException(sprintf('Unrecognized function "%s"', $method));
    }

} // BaseAgendaPeer

// This is the static code needed to register the TableMap for this table with the main Propel class.
//
BaseAgendaPeer::buildTableMap();

