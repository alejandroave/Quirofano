<?php



/**
 * Skeleton subclass for representing a row from the 'hc_agenda' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.4-dev on:
 *
 * Wed Nov 23 10:10:52 2011
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    propel.generator.lib.model.data
 */
class Agenda extends BaseAgenda {

  protected $classes = array();

  public function __toString()
  {
    return $this->getId().' '.$this->getProgramacion('d-M-Y').' a las '.$this->getHora('h:i A');
  }

  public function getClasses()
  {
    $classes = array();
    $string = '';
    $status = AgendaPeer::getStatus();

    if ($this->getStatus() < 10) {
      $classes['solicitado'] = $this->estaSolicitado() ? 'solicitado' : false;

      if ($this->estaAtrasado()) {
        $classes['diferido'] = 'atrasada';
      }
      else {
        if ($this->getIntervaloAtraso() > 0 ) {
          $classes['diferido'] = 'diferido'.$this->getTiempoDiferido(false);
        }
      }
    }

    if ($this->getStatus() == -50) {
      $classes['diferido'] = 'diferido';
    }

    $classes['agenda'] = 'cxrow';
    $classes['tipocx'] = $this->getTipoProcId() ? 'cxtipo_'.$this->getTipoProcId() : false;
    $classes['convenio'] = 'convenio'.$this->getAtencionId();
    $classes['status'] = $status[$this->getStatus()];

    return trim(implode(' ', $classes));
  }

  public function getQuirofanoSlug()
  {
    return $this->getQuirofano()->getSlug();
  }

  public function estaAtrasado()
  {
    $time = $this->getIntervaloAtraso();

    if ($time < 0) {
      $return = false;
    }
    elseif ($time > 86400) {
      $return = true;
    }
    else {
      $return = false;
    }

    return $return;
  }

  public function getHoraMostrar() {
    if ($this->getStatus() >= '100') {
      return $this->getEgreso('h:i A')." [S]";
    }
    elseif ($this->getStatus() >= '10') {
      return $this->getIngreso('h:i A')." [I]";
    }
    elseif ($this->getStatus() == '-50') {
      return "Diferida";
    }
    else {
      return $this->getHora('h:i A');
    }
  }

  public function esDiferido() {
    return $this->getStatus() == '-50' ? true: false;
  }

  public function esmepalmado()
  {



    return 0;
  }
  
  protected function getIntervaloAtraso()
  {
    $hora = $this->getHora('H');
    $min = $this->getHora('i');
    $dia = $this->getProgramacion('d');
    $mes = $this->getProgramacion('m');
    $ano = $this->getProgramacion('y');

    return date('U') - mktime($hora, $min, 0, $mes, $dia, $ano);
  }

  public function getTiempoDiferido($useUnits = true)
  {
    $time = $this->getIntervaloAtraso();

    if ($time > 0) {
      if ($useUnits) {
        if ($time >= 86400) {
          $time /= 86400;
          $unit = $time <= 2 ? 'Dia': 'Dias';
        }
        elseif ($time >= 3600) {
          $time /= 3600;
          $unit = $time <= 2 ? 'Hora': 'Horas';
        }
        else {
          $time /= 60;
          $unit = $time <= 2 ? 'Minuto': 'Minutos';
        }
      }
      else {
        if ($time >= 3600) {
          $time /= 3600;
        }
      }

      $time = round($time);
      return  $useUnits ? $time.' '.$unit : $time;
    }

    return 'A tiempo';
  }

  public function estaSolicitado()
  {
    return $this->getSolicitado() ? true : false;
  }

  protected $objPrograma;

  public function getMedicoPrograma()
  {
    if ($this->objPrograma == null && $this->getPersonalcirugias() != null ) {
      foreach ($this->getPersonalcirugias() as $personal) {
        if ($personal->getTipo() == 'cirujano' && $personal->getprograma() == true  && $personal->getStatus() == 0){
          $this->objPrograma = $personal;
          break;
        }
      }
    }

    return $this->objPrograma ? $this->objPrograma : new Personalcirugia();
  }

  public function getPrograma() {
    return $this->getMedicoPrograma()->getPersonalNombre();
  }

  protected $transPersonal;

  public function getPersonalTransoperatorio() {
    if ($this->transPersonal === null && $this->getPersonalcirugias() != null ) {
      $this->transPersonal = new PropelCollection();
      foreach ($this->getPersonalcirugias() as $personal ) {
        if ($personal->getTransoperatorio()) {
          $this->transPersonal->set('Personalcirugia_'.$personal->getId(), $personal);
        }

      }
    }

    return $this->transPersonal ? $this->transPersonal : null;
  }

  protected $cxInicia;

  public function getCirujanoInicial() {
    if ($this->cxInicia == null && $this->getPersonalcirugias() != null ) {
      foreach ($this->getPersonalcirugias() as $personal) {
        if ($personal->getTipo() === 'cirujano' && $personal->getInicia() == 1  && $personal->getStatus() == 0) {
          $this->cxInicia = $personal;
          break;
        }
      }
    }

    return $this->cxInicia ? $this->cxInicia : new Personalcirugia();
  }

  protected $anesInicia;

  public function getAnestesiologoInicial() {
    if ($this->anesInicia == null && $this->getPersonalcirugias() != null ) {
      foreach ($this->getPersonalcirugias() as $personal) {
        if ($personal->getTipo() == 'anestesista' && $personal->getInicia() == true && $personal->getStatus() == 0) {
          $this->anesInicia = $personal;
          break;
        }
      }
    }

    return $this->anesInicia ? $this->anesInicia : new Personalcirugia();
  }

  protected $cxSupInicia;

  public function getCirujanoSupInicial() {
    if ($this->cxSupInicia == null  && $this->getPersonalcirugias() != null ) {
      foreach ($this->getPersonalcirugias() as $personal) {
        if ($personal->getTipo() == 'cirujano' && $personal->getInicia() == true && $personal->getStatus() == 1) {
          $this->cxSupInicia = $personal;
          break;
        }
      }
    }

    return $this->cxSupInicia ? $this->cxSupInicia : new Personalcirugia() ;
  }

  protected $anesSupInicia;

  public function getAnestesiologoSupInicial() {
    if ($this->anesSupInicia == null && $this->getPersonalcirugias() != null ) {
      foreach ($this->getPersonalcirugias() as $personal) {
        if ($personal->getTipo() == 'anestesista' && $personal->getInicia() == true && $personal->getStatus() == 1) {
          $this->anesSupInicia = $personal;
          break;
        }
      }
    }

    return $this->anesSupInicia ? $this->anesSupInicia : new Personalcirugia();
  }

  protected $instrumentistaInicial;

  public function getInstrumentistaInicial() {
    if ($this->instrumentistaInicial == null && $this->getPersonalcirugias() != null ) {
      foreach ($this->getPersonalcirugias() as $personal) {
        if ($personal->getTipo() == 'enfermeria' && $personal->getInicia() == true && $personal->getStatus() == 2) {
          $this->instrumentistaInicial = $personal;
          break;
        }
      }
    }

    return $this->instrumentistaInicial ? $this->instrumentistaInicial : new Personalcirugia();
  }

  protected $circulanteInicial;

  public function getCirculanteInicial() {
    if ($this->circulanteInicial == null && $this->getPersonalcirugias() != null ) {
      foreach ($this->getPersonalcirugias() as $personal) {
        if ($personal->getTipo() == 'enfermeria' && $personal->getInicia() == true && $personal->getStatus() == 3) {
          $this->circulanteInicial = $personal;
          break;
        }
      }
    }

    return $this->circulanteInicial ? $this->circulanteInicial : new Personalcirugia();
  }

  public function getPaciente(PropelPDO $con = null)
  {
    if (parent::getPaciente()) {
      return parent::getPaciente();
    }
    else {
      return $this->getPacienteName();
    }
  }

  public function getVerboseStatus()
  {
    $status = AgendaPeer::getStatus();

    return ucfirst($status[$this->getStatus()]);
  }
  
  public function writeProcedimientos() {
    $result = '';  $i = 1;
    foreach ($this->getProcedimientocirugias() as $procedimiento) {
            //$result .= $i++ ? '<br/>'.$procedimiento: $procedimiento;
      $result .=  ' |||procedimiento: ' .$i++;
      $result .=' id =  '.$procedimiento->getId();
      $result .=' cie9mc = '.$procedimiento->getcie9mc();
      $result .=' region = '.$procedimiento->getregion();
      $result .=' detalles = '.$procedimiento->getdetalles();
      $result .=' Servicio = '.$procedimiento->getservicioId();
      $result .=' ||| '; 

          }
    return $result;
  }

public function empalmado()
{
  foreach ($this as $cirugia) {
  }
  return null;
}
  

} // Agenda
